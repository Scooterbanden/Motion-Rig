
MotionRig.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d904  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800db9c  0800db9c  0000eb9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dc1c  0800dc1c  0000ec1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dc24  0800dc24  0000ec24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800dc28  0800dc28  0000ec28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000104  24000000  0800dc2c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002194  24000104  0800dd30  0000f104  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24002298  0800dd30  0000f298  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f104  2**0
                  CONTENTS, READONLY
 10 .debug_info   000286ea  00000000  00000000  0000f132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000047a7  00000000  00000000  0003781c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002000  00000000  00000000  0003bfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001917  00000000  00000000  0003dfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d4c4  00000000  00000000  0003f8df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029461  00000000  00000000  0007cda3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018137f  00000000  00000000  000a6204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00227583  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008b38  00000000  00000000  002275c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000088  00000000  00000000  00230100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000104 	.word	0x24000104
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800db84 	.word	0x0800db84

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000108 	.word	0x24000108
 80002d4:	0800db84 	.word	0x0800db84

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000608:	f000 ff4e 	bl	80014a8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f001 fdc0 	bl	8002190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f824 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 fe1c 	bl	8001250 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000618:	f000 fa32 	bl	8000a80 <MX_TIM1_Init>
  MX_TIM2_Init();
 800061c:	f000 fa8a 	bl	8000b34 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000620:	f000 fadc 	bl	8000bdc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000624:	f000 fb30 	bl	8000c88 <MX_TIM4_Init>
  MX_TIM12_Init();
 8000628:	f000 fc84 	bl	8000f34 <MX_TIM12_Init>
  MX_TIM13_Init();
 800062c:	f000 fcdc 	bl	8000fe8 <MX_TIM13_Init>
  MX_USART2_UART_Init();
 8000630:	f000 fd76 	bl	8001120 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000634:	f00c fd60 	bl	800d0f8 <MX_USB_DEVICE_Init>
  MX_HRTIM_Init();
 8000638:	f000 f88c 	bl	8000754 <MX_HRTIM_Init>
  MX_I2C1_Init();
 800063c:	f000 f96c 	bl	8000918 <MX_I2C1_Init>
  MX_LPTIM2_Init();
 8000640:	f000 f9ea 	bl	8000a18 <MX_LPTIM2_Init>
  MX_TIM5_Init();
 8000644:	f000 fb76 	bl	8000d34 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000648:	f000 fbca 	bl	8000de0 <MX_TIM8_Init>
  MX_TIM14_Init();
 800064c:	f000 fd1a 	bl	8001084 <MX_TIM14_Init>
  MX_USART3_UART_Init();
 8000650:	f000 fdb2 	bl	80011b8 <MX_USART3_UART_Init>
  MX_I2C4_Init();
 8000654:	f000 f9a0 	bl	8000998 <MX_I2C4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <main+0x54>

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b09c      	sub	sp, #112	@ 0x70
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000666:	224c      	movs	r2, #76	@ 0x4c
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f00d fa5e 	bl	800db2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2220      	movs	r2, #32
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f00d fa58 	bl	800db2c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800067c:	2002      	movs	r0, #2
 800067e:	f004 fb09 	bl	8004c94 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	4b31      	ldr	r3, [pc, #196]	@ (800074c <SystemClock_Config+0xf0>)
 8000688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800068a:	4a30      	ldr	r2, [pc, #192]	@ (800074c <SystemClock_Config+0xf0>)
 800068c:	f023 0301 	bic.w	r3, r3, #1
 8000690:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000692:	4b2e      	ldr	r3, [pc, #184]	@ (800074c <SystemClock_Config+0xf0>)
 8000694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	4b2c      	ldr	r3, [pc, #176]	@ (8000750 <SystemClock_Config+0xf4>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000750 <SystemClock_Config+0xf4>)
 80006a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b28      	ldr	r3, [pc, #160]	@ (8000750 <SystemClock_Config+0xf4>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006b8:	bf00      	nop
 80006ba:	4b25      	ldr	r3, [pc, #148]	@ (8000750 <SystemClock_Config+0xf4>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006c6:	d1f8      	bne.n	80006ba <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006da:	2301      	movs	r3, #1
 80006dc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80006de:	233c      	movs	r3, #60	@ 0x3c
 80006e0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006e6:	2308      	movs	r3, #8
 80006e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006ee:	230c      	movs	r3, #12
 80006f0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006fe:	4618      	mov	r0, r3
 8000700:	f004 fb12 	bl	8004d28 <HAL_RCC_OscConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800070a:	f000 fef9 	bl	8001500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	233f      	movs	r3, #63	@ 0x3f
 8000710:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	2303      	movs	r3, #3
 8000714:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800071a:	2308      	movs	r3, #8
 800071c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000722:	2340      	movs	r3, #64	@ 0x40
 8000724:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800072a:	2340      	movs	r3, #64	@ 0x40
 800072c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2102      	movs	r1, #2
 8000732:	4618      	mov	r0, r3
 8000734:	f004 ff52 	bl	80055dc <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800073e:	f000 fedf 	bl	8001500 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3770      	adds	r7, #112	@ 0x70
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	58000400 	.word	0x58000400
 8000750:	58024800 	.word	0x58024800

08000754 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b0a2      	sub	sp, #136	@ 0x88
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800075a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076c:	2254      	movs	r2, #84	@ 0x54
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f00d f9db 	bl	800db2c <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2220      	movs	r2, #32
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f00d f9d5 	bl	800db2c <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8000782:	4b63      	ldr	r3, [pc, #396]	@ (8000910 <MX_HRTIM_Init+0x1bc>)
 8000784:	4a63      	ldr	r2, [pc, #396]	@ (8000914 <MX_HRTIM_Init+0x1c0>)
 8000786:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000788:	4b61      	ldr	r3, [pc, #388]	@ (8000910 <MX_HRTIM_Init+0x1bc>)
 800078a:	2200      	movs	r2, #0
 800078c:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800078e:	4b60      	ldr	r3, [pc, #384]	@ (8000910 <MX_HRTIM_Init+0x1bc>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8000794:	485e      	ldr	r0, [pc, #376]	@ (8000910 <MX_HRTIM_Init+0x1bc>)
 8000796:	f002 f90f 	bl	80029b8 <HAL_HRTIM_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_HRTIM_Init+0x50>
  {
    Error_Handler();
 80007a0:	f000 feae 	bl	8001500 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFFD;
 80007a4:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 80007a8:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80007aa:	2300      	movs	r3, #0
 80007ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 80007ae:	2305      	movs	r3, #5
 80007b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80007b4:	2308      	movs	r3, #8
 80007b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 80007ba:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80007be:	461a      	mov	r2, r3
 80007c0:	2100      	movs	r1, #0
 80007c2:	4853      	ldr	r0, [pc, #332]	@ (8000910 <MX_HRTIM_Init+0x1bc>)
 80007c4:	f002 f9c8 	bl	8002b58 <HAL_HRTIM_TimeBaseConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_HRTIM_Init+0x7e>
  {
    Error_Handler();
 80007ce:	f000 fe97 	bl	8001500 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	@ 0x24
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pTimerCfg.DMASrcAddress = 0x0000;
 80007da:	2300      	movs	r3, #0
 80007dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pTimerCfg.DMADstAddress = 0x0000;
 80007de:	2300      	movs	r3, #0
 80007e0:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMASize = 0x1;
 80007e2:	2301      	movs	r3, #1
 80007e4:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80007e6:	2300      	movs	r3, #0
 80007e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80007ea:	2300      	movs	r3, #0
 80007ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80007ee:	2300      	movs	r3, #0
 80007f0:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80007f6:	2300      	movs	r3, #0
 80007f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80007fa:	2300      	movs	r3, #0
 80007fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80007fe:	2300      	movs	r3, #0
 8000800:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8000802:	2300      	movs	r3, #0
 8000804:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8000806:	2300      	movs	r3, #0
 8000808:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 800080a:	2300      	movs	r3, #0
 800080c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800080e:	2300      	movs	r3, #0
 8000810:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8000812:	2300      	movs	r3, #0
 8000814:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8000816:	2300      	movs	r3, #0
 8000818:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 800081a:	2300      	movs	r3, #0
 800081c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 800081e:	2300      	movs	r3, #0
 8000820:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8000822:	2300      	movs	r3, #0
 8000824:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8000826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800082a:	461a      	mov	r2, r3
 800082c:	2100      	movs	r1, #0
 800082e:	4838      	ldr	r0, [pc, #224]	@ (8000910 <MX_HRTIM_Init+0x1bc>)
 8000830:	f002 f9ba 	bl	8002ba8 <HAL_HRTIM_WaveformTimerConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_HRTIM_Init+0xea>
  {
    Error_Handler();
 800083a:	f000 fe61 	bl	8001500 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 800083e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000842:	461a      	mov	r2, r3
 8000844:	2101      	movs	r1, #1
 8000846:	4832      	ldr	r0, [pc, #200]	@ (8000910 <MX_HRTIM_Init+0x1bc>)
 8000848:	f002 f9ae 	bl	8002ba8 <HAL_HRTIM_WaveformTimerConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_HRTIM_Init+0x102>
  {
    Error_Handler();
 8000852:	f000 fe55 	bl	8001500 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8000856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800085a:	461a      	mov	r2, r3
 800085c:	2102      	movs	r1, #2
 800085e:	482c      	ldr	r0, [pc, #176]	@ (8000910 <MX_HRTIM_Init+0x1bc>)
 8000860:	f002 f9a2 	bl	8002ba8 <HAL_HRTIM_WaveformTimerConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 800086a:	f000 fe49 	bl	8001500 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8000882:	2300      	movs	r3, #0
 8000884:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2201      	movs	r2, #1
 8000892:	2100      	movs	r1, #0
 8000894:	481e      	ldr	r0, [pc, #120]	@ (8000910 <MX_HRTIM_Init+0x1bc>)
 8000896:	f002 f9f9 	bl	8002c8c <HAL_HRTIM_WaveformOutputConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_HRTIM_Init+0x150>
  {
    Error_Handler();
 80008a0:	f000 fe2e 	bl	8001500 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2204      	movs	r2, #4
 80008a8:	2101      	movs	r1, #1
 80008aa:	4819      	ldr	r0, [pc, #100]	@ (8000910 <MX_HRTIM_Init+0x1bc>)
 80008ac:	f002 f9ee 	bl	8002c8c <HAL_HRTIM_WaveformOutputConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_HRTIM_Init+0x166>
  {
    Error_Handler();
 80008b6:	f000 fe23 	bl	8001500 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 80008ba:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80008be:	461a      	mov	r2, r3
 80008c0:	2101      	movs	r1, #1
 80008c2:	4813      	ldr	r0, [pc, #76]	@ (8000910 <MX_HRTIM_Init+0x1bc>)
 80008c4:	f002 f948 	bl	8002b58 <HAL_HRTIM_TimeBaseConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_HRTIM_Init+0x17e>
  {
    Error_Handler();
 80008ce:	f000 fe17 	bl	8001500 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 80008d2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80008d6:	461a      	mov	r2, r3
 80008d8:	2102      	movs	r1, #2
 80008da:	480d      	ldr	r0, [pc, #52]	@ (8000910 <MX_HRTIM_Init+0x1bc>)
 80008dc:	f002 f93c 	bl	8002b58 <HAL_HRTIM_TimeBaseConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_HRTIM_Init+0x196>
  {
    Error_Handler();
 80008e6:	f000 fe0b 	bl	8001500 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2220      	movs	r2, #32
 80008ee:	2102      	movs	r1, #2
 80008f0:	4807      	ldr	r0, [pc, #28]	@ (8000910 <MX_HRTIM_Init+0x1bc>)
 80008f2:	f002 f9cb 	bl	8002c8c <HAL_HRTIM_WaveformOutputConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_HRTIM_Init+0x1ac>
  {
    Error_Handler();
 80008fc:	f000 fe00 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8000900:	4803      	ldr	r0, [pc, #12]	@ (8000910 <MX_HRTIM_Init+0x1bc>)
 8000902:	f000 fe57 	bl	80015b4 <HAL_HRTIM_MspPostInit>

}
 8000906:	bf00      	nop
 8000908:	3788      	adds	r7, #136	@ 0x88
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	24000120 	.word	0x24000120
 8000914:	40017400 	.word	0x40017400

08000918 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800091c:	4b1b      	ldr	r3, [pc, #108]	@ (800098c <MX_I2C1_Init+0x74>)
 800091e:	4a1c      	ldr	r2, [pc, #112]	@ (8000990 <MX_I2C1_Init+0x78>)
 8000920:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x107075B0;
 8000922:	4b1a      	ldr	r3, [pc, #104]	@ (800098c <MX_I2C1_Init+0x74>)
 8000924:	4a1b      	ldr	r2, [pc, #108]	@ (8000994 <MX_I2C1_Init+0x7c>)
 8000926:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000928:	4b18      	ldr	r3, [pc, #96]	@ (800098c <MX_I2C1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800092e:	4b17      	ldr	r3, [pc, #92]	@ (800098c <MX_I2C1_Init+0x74>)
 8000930:	2201      	movs	r2, #1
 8000932:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000934:	4b15      	ldr	r3, [pc, #84]	@ (800098c <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800093a:	4b14      	ldr	r3, [pc, #80]	@ (800098c <MX_I2C1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000940:	4b12      	ldr	r3, [pc, #72]	@ (800098c <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000946:	4b11      	ldr	r3, [pc, #68]	@ (800098c <MX_I2C1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800094c:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <MX_I2C1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000952:	480e      	ldr	r0, [pc, #56]	@ (800098c <MX_I2C1_Init+0x74>)
 8000954:	f002 fd1a 	bl	800338c <HAL_I2C_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800095e:	f000 fdcf 	bl	8001500 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000962:	2100      	movs	r1, #0
 8000964:	4809      	ldr	r0, [pc, #36]	@ (800098c <MX_I2C1_Init+0x74>)
 8000966:	f002 fdad 	bl	80034c4 <HAL_I2CEx_ConfigAnalogFilter>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000970:	f000 fdc6 	bl	8001500 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000974:	2100      	movs	r1, #0
 8000976:	4805      	ldr	r0, [pc, #20]	@ (800098c <MX_I2C1_Init+0x74>)
 8000978:	f002 fdef 	bl	800355a <HAL_I2CEx_ConfigDigitalFilter>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000982:	f000 fdbd 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	240001fc 	.word	0x240001fc
 8000990:	40005400 	.word	0x40005400
 8000994:	107075b0 	.word	0x107075b0

08000998 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800099c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <MX_I2C4_Init+0x74>)
 800099e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a10 <MX_I2C4_Init+0x78>)
 80009a0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x107075B0;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <MX_I2C4_Init+0x74>)
 80009a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a14 <MX_I2C4_Init+0x7c>)
 80009a6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80009a8:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <MX_I2C4_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ae:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <MX_I2C4_Init+0x74>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b4:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <MX_I2C4_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <MX_I2C4_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <MX_I2C4_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_I2C4_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <MX_I2C4_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80009d2:	480e      	ldr	r0, [pc, #56]	@ (8000a0c <MX_I2C4_Init+0x74>)
 80009d4:	f002 fcda 	bl	800338c <HAL_I2C_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80009de:	f000 fd8f 	bl	8001500 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009e2:	2100      	movs	r1, #0
 80009e4:	4809      	ldr	r0, [pc, #36]	@ (8000a0c <MX_I2C4_Init+0x74>)
 80009e6:	f002 fd6d 	bl	80034c4 <HAL_I2CEx_ConfigAnalogFilter>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80009f0:	f000 fd86 	bl	8001500 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80009f4:	2100      	movs	r1, #0
 80009f6:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <MX_I2C4_Init+0x74>)
 80009f8:	f002 fdaf 	bl	800355a <HAL_I2CEx_ConfigDigitalFilter>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a02:	f000 fd7d 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	24000250 	.word	0x24000250
 8000a10:	58001c00 	.word	0x58001c00
 8000a14:	107075b0 	.word	0x107075b0

08000a18 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8000a1c:	4b16      	ldr	r3, [pc, #88]	@ (8000a78 <MX_LPTIM2_Init+0x60>)
 8000a1e:	4a17      	ldr	r2, [pc, #92]	@ (8000a7c <MX_LPTIM2_Init+0x64>)
 8000a20:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000a22:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <MX_LPTIM2_Init+0x60>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000a28:	4b13      	ldr	r3, [pc, #76]	@ (8000a78 <MX_LPTIM2_Init+0x60>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hlptim2.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8000a2e:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <MX_LPTIM2_Init+0x60>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8000a34:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <MX_LPTIM2_Init+0x60>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_LPTIM2_Init+0x60>)
 8000a3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a40:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000a42:	4b0d      	ldr	r3, [pc, #52]	@ (8000a78 <MX_LPTIM2_Init+0x60>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000a48:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <MX_LPTIM2_Init+0x60>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a78 <MX_LPTIM2_Init+0x60>)
 8000a50:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000a54:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000a56:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <MX_LPTIM2_Init+0x60>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <MX_LPTIM2_Init+0x60>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <MX_LPTIM2_Init+0x60>)
 8000a64:	f002 fdc6 	bl	80035f4 <HAL_LPTIM_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_LPTIM2_Init+0x5a>
  {
    Error_Handler();
 8000a6e:	f000 fd47 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	240002a4 	.word	0x240002a4
 8000a7c:	58002400 	.word	0x58002400

08000a80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08c      	sub	sp, #48	@ 0x30
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	2224      	movs	r2, #36	@ 0x24
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f00d f84c 	bl	800db2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a94:	463b      	mov	r3, r7
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a9e:	4b23      	ldr	r3, [pc, #140]	@ (8000b2c <MX_TIM1_Init+0xac>)
 8000aa0:	4a23      	ldr	r2, [pc, #140]	@ (8000b30 <MX_TIM1_Init+0xb0>)
 8000aa2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000aa4:	4b21      	ldr	r3, [pc, #132]	@ (8000b2c <MX_TIM1_Init+0xac>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aaa:	4b20      	ldr	r3, [pc, #128]	@ (8000b2c <MX_TIM1_Init+0xac>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b2c <MX_TIM1_Init+0xac>)
 8000ab2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ab6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <MX_TIM1_Init+0xac>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000abe:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <MX_TIM1_Init+0xac>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac4:	4b19      	ldr	r3, [pc, #100]	@ (8000b2c <MX_TIM1_Init+0xac>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000aca:	2301      	movs	r3, #1
 8000acc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	4619      	mov	r1, r3
 8000af4:	480d      	ldr	r0, [pc, #52]	@ (8000b2c <MX_TIM1_Init+0xac>)
 8000af6:	f006 ffd7 	bl	8007aa8 <HAL_TIM_Encoder_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000b00:	f000 fcfe 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b04:	2300      	movs	r3, #0
 8000b06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b10:	463b      	mov	r3, r7
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <MX_TIM1_Init+0xac>)
 8000b16:	f007 fdf3 	bl	8008700 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b20:	f000 fcee 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	3730      	adds	r7, #48	@ 0x30
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	240002dc 	.word	0x240002dc
 8000b30:	40010000 	.word	0x40010000

08000b34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08c      	sub	sp, #48	@ 0x30
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	2224      	movs	r2, #36	@ 0x24
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f00c fff2 	bl	800db2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b48:	463b      	mov	r3, r7
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b52:	4b21      	ldr	r3, [pc, #132]	@ (8000bd8 <MX_TIM2_Init+0xa4>)
 8000b54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd8 <MX_TIM2_Init+0xa4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b60:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd8 <MX_TIM2_Init+0xa4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000b66:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd8 <MX_TIM2_Init+0xa4>)
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd8 <MX_TIM2_Init+0xa4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b74:	4b18      	ldr	r3, [pc, #96]	@ (8000bd8 <MX_TIM2_Init+0xa4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b82:	2301      	movs	r3, #1
 8000b84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b92:	2301      	movs	r3, #1
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480c      	ldr	r0, [pc, #48]	@ (8000bd8 <MX_TIM2_Init+0xa4>)
 8000ba6:	f006 ff7f 	bl	8007aa8 <HAL_TIM_Encoder_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000bb0:	f000 fca6 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <MX_TIM2_Init+0xa4>)
 8000bc2:	f007 fd9d 	bl	8008700 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000bcc:	f000 fc98 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	3730      	adds	r7, #48	@ 0x30
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	24000328 	.word	0x24000328

08000bdc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	@ 0x30
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	2224      	movs	r2, #36	@ 0x24
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f00c ff9e 	bl	800db2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bfa:	4b21      	ldr	r3, [pc, #132]	@ (8000c80 <MX_TIM3_Init+0xa4>)
 8000bfc:	4a21      	ldr	r2, [pc, #132]	@ (8000c84 <MX_TIM3_Init+0xa8>)
 8000bfe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c00:	4b1f      	ldr	r3, [pc, #124]	@ (8000c80 <MX_TIM3_Init+0xa4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c06:	4b1e      	ldr	r3, [pc, #120]	@ (8000c80 <MX_TIM3_Init+0xa4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c80 <MX_TIM3_Init+0xa4>)
 8000c0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c14:	4b1a      	ldr	r3, [pc, #104]	@ (8000c80 <MX_TIM3_Init+0xa4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1a:	4b19      	ldr	r3, [pc, #100]	@ (8000c80 <MX_TIM3_Init+0xa4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c20:	2301      	movs	r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c24:	2300      	movs	r3, #0
 8000c26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	4619      	mov	r1, r3
 8000c4a:	480d      	ldr	r0, [pc, #52]	@ (8000c80 <MX_TIM3_Init+0xa4>)
 8000c4c:	f006 ff2c 	bl	8007aa8 <HAL_TIM_Encoder_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c56:	f000 fc53 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c62:	463b      	mov	r3, r7
 8000c64:	4619      	mov	r1, r3
 8000c66:	4806      	ldr	r0, [pc, #24]	@ (8000c80 <MX_TIM3_Init+0xa4>)
 8000c68:	f007 fd4a 	bl	8008700 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c72:	f000 fc45 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	3730      	adds	r7, #48	@ 0x30
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	24000374 	.word	0x24000374
 8000c84:	40000400 	.word	0x40000400

08000c88 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08c      	sub	sp, #48	@ 0x30
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	2224      	movs	r2, #36	@ 0x24
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f00c ff48 	bl	800db2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ca6:	4b21      	ldr	r3, [pc, #132]	@ (8000d2c <MX_TIM4_Init+0xa4>)
 8000ca8:	4a21      	ldr	r2, [pc, #132]	@ (8000d30 <MX_TIM4_Init+0xa8>)
 8000caa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cac:	4b1f      	ldr	r3, [pc, #124]	@ (8000d2c <MX_TIM4_Init+0xa4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d2c <MX_TIM4_Init+0xa4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d2c <MX_TIM4_Init+0xa4>)
 8000cba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cbe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d2c <MX_TIM4_Init+0xa4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <MX_TIM4_Init+0xa4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480d      	ldr	r0, [pc, #52]	@ (8000d2c <MX_TIM4_Init+0xa4>)
 8000cf8:	f006 fed6 	bl	8007aa8 <HAL_TIM_Encoder_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000d02:	f000 fbfd 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d06:	2300      	movs	r3, #0
 8000d08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d0e:	463b      	mov	r3, r7
 8000d10:	4619      	mov	r1, r3
 8000d12:	4806      	ldr	r0, [pc, #24]	@ (8000d2c <MX_TIM4_Init+0xa4>)
 8000d14:	f007 fcf4 	bl	8008700 <HAL_TIMEx_MasterConfigSynchronization>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d1e:	f000 fbef 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	3730      	adds	r7, #48	@ 0x30
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	240003c0 	.word	0x240003c0
 8000d30:	40000800 	.word	0x40000800

08000d34 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08c      	sub	sp, #48	@ 0x30
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	2224      	movs	r2, #36	@ 0x24
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f00c fef2 	bl	800db2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d48:	463b      	mov	r3, r7
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d52:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <MX_TIM5_Init+0xa4>)
 8000d54:	4a21      	ldr	r2, [pc, #132]	@ (8000ddc <MX_TIM5_Init+0xa8>)
 8000d56:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000d58:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd8 <MX_TIM5_Init+0xa4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd8 <MX_TIM5_Init+0xa4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000d64:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd8 <MX_TIM5_Init+0xa4>)
 8000d66:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <MX_TIM5_Init+0xa4>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d72:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <MX_TIM5_Init+0xa4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d80:	2301      	movs	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d90:	2301      	movs	r3, #1
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	4619      	mov	r1, r3
 8000da2:	480d      	ldr	r0, [pc, #52]	@ (8000dd8 <MX_TIM5_Init+0xa4>)
 8000da4:	f006 fe80 	bl	8007aa8 <HAL_TIM_Encoder_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8000dae:	f000 fba7 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db2:	2300      	movs	r3, #0
 8000db4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000dba:	463b      	mov	r3, r7
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4806      	ldr	r0, [pc, #24]	@ (8000dd8 <MX_TIM5_Init+0xa4>)
 8000dc0:	f007 fc9e 	bl	8008700 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8000dca:	f000 fb99 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	3730      	adds	r7, #48	@ 0x30
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2400040c 	.word	0x2400040c
 8000ddc:	40000c00 	.word	0x40000c00

08000de0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b09a      	sub	sp, #104	@ 0x68
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e00:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
 8000e10:	615a      	str	r2, [r3, #20]
 8000e12:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	222c      	movs	r2, #44	@ 0x2c
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f00c fe86 	bl	800db2c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e20:	4b42      	ldr	r3, [pc, #264]	@ (8000f2c <MX_TIM8_Init+0x14c>)
 8000e22:	4a43      	ldr	r2, [pc, #268]	@ (8000f30 <MX_TIM8_Init+0x150>)
 8000e24:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000e26:	4b41      	ldr	r3, [pc, #260]	@ (8000f2c <MX_TIM8_Init+0x14c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f2c <MX_TIM8_Init+0x14c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000e32:	4b3e      	ldr	r3, [pc, #248]	@ (8000f2c <MX_TIM8_Init+0x14c>)
 8000e34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e38:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f2c <MX_TIM8_Init+0x14c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e40:	4b3a      	ldr	r3, [pc, #232]	@ (8000f2c <MX_TIM8_Init+0x14c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e46:	4b39      	ldr	r3, [pc, #228]	@ (8000f2c <MX_TIM8_Init+0x14c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000e4c:	4837      	ldr	r0, [pc, #220]	@ (8000f2c <MX_TIM8_Init+0x14c>)
 8000e4e:	f006 fd7d 	bl	800794c <HAL_TIM_Base_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000e58:	f000 fb52 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e60:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000e62:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000e66:	4619      	mov	r1, r3
 8000e68:	4830      	ldr	r0, [pc, #192]	@ (8000f2c <MX_TIM8_Init+0x14c>)
 8000e6a:	f006 ff3d 	bl	8007ce8 <HAL_TIM_ConfigClockSource>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000e74:	f000 fb44 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8000e78:	482c      	ldr	r0, [pc, #176]	@ (8000f2c <MX_TIM8_Init+0x14c>)
 8000e7a:	f006 fdbe 	bl	80079fa <HAL_TIM_OC_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000e84:	f000 fb3c 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e94:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4824      	ldr	r0, [pc, #144]	@ (8000f2c <MX_TIM8_Init+0x14c>)
 8000e9c:	f007 fc30 	bl	8008700 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000ea6:	f000 fb2b 	bl	8001500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ec2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4818      	ldr	r0, [pc, #96]	@ (8000f2c <MX_TIM8_Init+0x14c>)
 8000ecc:	f006 fe92 	bl	8007bf4 <HAL_TIM_OC_ConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8000ed6:	f000 fb13 	bl	8001500 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ef2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000efc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4807      	ldr	r0, [pc, #28]	@ (8000f2c <MX_TIM8_Init+0x14c>)
 8000f10:	f007 fc84 	bl	800881c <HAL_TIMEx_ConfigBreakDeadTime>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8000f1a:	f000 faf1 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f1e:	4803      	ldr	r0, [pc, #12]	@ (8000f2c <MX_TIM8_Init+0x14c>)
 8000f20:	f000 fea8 	bl	8001c74 <HAL_TIM_MspPostInit>

}
 8000f24:	bf00      	nop
 8000f26:	3768      	adds	r7, #104	@ 0x68
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	24000458 	.word	0x24000458
 8000f30:	40010400 	.word	0x40010400

08000f34 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	@ 0x28
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3a:	f107 031c 	add.w	r3, r7, #28
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f46:	463b      	mov	r3, r7
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
 8000f54:	615a      	str	r2, [r3, #20]
 8000f56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000f58:	4b21      	ldr	r3, [pc, #132]	@ (8000fe0 <MX_TIM12_Init+0xac>)
 8000f5a:	4a22      	ldr	r2, [pc, #136]	@ (8000fe4 <MX_TIM12_Init+0xb0>)
 8000f5c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000f5e:	4b20      	ldr	r3, [pc, #128]	@ (8000fe0 <MX_TIM12_Init+0xac>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe0 <MX_TIM12_Init+0xac>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe0 <MX_TIM12_Init+0xac>)
 8000f6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f70:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f72:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <MX_TIM12_Init+0xac>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f78:	4b19      	ldr	r3, [pc, #100]	@ (8000fe0 <MX_TIM12_Init+0xac>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 8000f7e:	4818      	ldr	r0, [pc, #96]	@ (8000fe0 <MX_TIM12_Init+0xac>)
 8000f80:	f006 fd3b 	bl	80079fa <HAL_TIM_OC_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8000f8a:	f000 fab9 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4810      	ldr	r0, [pc, #64]	@ (8000fe0 <MX_TIM12_Init+0xac>)
 8000f9e:	f007 fbaf 	bl	8008700 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8000fa8:	f000 faaa 	bl	8001500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000fac:	2300      	movs	r3, #0
 8000fae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4807      	ldr	r0, [pc, #28]	@ (8000fe0 <MX_TIM12_Init+0xac>)
 8000fc4:	f006 fe16 	bl	8007bf4 <HAL_TIM_OC_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 8000fce:	f000 fa97 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000fd2:	4803      	ldr	r0, [pc, #12]	@ (8000fe0 <MX_TIM12_Init+0xac>)
 8000fd4:	f000 fe4e 	bl	8001c74 <HAL_TIM_MspPostInit>

}
 8000fd8:	bf00      	nop
 8000fda:	3728      	adds	r7, #40	@ 0x28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	240004a4 	.word	0x240004a4
 8000fe4:	40001800 	.word	0x40001800

08000fe8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
 8000ffc:	615a      	str	r2, [r3, #20]
 8000ffe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001000:	4b1e      	ldr	r3, [pc, #120]	@ (800107c <MX_TIM13_Init+0x94>)
 8001002:	4a1f      	ldr	r2, [pc, #124]	@ (8001080 <MX_TIM13_Init+0x98>)
 8001004:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8001006:	4b1d      	ldr	r3, [pc, #116]	@ (800107c <MX_TIM13_Init+0x94>)
 8001008:	2200      	movs	r2, #0
 800100a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100c:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <MX_TIM13_Init+0x94>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001012:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <MX_TIM13_Init+0x94>)
 8001014:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001018:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101a:	4b18      	ldr	r3, [pc, #96]	@ (800107c <MX_TIM13_Init+0x94>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001020:	4b16      	ldr	r3, [pc, #88]	@ (800107c <MX_TIM13_Init+0x94>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001026:	4815      	ldr	r0, [pc, #84]	@ (800107c <MX_TIM13_Init+0x94>)
 8001028:	f006 fc90 	bl	800794c <HAL_TIM_Base_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001032:	f000 fa65 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 8001036:	4811      	ldr	r0, [pc, #68]	@ (800107c <MX_TIM13_Init+0x94>)
 8001038:	f006 fcdf 	bl	80079fa <HAL_TIM_OC_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001042:	f000 fa5d 	bl	8001500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2200      	movs	r2, #0
 800105a:	4619      	mov	r1, r3
 800105c:	4807      	ldr	r0, [pc, #28]	@ (800107c <MX_TIM13_Init+0x94>)
 800105e:	f006 fdc9 	bl	8007bf4 <HAL_TIM_OC_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001068:	f000 fa4a 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800106c:	4803      	ldr	r0, [pc, #12]	@ (800107c <MX_TIM13_Init+0x94>)
 800106e:	f000 fe01 	bl	8001c74 <HAL_TIM_MspPostInit>

}
 8001072:	bf00      	nop
 8001074:	3720      	adds	r7, #32
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	240004f0 	.word	0x240004f0
 8001080:	40001c00 	.word	0x40001c00

08001084 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
 8001098:	615a      	str	r2, [r3, #20]
 800109a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800109c:	4b1e      	ldr	r3, [pc, #120]	@ (8001118 <MX_TIM14_Init+0x94>)
 800109e:	4a1f      	ldr	r2, [pc, #124]	@ (800111c <MX_TIM14_Init+0x98>)
 80010a0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80010a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <MX_TIM14_Init+0x94>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001118 <MX_TIM14_Init+0x94>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <MX_TIM14_Init+0x94>)
 80010b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010b4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b6:	4b18      	ldr	r3, [pc, #96]	@ (8001118 <MX_TIM14_Init+0x94>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010bc:	4b16      	ldr	r3, [pc, #88]	@ (8001118 <MX_TIM14_Init+0x94>)
 80010be:	2200      	movs	r2, #0
 80010c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80010c2:	4815      	ldr	r0, [pc, #84]	@ (8001118 <MX_TIM14_Init+0x94>)
 80010c4:	f006 fc42 	bl	800794c <HAL_TIM_Base_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80010ce:	f000 fa17 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 80010d2:	4811      	ldr	r0, [pc, #68]	@ (8001118 <MX_TIM14_Init+0x94>)
 80010d4:	f006 fc91 	bl	80079fa <HAL_TIM_OC_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80010de:	f000 fa0f 	bl	8001500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2200      	movs	r2, #0
 80010f6:	4619      	mov	r1, r3
 80010f8:	4807      	ldr	r0, [pc, #28]	@ (8001118 <MX_TIM14_Init+0x94>)
 80010fa:	f006 fd7b 	bl	8007bf4 <HAL_TIM_OC_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001104:	f000 f9fc 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001108:	4803      	ldr	r0, [pc, #12]	@ (8001118 <MX_TIM14_Init+0x94>)
 800110a:	f000 fdb3 	bl	8001c74 <HAL_TIM_MspPostInit>

}
 800110e:	bf00      	nop
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2400053c 	.word	0x2400053c
 800111c:	40002000 	.word	0x40002000

08001120 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001124:	4b22      	ldr	r3, [pc, #136]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 8001126:	4a23      	ldr	r2, [pc, #140]	@ (80011b4 <MX_USART2_UART_Init+0x94>)
 8001128:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800112a:	4b21      	ldr	r3, [pc, #132]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 800112c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001130:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001132:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001138:	4b1d      	ldr	r3, [pc, #116]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800113e:	4b1c      	ldr	r3, [pc, #112]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001144:	4b1a      	ldr	r3, [pc, #104]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 8001146:	220c      	movs	r2, #12
 8001148:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114a:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001150:	4b17      	ldr	r3, [pc, #92]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001156:	4b16      	ldr	r3, [pc, #88]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800115c:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001162:	4b13      	ldr	r3, [pc, #76]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 8001164:	2200      	movs	r2, #0
 8001166:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001168:	4811      	ldr	r0, [pc, #68]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 800116a:	f007 fbd5 	bl	8008918 <HAL_UART_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001174:	f000 f9c4 	bl	8001500 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001178:	2100      	movs	r1, #0
 800117a:	480d      	ldr	r0, [pc, #52]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 800117c:	f008 fbdd 	bl	800993a <HAL_UARTEx_SetTxFifoThreshold>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001186:	f000 f9bb 	bl	8001500 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800118a:	2100      	movs	r1, #0
 800118c:	4808      	ldr	r0, [pc, #32]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 800118e:	f008 fc12 	bl	80099b6 <HAL_UARTEx_SetRxFifoThreshold>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001198:	f000 f9b2 	bl	8001500 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800119c:	4804      	ldr	r0, [pc, #16]	@ (80011b0 <MX_USART2_UART_Init+0x90>)
 800119e:	f008 fb93 	bl	80098c8 <HAL_UARTEx_DisableFifoMode>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80011a8:	f000 f9aa 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	24000588 	.word	0x24000588
 80011b4:	40004400 	.word	0x40004400

080011b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011bc:	4b22      	ldr	r3, [pc, #136]	@ (8001248 <MX_USART3_UART_Init+0x90>)
 80011be:	4a23      	ldr	r2, [pc, #140]	@ (800124c <MX_USART3_UART_Init+0x94>)
 80011c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011c2:	4b21      	ldr	r3, [pc, #132]	@ (8001248 <MX_USART3_UART_Init+0x90>)
 80011c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001248 <MX_USART3_UART_Init+0x90>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001248 <MX_USART3_UART_Init+0x90>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001248 <MX_USART3_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001248 <MX_USART3_UART_Init+0x90>)
 80011de:	220c      	movs	r2, #12
 80011e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <MX_USART3_UART_Init+0x90>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e8:	4b17      	ldr	r3, [pc, #92]	@ (8001248 <MX_USART3_UART_Init+0x90>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ee:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <MX_USART3_UART_Init+0x90>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011f4:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <MX_USART3_UART_Init+0x90>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011fa:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <MX_USART3_UART_Init+0x90>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001200:	4811      	ldr	r0, [pc, #68]	@ (8001248 <MX_USART3_UART_Init+0x90>)
 8001202:	f007 fb89 	bl	8008918 <HAL_UART_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800120c:	f000 f978 	bl	8001500 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001210:	2100      	movs	r1, #0
 8001212:	480d      	ldr	r0, [pc, #52]	@ (8001248 <MX_USART3_UART_Init+0x90>)
 8001214:	f008 fb91 	bl	800993a <HAL_UARTEx_SetTxFifoThreshold>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800121e:	f000 f96f 	bl	8001500 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001222:	2100      	movs	r1, #0
 8001224:	4808      	ldr	r0, [pc, #32]	@ (8001248 <MX_USART3_UART_Init+0x90>)
 8001226:	f008 fbc6 	bl	80099b6 <HAL_UARTEx_SetRxFifoThreshold>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001230:	f000 f966 	bl	8001500 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001234:	4804      	ldr	r0, [pc, #16]	@ (8001248 <MX_USART3_UART_Init+0x90>)
 8001236:	f008 fb47 	bl	80098c8 <HAL_UARTEx_DisableFifoMode>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001240:	f000 f95e 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2400061c 	.word	0x2400061c
 800124c:	40004800 	.word	0x40004800

08001250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	@ 0x30
 8001254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001266:	4b8a      	ldr	r3, [pc, #552]	@ (8001490 <MX_GPIO_Init+0x240>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126c:	4a88      	ldr	r2, [pc, #544]	@ (8001490 <MX_GPIO_Init+0x240>)
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001276:	4b86      	ldr	r3, [pc, #536]	@ (8001490 <MX_GPIO_Init+0x240>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800127c:	f003 0310 	and.w	r3, r3, #16
 8001280:	61bb      	str	r3, [r7, #24]
 8001282:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001284:	4b82      	ldr	r3, [pc, #520]	@ (8001490 <MX_GPIO_Init+0x240>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800128a:	4a81      	ldr	r2, [pc, #516]	@ (8001490 <MX_GPIO_Init+0x240>)
 800128c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001290:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001294:	4b7e      	ldr	r3, [pc, #504]	@ (8001490 <MX_GPIO_Init+0x240>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800129a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4b7b      	ldr	r3, [pc, #492]	@ (8001490 <MX_GPIO_Init+0x240>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a8:	4a79      	ldr	r2, [pc, #484]	@ (8001490 <MX_GPIO_Init+0x240>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012b2:	4b77      	ldr	r3, [pc, #476]	@ (8001490 <MX_GPIO_Init+0x240>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b73      	ldr	r3, [pc, #460]	@ (8001490 <MX_GPIO_Init+0x240>)
 80012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c6:	4a72      	ldr	r2, [pc, #456]	@ (8001490 <MX_GPIO_Init+0x240>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012d0:	4b6f      	ldr	r3, [pc, #444]	@ (8001490 <MX_GPIO_Init+0x240>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012de:	4b6c      	ldr	r3, [pc, #432]	@ (8001490 <MX_GPIO_Init+0x240>)
 80012e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e4:	4a6a      	ldr	r2, [pc, #424]	@ (8001490 <MX_GPIO_Init+0x240>)
 80012e6:	f043 0308 	orr.w	r3, r3, #8
 80012ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ee:	4b68      	ldr	r3, [pc, #416]	@ (8001490 <MX_GPIO_Init+0x240>)
 80012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f4:	f003 0308 	and.w	r3, r3, #8
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fc:	4b64      	ldr	r3, [pc, #400]	@ (8001490 <MX_GPIO_Init+0x240>)
 80012fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001302:	4a63      	ldr	r2, [pc, #396]	@ (8001490 <MX_GPIO_Init+0x240>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800130c:	4b60      	ldr	r3, [pc, #384]	@ (8001490 <MX_GPIO_Init+0x240>)
 800130e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S4_Enable_GPIO_Port, S4_Enable_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2110      	movs	r1, #16
 800131e:	485d      	ldr	r0, [pc, #372]	@ (8001494 <MX_GPIO_Init+0x244>)
 8001320:	f001 fb30 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, S4_EnableE14_Pin|S4_Direction_Pin|EEPROM_WP_Pin, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	f24c 0101 	movw	r1, #49153	@ 0xc001
 800132a:	485b      	ldr	r0, [pc, #364]	@ (8001498 <MX_GPIO_Init+0x248>)
 800132c:	f001 fb2a 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LogicShifter_OE_GPIO_Port, LogicShifter_OE_Pin, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001336:	4859      	ldr	r0, [pc, #356]	@ (800149c <MX_GPIO_Init+0x24c>)
 8001338:	f001 fb24 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, S3_Enable_Pin|S3_Direction_Pin|S2_Enable_Pin|S1_Direction_Pin
 800133c:	2200      	movs	r2, #0
 800133e:	f248 3106 	movw	r1, #33542	@ 0x8306
 8001342:	4857      	ldr	r0, [pc, #348]	@ (80014a0 <MX_GPIO_Init+0x250>)
 8001344:	f001 fb1e 	bl	8002984 <HAL_GPIO_WritePin>
                          |S1_Enable_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S2_Direction_GPIO_Port, S2_Direction_Pin, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	2180      	movs	r1, #128	@ 0x80
 800134c:	4855      	ldr	r0, [pc, #340]	@ (80014a4 <MX_GPIO_Init+0x254>)
 800134e:	f001 fb19 	bl	8002984 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CONFIG_S1_Pin CONFIG_S2_Pin CONFIG_S3_Pin CONFIG_S4_Pin
                           CONFIG_S5_Pin */
  GPIO_InitStruct.Pin = CONFIG_S1_Pin|CONFIG_S2_Pin|CONFIG_S3_Pin|CONFIG_S4_Pin
 8001352:	237c      	movs	r3, #124	@ 0x7c
 8001354:	61fb      	str	r3, [r7, #28]
                          |CONFIG_S5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	4619      	mov	r1, r3
 8001364:	484c      	ldr	r0, [pc, #304]	@ (8001498 <MX_GPIO_Init+0x248>)
 8001366:	f001 f95d 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : S4_Enable_Pin */
  GPIO_InitStruct.Pin = S4_Enable_Pin;
 800136a:	2310      	movs	r3, #16
 800136c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(S4_Enable_GPIO_Port, &GPIO_InitStruct);
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	4619      	mov	r1, r3
 8001380:	4844      	ldr	r0, [pc, #272]	@ (8001494 <MX_GPIO_Init+0x244>)
 8001382:	f001 f94f 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : S4_Ready_Pin S2_Ready_Pin S2_Treach_Pin */
  GPIO_InitStruct.Pin = S4_Ready_Pin|S2_Ready_Pin|S2_Treach_Pin;
 8001386:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800138c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4619      	mov	r1, r3
 800139c:	483d      	ldr	r0, [pc, #244]	@ (8001494 <MX_GPIO_Init+0x244>)
 800139e:	f001 f941 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN2_Pin BTN1_Pin S4_EncZ_Pin S4_Treach_Pin
                           S3_Ready_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN1_Pin|S4_EncZ_Pin|S4_Treach_Pin
 80013a2:	f64a 0306 	movw	r3, #43014	@ 0xa806
 80013a6:	61fb      	str	r3, [r7, #28]
                          |S3_Ready_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	4619      	mov	r1, r3
 80013b8:	4838      	ldr	r0, [pc, #224]	@ (800149c <MX_GPIO_Init+0x24c>)
 80013ba:	f001 f933 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : S4_ReadyE7_Pin */
  GPIO_InitStruct.Pin = S4_ReadyE7_Pin;
 80013be:	2380      	movs	r3, #128	@ 0x80
 80013c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(S4_ReadyE7_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	4831      	ldr	r0, [pc, #196]	@ (8001498 <MX_GPIO_Init+0x248>)
 80013d4:	f001 f926 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : S4_EnableE14_Pin S4_Direction_Pin EEPROM_WP_Pin */
  GPIO_InitStruct.Pin = S4_EnableE14_Pin|S4_Direction_Pin|EEPROM_WP_Pin;
 80013d8:	f24c 0301 	movw	r3, #49153	@ 0xc001
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	4829      	ldr	r0, [pc, #164]	@ (8001498 <MX_GPIO_Init+0x248>)
 80013f2:	f001 f917 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : LogicShifter_OE_Pin */
  GPIO_InitStruct.Pin = LogicShifter_OE_Pin;
 80013f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LogicShifter_OE_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	4619      	mov	r1, r3
 800140e:	4823      	ldr	r0, [pc, #140]	@ (800149c <MX_GPIO_Init+0x24c>)
 8001410:	f001 f908 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : S3_Enable_Pin S3_Direction_Pin S2_Enable_Pin S1_Direction_Pin
                           S1_Enable_Pin */
  GPIO_InitStruct.Pin = S3_Enable_Pin|S3_Direction_Pin|S2_Enable_Pin|S1_Direction_Pin
 8001414:	f248 3306 	movw	r3, #33542	@ 0x8306
 8001418:	61fb      	str	r3, [r7, #28]
                          |S1_Enable_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	4619      	mov	r1, r3
 800142c:	481c      	ldr	r0, [pc, #112]	@ (80014a0 <MX_GPIO_Init+0x250>)
 800142e:	f001 f8f9 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pins : S3_Treach_Pin S3_EncZ_Pin S1_EncZ_Pin S1_Treach_Pin
                           S1_Ready_Pin */
  GPIO_InitStruct.Pin = S3_Treach_Pin|S3_EncZ_Pin|S1_EncZ_Pin|S1_Treach_Pin
 8001432:	f244 4319 	movw	r3, #17433	@ 0x4419
 8001436:	61fb      	str	r3, [r7, #28]
                          |S1_Ready_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001438:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800143c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	4619      	mov	r1, r3
 8001448:	4815      	ldr	r0, [pc, #84]	@ (80014a0 <MX_GPIO_Init+0x250>)
 800144a:	f001 f8eb 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : S2_Direction_Pin */
  GPIO_InitStruct.Pin = S2_Direction_Pin;
 800144e:	2380      	movs	r3, #128	@ 0x80
 8001450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001452:	2301      	movs	r3, #1
 8001454:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(S2_Direction_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	4619      	mov	r1, r3
 8001464:	480f      	ldr	r0, [pc, #60]	@ (80014a4 <MX_GPIO_Init+0x254>)
 8001466:	f001 f8dd 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : S2_EncZ_Pin */
  GPIO_InitStruct.Pin = S2_EncZ_Pin;
 800146a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800146e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001470:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(S2_EncZ_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	4619      	mov	r1, r3
 8001480:	4808      	ldr	r0, [pc, #32]	@ (80014a4 <MX_GPIO_Init+0x254>)
 8001482:	f001 f8cf 	bl	8002624 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001486:	bf00      	nop
 8001488:	3730      	adds	r7, #48	@ 0x30
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	58024400 	.word	0x58024400
 8001494:	58020000 	.word	0x58020000
 8001498:	58021000 	.word	0x58021000
 800149c:	58020400 	.word	0x58020400
 80014a0:	58020c00 	.word	0x58020c00
 80014a4:	58020800 	.word	0x58020800

080014a8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80014ae:	463b      	mov	r3, r7
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80014ba:	f001 f83b 	bl	8002534 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80014be:	2301      	movs	r3, #1
 80014c0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80014ca:	231f      	movs	r3, #31
 80014cc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80014ce:	2387      	movs	r3, #135	@ 0x87
 80014d0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80014d6:	2300      	movs	r3, #0
 80014d8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80014da:	2301      	movs	r3, #1
 80014dc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80014de:	2301      	movs	r3, #1
 80014e0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80014ea:	463b      	mov	r3, r7
 80014ec:	4618      	mov	r0, r3
 80014ee:	f001 f859 	bl	80025a4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80014f2:	2004      	movs	r0, #4
 80014f4:	f001 f836 	bl	8002564 <HAL_MPU_Enable>

}
 80014f8:	bf00      	nop
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <Error_Handler+0x8>

0800150c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <HAL_MspInit+0x30>)
 8001514:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001518:	4a08      	ldr	r2, [pc, #32]	@ (800153c <HAL_MspInit+0x30>)
 800151a:	f043 0302 	orr.w	r3, r3, #2
 800151e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_MspInit+0x30>)
 8001524:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	58024400 	.word	0x58024400

08001540 <HAL_HRTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhrtim: HRTIM handle pointer
  * @retval None
  */
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b0b4      	sub	sp, #208	@ 0xd0
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	22c0      	movs	r2, #192	@ 0xc0
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f00c faeb 	bl	800db2c <memset>
  if(hhrtim->Instance==HRTIM1)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a14      	ldr	r2, [pc, #80]	@ (80015ac <HAL_HRTIM_MspInit+0x6c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d121      	bne.n	80015a4 <HAL_HRTIM_MspInit+0x64>

    /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8001560:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	4618      	mov	r0, r3
 8001578:	f004 fbbc 	bl	8005cf4 <HAL_RCCEx_PeriphCLKConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8001582:	f7ff ffbd 	bl	8001500 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8001586:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <HAL_HRTIM_MspInit+0x70>)
 8001588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800158c:	4a08      	ldr	r2, [pc, #32]	@ (80015b0 <HAL_HRTIM_MspInit+0x70>)
 800158e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001592:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <HAL_HRTIM_MspInit+0x70>)
 8001598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800159c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END HRTIM1_MspInit 1 */

  }

}
 80015a4:	bf00      	nop
 80015a6:	37d0      	adds	r7, #208	@ 0xd0
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40017400 	.word	0x40017400
 80015b0:	58024400 	.word	0x58024400

080015b4 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	@ 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a23      	ldr	r2, [pc, #140]	@ (8001660 <HAL_HRTIM_MspPostInit+0xac>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d13f      	bne.n	8001656 <HAL_HRTIM_MspPostInit+0xa2>
  {
    /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

    /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d6:	4b23      	ldr	r3, [pc, #140]	@ (8001664 <HAL_HRTIM_MspPostInit+0xb0>)
 80015d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015dc:	4a21      	ldr	r2, [pc, #132]	@ (8001664 <HAL_HRTIM_MspPostInit+0xb0>)
 80015de:	f043 0304 	orr.w	r3, r3, #4
 80015e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001664 <HAL_HRTIM_MspPostInit+0xb0>)
 80015e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <HAL_HRTIM_MspPostInit+0xb0>)
 80015f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015fa:	4a1a      	ldr	r2, [pc, #104]	@ (8001664 <HAL_HRTIM_MspPostInit+0xb0>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001604:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <HAL_HRTIM_MspPostInit+0xb0>)
 8001606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PC6     ------> HRTIM_CHA1
    PC8     ------> HRTIM_CHB1
    PA10     ------> HRTIM_CHC2
    */
    GPIO_InitStruct.Pin = S3_PulseHR_Pin|S2_PulseHR_Pin;
 8001612:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8001624:	2301      	movs	r3, #1
 8001626:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	480e      	ldr	r0, [pc, #56]	@ (8001668 <HAL_HRTIM_MspPostInit+0xb4>)
 8001630:	f000 fff8 	bl	8002624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S1_PulseHR_Pin;
 8001634:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001642:	2303      	movs	r3, #3
 8001644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8001646:	2302      	movs	r3, #2
 8001648:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(S1_PulseHR_GPIO_Port, &GPIO_InitStruct);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	4806      	ldr	r0, [pc, #24]	@ (800166c <HAL_HRTIM_MspPostInit+0xb8>)
 8001652:	f000 ffe7 	bl	8002624 <HAL_GPIO_Init>
    /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

    /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001656:	bf00      	nop
 8001658:	3728      	adds	r7, #40	@ 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40017400 	.word	0x40017400
 8001664:	58024400 	.word	0x58024400
 8001668:	58020800 	.word	0x58020800
 800166c:	58020000 	.word	0x58020000

08001670 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b0bc      	sub	sp, #240	@ 0xf0
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001688:	f107 0318 	add.w	r3, r7, #24
 800168c:	22c0      	movs	r2, #192	@ 0xc0
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f00c fa4b 	bl	800db2c <memset>
  if(hi2c->Instance==I2C1)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a4d      	ldr	r2, [pc, #308]	@ (80017d0 <HAL_I2C_MspInit+0x160>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d147      	bne.n	8001730 <HAL_I2C_MspInit+0xc0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016a0:	f04f 0208 	mov.w	r2, #8
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016b2:	f107 0318 	add.w	r3, r7, #24
 80016b6:	4618      	mov	r0, r3
 80016b8:	f004 fb1c 	bl	8005cf4 <HAL_RCCEx_PeriphCLKConfig>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80016c2:	f7ff ff1d 	bl	8001500 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	4b43      	ldr	r3, [pc, #268]	@ (80017d4 <HAL_I2C_MspInit+0x164>)
 80016c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016cc:	4a41      	ldr	r2, [pc, #260]	@ (80017d4 <HAL_I2C_MspInit+0x164>)
 80016ce:	f043 0302 	orr.w	r3, r3, #2
 80016d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016d6:	4b3f      	ldr	r3, [pc, #252]	@ (80017d4 <HAL_I2C_MspInit+0x164>)
 80016d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ec:	2312      	movs	r3, #18
 80016ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016fe:	2304      	movs	r3, #4
 8001700:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001704:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001708:	4619      	mov	r1, r3
 800170a:	4833      	ldr	r0, [pc, #204]	@ (80017d8 <HAL_I2C_MspInit+0x168>)
 800170c:	f000 ff8a 	bl	8002624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001710:	4b30      	ldr	r3, [pc, #192]	@ (80017d4 <HAL_I2C_MspInit+0x164>)
 8001712:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001716:	4a2f      	ldr	r2, [pc, #188]	@ (80017d4 <HAL_I2C_MspInit+0x164>)
 8001718:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800171c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001720:	4b2c      	ldr	r3, [pc, #176]	@ (80017d4 <HAL_I2C_MspInit+0x164>)
 8001722:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001726:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C4_MspInit 1 */

    /* USER CODE END I2C4_MspInit 1 */
  }

}
 800172e:	e04a      	b.n	80017c6 <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C4)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a29      	ldr	r2, [pc, #164]	@ (80017dc <HAL_I2C_MspInit+0x16c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d145      	bne.n	80017c6 <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800173a:	f04f 0210 	mov.w	r2, #16
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001746:	2300      	movs	r3, #0
 8001748:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800174c:	f107 0318 	add.w	r3, r7, #24
 8001750:	4618      	mov	r0, r3
 8001752:	f004 facf 	bl	8005cf4 <HAL_RCCEx_PeriphCLKConfig>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 800175c:	f7ff fed0 	bl	8001500 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001760:	4b1c      	ldr	r3, [pc, #112]	@ (80017d4 <HAL_I2C_MspInit+0x164>)
 8001762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001766:	4a1b      	ldr	r2, [pc, #108]	@ (80017d4 <HAL_I2C_MspInit+0x164>)
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001770:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <HAL_I2C_MspInit+0x164>)
 8001772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800177e:	23c0      	movs	r3, #192	@ 0xc0
 8001780:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001784:	2312      	movs	r3, #18
 8001786:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8001796:	2306      	movs	r3, #6
 8001798:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017a0:	4619      	mov	r1, r3
 80017a2:	480d      	ldr	r0, [pc, #52]	@ (80017d8 <HAL_I2C_MspInit+0x168>)
 80017a4:	f000 ff3e 	bl	8002624 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80017a8:	4b0a      	ldr	r3, [pc, #40]	@ (80017d4 <HAL_I2C_MspInit+0x164>)
 80017aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017ae:	4a09      	ldr	r2, [pc, #36]	@ (80017d4 <HAL_I2C_MspInit+0x164>)
 80017b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017b4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_I2C_MspInit+0x164>)
 80017ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
}
 80017c6:	bf00      	nop
 80017c8:	37f0      	adds	r7, #240	@ 0xf0
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40005400 	.word	0x40005400
 80017d4:	58024400 	.word	0x58024400
 80017d8:	58020400 	.word	0x58020400
 80017dc:	58001c00 	.word	0x58001c00

080017e0 <HAL_LPTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hlptim: LPTIM handle pointer
  * @retval None
  */
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b0bc      	sub	sp, #240	@ 0xf0
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017f8:	f107 0318 	add.w	r3, r7, #24
 80017fc:	22c0      	movs	r2, #192	@ 0xc0
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f00c f993 	bl	800db2c <memset>
  if(hlptim->Instance==LPTIM2)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a39      	ldr	r2, [pc, #228]	@ (80018f0 <HAL_LPTIM_MspInit+0x110>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d16b      	bne.n	80018e8 <HAL_LPTIM_MspInit+0x108>

    /* USER CODE END LPTIM2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8001810:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_D3PCLK1;
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001822:	f107 0318 	add.w	r3, r7, #24
 8001826:	4618      	mov	r0, r3
 8001828:	f004 fa64 	bl	8005cf4 <HAL_RCCEx_PeriphCLKConfig>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_LPTIM_MspInit+0x56>
    {
      Error_Handler();
 8001832:	f7ff fe65 	bl	8001500 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8001836:	4b2f      	ldr	r3, [pc, #188]	@ (80018f4 <HAL_LPTIM_MspInit+0x114>)
 8001838:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800183c:	4a2d      	ldr	r2, [pc, #180]	@ (80018f4 <HAL_LPTIM_MspInit+0x114>)
 800183e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001842:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001846:	4b2b      	ldr	r3, [pc, #172]	@ (80018f4 <HAL_LPTIM_MspInit+0x114>)
 8001848:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800184c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001854:	4b27      	ldr	r3, [pc, #156]	@ (80018f4 <HAL_LPTIM_MspInit+0x114>)
 8001856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800185a:	4a26      	ldr	r2, [pc, #152]	@ (80018f4 <HAL_LPTIM_MspInit+0x114>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001864:	4b23      	ldr	r3, [pc, #140]	@ (80018f4 <HAL_LPTIM_MspInit+0x114>)
 8001866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001872:	4b20      	ldr	r3, [pc, #128]	@ (80018f4 <HAL_LPTIM_MspInit+0x114>)
 8001874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001878:	4a1e      	ldr	r2, [pc, #120]	@ (80018f4 <HAL_LPTIM_MspInit+0x114>)
 800187a:	f043 0308 	orr.w	r3, r3, #8
 800187e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001882:	4b1c      	ldr	r3, [pc, #112]	@ (80018f4 <HAL_LPTIM_MspInit+0x114>)
 8001884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM2 GPIO Configuration
    PB10     ------> LPTIM2_IN1
    PD11     ------> LPTIM2_IN2
    */
    GPIO_InitStruct.Pin = Alt_EncA_Pin;
 8001890:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001894:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 80018aa:	2303      	movs	r3, #3
 80018ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(Alt_EncA_GPIO_Port, &GPIO_InitStruct);
 80018b0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018b4:	4619      	mov	r1, r3
 80018b6:	4810      	ldr	r0, [pc, #64]	@ (80018f8 <HAL_LPTIM_MspInit+0x118>)
 80018b8:	f000 feb4 	bl	8002624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Alt_EncB_Pin;
 80018bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 80018d6:	2303      	movs	r3, #3
 80018d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(Alt_EncB_GPIO_Port, &GPIO_InitStruct);
 80018dc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018e0:	4619      	mov	r1, r3
 80018e2:	4806      	ldr	r0, [pc, #24]	@ (80018fc <HAL_LPTIM_MspInit+0x11c>)
 80018e4:	f000 fe9e 	bl	8002624 <HAL_GPIO_Init>

    /* USER CODE END LPTIM2_MspInit 1 */

  }

}
 80018e8:	bf00      	nop
 80018ea:	37f0      	adds	r7, #240	@ 0xf0
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	58002400 	.word	0x58002400
 80018f4:	58024400 	.word	0x58024400
 80018f8:	58020400 	.word	0x58020400
 80018fc:	58020c00 	.word	0x58020c00

08001900 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b092      	sub	sp, #72	@ 0x48
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a93      	ldr	r2, [pc, #588]	@ (8001b6c <HAL_TIM_Encoder_MspInit+0x26c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d12f      	bne.n	8001982 <HAL_TIM_Encoder_MspInit+0x82>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001922:	4b93      	ldr	r3, [pc, #588]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001924:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001928:	4a91      	ldr	r2, [pc, #580]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001932:	4b8f      	ldr	r3, [pc, #572]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	633b      	str	r3, [r7, #48]	@ 0x30
 800193e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001940:	4b8b      	ldr	r3, [pc, #556]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001946:	4a8a      	ldr	r2, [pc, #552]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001948:	f043 0310 	orr.w	r3, r3, #16
 800194c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001950:	4b87      	ldr	r3, [pc, #540]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001956:	f003 0310 	and.w	r3, r3, #16
 800195a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800195c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = S4_EncA_Pin|S4_EncB_Pin;
 800195e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001962:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001970:	2301      	movs	r3, #1
 8001972:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001974:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001978:	4619      	mov	r1, r3
 800197a:	487e      	ldr	r0, [pc, #504]	@ (8001b74 <HAL_TIM_Encoder_MspInit+0x274>)
 800197c:	f000 fe52 	bl	8002624 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001980:	e0ef      	b.n	8001b62 <HAL_TIM_Encoder_MspInit+0x262>
  else if(htim_encoder->Instance==TIM2)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800198a:	d14e      	bne.n	8001a2a <HAL_TIM_Encoder_MspInit+0x12a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800198c:	4b78      	ldr	r3, [pc, #480]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 800198e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001992:	4a77      	ldr	r2, [pc, #476]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800199c:	4b74      	ldr	r3, [pc, #464]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 800199e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	4b71      	ldr	r3, [pc, #452]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 80019ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019b0:	4a6f      	ldr	r2, [pc, #444]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019ba:	4b6d      	ldr	r3, [pc, #436]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 80019bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c8:	4b69      	ldr	r3, [pc, #420]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 80019ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ce:	4a68      	ldr	r2, [pc, #416]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 80019d0:	f043 0302 	orr.w	r3, r3, #2
 80019d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019d8:	4b65      	ldr	r3, [pc, #404]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 80019da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	623b      	str	r3, [r7, #32]
 80019e4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = S2_EncA_Pin;
 80019e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019ea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ec:	2302      	movs	r3, #2
 80019ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f4:	2300      	movs	r3, #0
 80019f6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019f8:	2301      	movs	r3, #1
 80019fa:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(S2_EncA_GPIO_Port, &GPIO_InitStruct);
 80019fc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a00:	4619      	mov	r1, r3
 8001a02:	485d      	ldr	r0, [pc, #372]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x278>)
 8001a04:	f000 fe0e 	bl	8002624 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S2_EncB_Pin;
 8001a08:	2308      	movs	r3, #8
 8001a0a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(S2_EncB_GPIO_Port, &GPIO_InitStruct);
 8001a1c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a20:	4619      	mov	r1, r3
 8001a22:	4856      	ldr	r0, [pc, #344]	@ (8001b7c <HAL_TIM_Encoder_MspInit+0x27c>)
 8001a24:	f000 fdfe 	bl	8002624 <HAL_GPIO_Init>
}
 8001a28:	e09b      	b.n	8001b62 <HAL_TIM_Encoder_MspInit+0x262>
  else if(htim_encoder->Instance==TIM3)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a54      	ldr	r2, [pc, #336]	@ (8001b80 <HAL_TIM_Encoder_MspInit+0x280>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d12e      	bne.n	8001a92 <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a34:	4b4e      	ldr	r3, [pc, #312]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a3a:	4a4d      	ldr	r2, [pc, #308]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a44:	4b4a      	ldr	r3, [pc, #296]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	61fb      	str	r3, [r7, #28]
 8001a50:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	4b47      	ldr	r3, [pc, #284]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a58:	4a45      	ldr	r2, [pc, #276]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a5a:	f043 0302 	orr.w	r3, r3, #2
 8001a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a62:	4b43      	ldr	r3, [pc, #268]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = S1_EncA_Pin|S1_EncB_Pin;
 8001a70:	2330      	movs	r3, #48	@ 0x30
 8001a72:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a80:	2302      	movs	r3, #2
 8001a82:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a84:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a88:	4619      	mov	r1, r3
 8001a8a:	483c      	ldr	r0, [pc, #240]	@ (8001b7c <HAL_TIM_Encoder_MspInit+0x27c>)
 8001a8c:	f000 fdca 	bl	8002624 <HAL_GPIO_Init>
}
 8001a90:	e067      	b.n	8001b62 <HAL_TIM_Encoder_MspInit+0x262>
  else if(htim_encoder->Instance==TIM4)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a3b      	ldr	r2, [pc, #236]	@ (8001b84 <HAL_TIM_Encoder_MspInit+0x284>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d12f      	bne.n	8001afc <HAL_TIM_Encoder_MspInit+0x1fc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a9c:	4b34      	ldr	r3, [pc, #208]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001aa2:	4a33      	ldr	r2, [pc, #204]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001aac:	4b30      	ldr	r3, [pc, #192]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001aae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aba:	4b2d      	ldr	r3, [pc, #180]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac0:	4a2b      	ldr	r2, [pc, #172]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001ac2:	f043 0308 	orr.w	r3, r3, #8
 8001ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aca:	4b29      	ldr	r3, [pc, #164]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = S3_EncA_Pin|S3_EncB_Pin;
 8001ad8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001adc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001aea:	2302      	movs	r3, #2
 8001aec:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001af2:	4619      	mov	r1, r3
 8001af4:	4824      	ldr	r0, [pc, #144]	@ (8001b88 <HAL_TIM_Encoder_MspInit+0x288>)
 8001af6:	f000 fd95 	bl	8002624 <HAL_GPIO_Init>
}
 8001afa:	e032      	b.n	8001b62 <HAL_TIM_Encoder_MspInit+0x262>
  else if(htim_encoder->Instance==TIM5)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a22      	ldr	r2, [pc, #136]	@ (8001b8c <HAL_TIM_Encoder_MspInit+0x28c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d12d      	bne.n	8001b62 <HAL_TIM_Encoder_MspInit+0x262>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b06:	4b1a      	ldr	r3, [pc, #104]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b0c:	4a18      	ldr	r2, [pc, #96]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001b0e:	f043 0308 	orr.w	r3, r3, #8
 8001b12:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b16:	4b16      	ldr	r3, [pc, #88]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001b18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b1c:	f003 0308 	and.w	r3, r3, #8
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b24:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b2a:	4a11      	ldr	r2, [pc, #68]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b34:	4b0e      	ldr	r3, [pc, #56]	@ (8001b70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = UI_EncA_Pin|UI_EncB_Pin;
 8001b42:	2303      	movs	r3, #3
 8001b44:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b52:	2302      	movs	r3, #2
 8001b54:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4806      	ldr	r0, [pc, #24]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x278>)
 8001b5e:	f000 fd61 	bl	8002624 <HAL_GPIO_Init>
}
 8001b62:	bf00      	nop
 8001b64:	3748      	adds	r7, #72	@ 0x48
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40010000 	.word	0x40010000
 8001b70:	58024400 	.word	0x58024400
 8001b74:	58021000 	.word	0x58021000
 8001b78:	58020000 	.word	0x58020000
 8001b7c:	58020400 	.word	0x58020400
 8001b80:	40000400 	.word	0x40000400
 8001b84:	40000800 	.word	0x40000800
 8001b88:	58020c00 	.word	0x58020c00
 8001b8c:	40000c00 	.word	0x40000c00

08001b90 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a20      	ldr	r2, [pc, #128]	@ (8001c20 <HAL_TIM_Base_MspInit+0x90>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d10f      	bne.n	8001bc2 <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ba2:	4b20      	ldr	r3, [pc, #128]	@ (8001c24 <HAL_TIM_Base_MspInit+0x94>)
 8001ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ba8:	4a1e      	ldr	r2, [pc, #120]	@ (8001c24 <HAL_TIM_Base_MspInit+0x94>)
 8001baa:	f043 0302 	orr.w	r3, r3, #2
 8001bae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c24 <HAL_TIM_Base_MspInit+0x94>)
 8001bb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001bc0:	e028      	b.n	8001c14 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM13)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a18      	ldr	r2, [pc, #96]	@ (8001c28 <HAL_TIM_Base_MspInit+0x98>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d10f      	bne.n	8001bec <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001bcc:	4b15      	ldr	r3, [pc, #84]	@ (8001c24 <HAL_TIM_Base_MspInit+0x94>)
 8001bce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bd2:	4a14      	ldr	r2, [pc, #80]	@ (8001c24 <HAL_TIM_Base_MspInit+0x94>)
 8001bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bd8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bdc:	4b11      	ldr	r3, [pc, #68]	@ (8001c24 <HAL_TIM_Base_MspInit+0x94>)
 8001bde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
}
 8001bea:	e013      	b.n	8001c14 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM14)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0e      	ldr	r2, [pc, #56]	@ (8001c2c <HAL_TIM_Base_MspInit+0x9c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d10e      	bne.n	8001c14 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <HAL_TIM_Base_MspInit+0x94>)
 8001bf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bfc:	4a09      	ldr	r2, [pc, #36]	@ (8001c24 <HAL_TIM_Base_MspInit+0x94>)
 8001bfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c02:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c06:	4b07      	ldr	r3, [pc, #28]	@ (8001c24 <HAL_TIM_Base_MspInit+0x94>)
 8001c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
}
 8001c14:	bf00      	nop
 8001c16:	371c      	adds	r7, #28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	40010400 	.word	0x40010400
 8001c24:	58024400 	.word	0x58024400
 8001c28:	40001c00 	.word	0x40001c00
 8001c2c:	40002000 	.word	0x40002000

08001c30 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM12)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c6c <HAL_TIM_OC_MspInit+0x3c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d10e      	bne.n	8001c60 <HAL_TIM_OC_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001c42:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <HAL_TIM_OC_MspInit+0x40>)
 8001c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c48:	4a09      	ldr	r2, [pc, #36]	@ (8001c70 <HAL_TIM_OC_MspInit+0x40>)
 8001c4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c4e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c52:	4b07      	ldr	r3, [pc, #28]	@ (8001c70 <HAL_TIM_OC_MspInit+0x40>)
 8001c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	40001800 	.word	0x40001800
 8001c70:	58024400 	.word	0x58024400

08001c74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08c      	sub	sp, #48	@ 0x30
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a4b      	ldr	r2, [pc, #300]	@ (8001dc0 <HAL_TIM_MspPostInit+0x14c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d120      	bne.n	8001cd8 <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c96:	4b4b      	ldr	r3, [pc, #300]	@ (8001dc4 <HAL_TIM_MspPostInit+0x150>)
 8001c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c9c:	4a49      	ldr	r2, [pc, #292]	@ (8001dc4 <HAL_TIM_MspPostInit+0x150>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ca6:	4b47      	ldr	r3, [pc, #284]	@ (8001dc4 <HAL_TIM_MspPostInit+0x150>)
 8001ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = S1_PulseGP_Pin;
 8001cb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(S1_PulseGP_GPIO_Port, &GPIO_InitStruct);
 8001cca:	f107 031c 	add.w	r3, r7, #28
 8001cce:	4619      	mov	r1, r3
 8001cd0:	483d      	ldr	r0, [pc, #244]	@ (8001dc8 <HAL_TIM_MspPostInit+0x154>)
 8001cd2:	f000 fca7 	bl	8002624 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001cd6:	e06e      	b.n	8001db6 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM12)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a3b      	ldr	r2, [pc, #236]	@ (8001dcc <HAL_TIM_MspPostInit+0x158>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d120      	bne.n	8001d24 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce2:	4b38      	ldr	r3, [pc, #224]	@ (8001dc4 <HAL_TIM_MspPostInit+0x150>)
 8001ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ce8:	4a36      	ldr	r2, [pc, #216]	@ (8001dc4 <HAL_TIM_MspPostInit+0x150>)
 8001cea:	f043 0302 	orr.w	r3, r3, #2
 8001cee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cf2:	4b34      	ldr	r3, [pc, #208]	@ (8001dc4 <HAL_TIM_MspPostInit+0x150>)
 8001cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = S2_PulseGP_Pin;
 8001d00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8001d12:	2302      	movs	r3, #2
 8001d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(S2_PulseGP_GPIO_Port, &GPIO_InitStruct);
 8001d16:	f107 031c 	add.w	r3, r7, #28
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	482c      	ldr	r0, [pc, #176]	@ (8001dd0 <HAL_TIM_MspPostInit+0x15c>)
 8001d1e:	f000 fc81 	bl	8002624 <HAL_GPIO_Init>
}
 8001d22:	e048      	b.n	8001db6 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM13)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a2a      	ldr	r2, [pc, #168]	@ (8001dd4 <HAL_TIM_MspPostInit+0x160>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d11f      	bne.n	8001d6e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2e:	4b25      	ldr	r3, [pc, #148]	@ (8001dc4 <HAL_TIM_MspPostInit+0x150>)
 8001d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d34:	4a23      	ldr	r2, [pc, #140]	@ (8001dc4 <HAL_TIM_MspPostInit+0x150>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d3e:	4b21      	ldr	r3, [pc, #132]	@ (8001dc4 <HAL_TIM_MspPostInit+0x150>)
 8001d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = S4_PulseGP_Pin;
 8001d4c:	2340      	movs	r3, #64	@ 0x40
 8001d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001d5c:	2309      	movs	r3, #9
 8001d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(S4_PulseGP_GPIO_Port, &GPIO_InitStruct);
 8001d60:	f107 031c 	add.w	r3, r7, #28
 8001d64:	4619      	mov	r1, r3
 8001d66:	481c      	ldr	r0, [pc, #112]	@ (8001dd8 <HAL_TIM_MspPostInit+0x164>)
 8001d68:	f000 fc5c 	bl	8002624 <HAL_GPIO_Init>
}
 8001d6c:	e023      	b.n	8001db6 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM14)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a1a      	ldr	r2, [pc, #104]	@ (8001ddc <HAL_TIM_MspPostInit+0x168>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d11e      	bne.n	8001db6 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d78:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <HAL_TIM_MspPostInit+0x150>)
 8001d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d7e:	4a11      	ldr	r2, [pc, #68]	@ (8001dc4 <HAL_TIM_MspPostInit+0x150>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d88:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc4 <HAL_TIM_MspPostInit+0x150>)
 8001d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S3_PulseGP_Pin;
 8001d96:	2380      	movs	r3, #128	@ 0x80
 8001d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001da6:	2309      	movs	r3, #9
 8001da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(S3_PulseGP_GPIO_Port, &GPIO_InitStruct);
 8001daa:	f107 031c 	add.w	r3, r7, #28
 8001dae:	4619      	mov	r1, r3
 8001db0:	4809      	ldr	r0, [pc, #36]	@ (8001dd8 <HAL_TIM_MspPostInit+0x164>)
 8001db2:	f000 fc37 	bl	8002624 <HAL_GPIO_Init>
}
 8001db6:	bf00      	nop
 8001db8:	3730      	adds	r7, #48	@ 0x30
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40010400 	.word	0x40010400
 8001dc4:	58024400 	.word	0x58024400
 8001dc8:	58020800 	.word	0x58020800
 8001dcc:	40001800 	.word	0x40001800
 8001dd0:	58020400 	.word	0x58020400
 8001dd4:	40001c00 	.word	0x40001c00
 8001dd8:	58020000 	.word	0x58020000
 8001ddc:	40002000 	.word	0x40002000

08001de0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b0bc      	sub	sp, #240	@ 0xf0
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001df8:	f107 0318 	add.w	r3, r7, #24
 8001dfc:	22c0      	movs	r2, #192	@ 0xc0
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f00b fe93 	bl	800db2c <memset>
  if(huart->Instance==USART2)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a4d      	ldr	r2, [pc, #308]	@ (8001f40 <HAL_UART_MspInit+0x160>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d146      	bne.n	8001e9e <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e10:	f04f 0202 	mov.w	r2, #2
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e22:	f107 0318 	add.w	r3, r7, #24
 8001e26:	4618      	mov	r0, r3
 8001e28:	f003 ff64 	bl	8005cf4 <HAL_RCCEx_PeriphCLKConfig>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001e32:	f7ff fb65 	bl	8001500 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e36:	4b43      	ldr	r3, [pc, #268]	@ (8001f44 <HAL_UART_MspInit+0x164>)
 8001e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e3c:	4a41      	ldr	r2, [pc, #260]	@ (8001f44 <HAL_UART_MspInit+0x164>)
 8001e3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e42:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e46:	4b3f      	ldr	r3, [pc, #252]	@ (8001f44 <HAL_UART_MspInit+0x164>)
 8001e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e54:	4b3b      	ldr	r3, [pc, #236]	@ (8001f44 <HAL_UART_MspInit+0x164>)
 8001e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e5a:	4a3a      	ldr	r2, [pc, #232]	@ (8001f44 <HAL_UART_MspInit+0x164>)
 8001e5c:	f043 0308 	orr.w	r3, r3, #8
 8001e60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e64:	4b37      	ldr	r3, [pc, #220]	@ (8001f44 <HAL_UART_MspInit+0x164>)
 8001e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_MCU_Pin|USART2_RX_MCU_Pin;
 8001e72:	2360      	movs	r3, #96	@ 0x60
 8001e74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e8a:	2307      	movs	r3, #7
 8001e8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e90:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001e94:	4619      	mov	r1, r3
 8001e96:	482c      	ldr	r0, [pc, #176]	@ (8001f48 <HAL_UART_MspInit+0x168>)
 8001e98:	f000 fbc4 	bl	8002624 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e9c:	e04b      	b.n	8001f36 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8001f4c <HAL_UART_MspInit+0x16c>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d146      	bne.n	8001f36 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ea8:	f04f 0202 	mov.w	r2, #2
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eba:	f107 0318 	add.w	r3, r7, #24
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 ff18 	bl	8005cf4 <HAL_RCCEx_PeriphCLKConfig>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_UART_MspInit+0xee>
      Error_Handler();
 8001eca:	f7ff fb19 	bl	8001500 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ece:	4b1d      	ldr	r3, [pc, #116]	@ (8001f44 <HAL_UART_MspInit+0x164>)
 8001ed0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f44 <HAL_UART_MspInit+0x164>)
 8001ed6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eda:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ede:	4b19      	ldr	r3, [pc, #100]	@ (8001f44 <HAL_UART_MspInit+0x164>)
 8001ee0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ee4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eec:	4b15      	ldr	r3, [pc, #84]	@ (8001f44 <HAL_UART_MspInit+0x164>)
 8001eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef2:	4a14      	ldr	r2, [pc, #80]	@ (8001f44 <HAL_UART_MspInit+0x164>)
 8001ef4:	f043 0304 	orr.w	r3, r3, #4
 8001ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001efc:	4b11      	ldr	r3, [pc, #68]	@ (8001f44 <HAL_UART_MspInit+0x164>)
 8001efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f0a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f24:	2307      	movs	r3, #7
 8001f26:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f2a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4807      	ldr	r0, [pc, #28]	@ (8001f50 <HAL_UART_MspInit+0x170>)
 8001f32:	f000 fb77 	bl	8002624 <HAL_GPIO_Init>
}
 8001f36:	bf00      	nop
 8001f38:	37f0      	adds	r7, #240	@ 0xf0
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40004400 	.word	0x40004400
 8001f44:	58024400 	.word	0x58024400
 8001f48:	58020c00 	.word	0x58020c00
 8001f4c:	40004800 	.word	0x40004800
 8001f50:	58020800 	.word	0x58020800

08001f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <NMI_Handler+0x4>

08001f5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <HardFault_Handler+0x4>

08001f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <MemManage_Handler+0x4>

08001f6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f70:	bf00      	nop
 8001f72:	e7fd      	b.n	8001f70 <BusFault_Handler+0x4>

08001f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <UsageFault_Handler+0x4>

08001f7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001faa:	f000 f963 	bl	8002274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001fb8:	4802      	ldr	r0, [pc, #8]	@ (8001fc4 <OTG_FS_IRQHandler+0x10>)
 8001fba:	f001 fd0c 	bl	80039d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	24001b94 	.word	0x24001b94

08001fc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fcc:	4b43      	ldr	r3, [pc, #268]	@ (80020dc <SystemInit+0x114>)
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd2:	4a42      	ldr	r2, [pc, #264]	@ (80020dc <SystemInit+0x114>)
 8001fd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001fdc:	4b40      	ldr	r3, [pc, #256]	@ (80020e0 <SystemInit+0x118>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	2b06      	cmp	r3, #6
 8001fe6:	d807      	bhi.n	8001ff8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001fe8:	4b3d      	ldr	r3, [pc, #244]	@ (80020e0 <SystemInit+0x118>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f023 030f 	bic.w	r3, r3, #15
 8001ff0:	4a3b      	ldr	r2, [pc, #236]	@ (80020e0 <SystemInit+0x118>)
 8001ff2:	f043 0307 	orr.w	r3, r3, #7
 8001ff6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ff8:	4b3a      	ldr	r3, [pc, #232]	@ (80020e4 <SystemInit+0x11c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a39      	ldr	r2, [pc, #228]	@ (80020e4 <SystemInit+0x11c>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002004:	4b37      	ldr	r3, [pc, #220]	@ (80020e4 <SystemInit+0x11c>)
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800200a:	4b36      	ldr	r3, [pc, #216]	@ (80020e4 <SystemInit+0x11c>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4935      	ldr	r1, [pc, #212]	@ (80020e4 <SystemInit+0x11c>)
 8002010:	4b35      	ldr	r3, [pc, #212]	@ (80020e8 <SystemInit+0x120>)
 8002012:	4013      	ands	r3, r2
 8002014:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002016:	4b32      	ldr	r3, [pc, #200]	@ (80020e0 <SystemInit+0x118>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d007      	beq.n	8002032 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002022:	4b2f      	ldr	r3, [pc, #188]	@ (80020e0 <SystemInit+0x118>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 030f 	bic.w	r3, r3, #15
 800202a:	4a2d      	ldr	r2, [pc, #180]	@ (80020e0 <SystemInit+0x118>)
 800202c:	f043 0307 	orr.w	r3, r3, #7
 8002030:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002032:	4b2c      	ldr	r3, [pc, #176]	@ (80020e4 <SystemInit+0x11c>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002038:	4b2a      	ldr	r3, [pc, #168]	@ (80020e4 <SystemInit+0x11c>)
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800203e:	4b29      	ldr	r3, [pc, #164]	@ (80020e4 <SystemInit+0x11c>)
 8002040:	2200      	movs	r2, #0
 8002042:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002044:	4b27      	ldr	r3, [pc, #156]	@ (80020e4 <SystemInit+0x11c>)
 8002046:	4a29      	ldr	r2, [pc, #164]	@ (80020ec <SystemInit+0x124>)
 8002048:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800204a:	4b26      	ldr	r3, [pc, #152]	@ (80020e4 <SystemInit+0x11c>)
 800204c:	4a28      	ldr	r2, [pc, #160]	@ (80020f0 <SystemInit+0x128>)
 800204e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002050:	4b24      	ldr	r3, [pc, #144]	@ (80020e4 <SystemInit+0x11c>)
 8002052:	4a28      	ldr	r2, [pc, #160]	@ (80020f4 <SystemInit+0x12c>)
 8002054:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002056:	4b23      	ldr	r3, [pc, #140]	@ (80020e4 <SystemInit+0x11c>)
 8002058:	2200      	movs	r2, #0
 800205a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800205c:	4b21      	ldr	r3, [pc, #132]	@ (80020e4 <SystemInit+0x11c>)
 800205e:	4a25      	ldr	r2, [pc, #148]	@ (80020f4 <SystemInit+0x12c>)
 8002060:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002062:	4b20      	ldr	r3, [pc, #128]	@ (80020e4 <SystemInit+0x11c>)
 8002064:	2200      	movs	r2, #0
 8002066:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002068:	4b1e      	ldr	r3, [pc, #120]	@ (80020e4 <SystemInit+0x11c>)
 800206a:	4a22      	ldr	r2, [pc, #136]	@ (80020f4 <SystemInit+0x12c>)
 800206c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800206e:	4b1d      	ldr	r3, [pc, #116]	@ (80020e4 <SystemInit+0x11c>)
 8002070:	2200      	movs	r2, #0
 8002072:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002074:	4b1b      	ldr	r3, [pc, #108]	@ (80020e4 <SystemInit+0x11c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a1a      	ldr	r2, [pc, #104]	@ (80020e4 <SystemInit+0x11c>)
 800207a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800207e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002080:	4b18      	ldr	r3, [pc, #96]	@ (80020e4 <SystemInit+0x11c>)
 8002082:	2200      	movs	r2, #0
 8002084:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002086:	4b1c      	ldr	r3, [pc, #112]	@ (80020f8 <SystemInit+0x130>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4b1c      	ldr	r3, [pc, #112]	@ (80020fc <SystemInit+0x134>)
 800208c:	4013      	ands	r3, r2
 800208e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002092:	d202      	bcs.n	800209a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002094:	4b1a      	ldr	r3, [pc, #104]	@ (8002100 <SystemInit+0x138>)
 8002096:	2201      	movs	r2, #1
 8002098:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800209a:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <SystemInit+0x11c>)
 800209c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d113      	bne.n	80020d0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80020a8:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <SystemInit+0x11c>)
 80020aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020ae:	4a0d      	ldr	r2, [pc, #52]	@ (80020e4 <SystemInit+0x11c>)
 80020b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020b4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80020b8:	4b12      	ldr	r3, [pc, #72]	@ (8002104 <SystemInit+0x13c>)
 80020ba:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80020be:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80020c0:	4b08      	ldr	r3, [pc, #32]	@ (80020e4 <SystemInit+0x11c>)
 80020c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020c6:	4a07      	ldr	r2, [pc, #28]	@ (80020e4 <SystemInit+0x11c>)
 80020c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020cc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000ed00 	.word	0xe000ed00
 80020e0:	52002000 	.word	0x52002000
 80020e4:	58024400 	.word	0x58024400
 80020e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80020ec:	02020200 	.word	0x02020200
 80020f0:	01ff0000 	.word	0x01ff0000
 80020f4:	01010280 	.word	0x01010280
 80020f8:	5c001000 	.word	0x5c001000
 80020fc:	ffff0000 	.word	0xffff0000
 8002100:	51008108 	.word	0x51008108
 8002104:	52004000 	.word	0x52004000

08002108 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800210c:	4b09      	ldr	r3, [pc, #36]	@ (8002134 <ExitRun0Mode+0x2c>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4a08      	ldr	r2, [pc, #32]	@ (8002134 <ExitRun0Mode+0x2c>)
 8002112:	f043 0302 	orr.w	r3, r3, #2
 8002116:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002118:	bf00      	nop
 800211a:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <ExitRun0Mode+0x2c>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f9      	beq.n	800211a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002126:	bf00      	nop
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	58024800 	.word	0x58024800

08002138 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002138:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002174 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800213c:	f7ff ffe4 	bl	8002108 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002140:	f7ff ff42 	bl	8001fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002144:	480c      	ldr	r0, [pc, #48]	@ (8002178 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002146:	490d      	ldr	r1, [pc, #52]	@ (800217c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002148:	4a0d      	ldr	r2, [pc, #52]	@ (8002180 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800214a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800214c:	e002      	b.n	8002154 <LoopCopyDataInit>

0800214e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800214e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002152:	3304      	adds	r3, #4

08002154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002158:	d3f9      	bcc.n	800214e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800215a:	4a0a      	ldr	r2, [pc, #40]	@ (8002184 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800215c:	4c0a      	ldr	r4, [pc, #40]	@ (8002188 <LoopFillZerobss+0x22>)
  movs r3, #0
 800215e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002160:	e001      	b.n	8002166 <LoopFillZerobss>

08002162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002164:	3204      	adds	r2, #4

08002166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002168:	d3fb      	bcc.n	8002162 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800216a:	f00b fce7 	bl	800db3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800216e:	f7fe fa49 	bl	8000604 <main>
  bx  lr
 8002172:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002174:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002178:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800217c:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 8002180:	0800dc2c 	.word	0x0800dc2c
  ldr r2, =_sbss
 8002184:	24000104 	.word	0x24000104
  ldr r4, =_ebss
 8002188:	24002298 	.word	0x24002298

0800218c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800218c:	e7fe      	b.n	800218c <ADC3_IRQHandler>
	...

08002190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002196:	2003      	movs	r0, #3
 8002198:	f000 f98c 	bl	80024b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800219c:	f003 fbd4 	bl	8005948 <HAL_RCC_GetSysClockFreq>
 80021a0:	4602      	mov	r2, r0
 80021a2:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <HAL_Init+0x68>)
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	0a1b      	lsrs	r3, r3, #8
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	4913      	ldr	r1, [pc, #76]	@ (80021fc <HAL_Init+0x6c>)
 80021ae:	5ccb      	ldrb	r3, [r1, r3]
 80021b0:	f003 031f 	and.w	r3, r3, #31
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
 80021b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021ba:	4b0f      	ldr	r3, [pc, #60]	@ (80021f8 <HAL_Init+0x68>)
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	4a0e      	ldr	r2, [pc, #56]	@ (80021fc <HAL_Init+0x6c>)
 80021c4:	5cd3      	ldrb	r3, [r2, r3]
 80021c6:	f003 031f 	and.w	r3, r3, #31
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	fa22 f303 	lsr.w	r3, r2, r3
 80021d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002200 <HAL_Init+0x70>)
 80021d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002204 <HAL_Init+0x74>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021da:	200f      	movs	r0, #15
 80021dc:	f000 f814 	bl	8002208 <HAL_InitTick>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e002      	b.n	80021f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80021ea:	f7ff f98f 	bl	800150c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	58024400 	.word	0x58024400
 80021fc:	0800dbe4 	.word	0x0800dbe4
 8002200:	24000004 	.word	0x24000004
 8002204:	24000000 	.word	0x24000000

08002208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002210:	4b15      	ldr	r3, [pc, #84]	@ (8002268 <HAL_InitTick+0x60>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e021      	b.n	8002260 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800221c:	4b13      	ldr	r3, [pc, #76]	@ (800226c <HAL_InitTick+0x64>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b11      	ldr	r3, [pc, #68]	@ (8002268 <HAL_InitTick+0x60>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4619      	mov	r1, r3
 8002226:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800222a:	fbb3 f3f1 	udiv	r3, r3, r1
 800222e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f971 	bl	800251a <HAL_SYSTICK_Config>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e00e      	b.n	8002260 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b0f      	cmp	r3, #15
 8002246:	d80a      	bhi.n	800225e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002248:	2200      	movs	r2, #0
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f000 f93b 	bl	80024ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002254:	4a06      	ldr	r2, [pc, #24]	@ (8002270 <HAL_InitTick+0x68>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e000      	b.n	8002260 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
}
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	2400000c 	.word	0x2400000c
 800226c:	24000000 	.word	0x24000000
 8002270:	24000008 	.word	0x24000008

08002274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002278:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <HAL_IncTick+0x20>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_IncTick+0x24>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4413      	add	r3, r2
 8002284:	4a04      	ldr	r2, [pc, #16]	@ (8002298 <HAL_IncTick+0x24>)
 8002286:	6013      	str	r3, [r2, #0]
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	2400000c 	.word	0x2400000c
 8002298:	240006b0 	.word	0x240006b0

0800229c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return uwTick;
 80022a0:	4b03      	ldr	r3, [pc, #12]	@ (80022b0 <HAL_GetTick+0x14>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	240006b0 	.word	0x240006b0

080022b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022bc:	f7ff ffee 	bl	800229c <HAL_GetTick>
 80022c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022cc:	d005      	beq.n	80022da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ce:	4b0a      	ldr	r3, [pc, #40]	@ (80022f8 <HAL_Delay+0x44>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4413      	add	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022da:	bf00      	nop
 80022dc:	f7ff ffde 	bl	800229c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d8f7      	bhi.n	80022dc <HAL_Delay+0x28>
  {
  }
}
 80022ec:	bf00      	nop
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	2400000c 	.word	0x2400000c

080022fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002300:	4b03      	ldr	r3, [pc, #12]	@ (8002310 <HAL_GetREVID+0x14>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	0c1b      	lsrs	r3, r3, #16
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	5c001000 	.word	0x5c001000

08002314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002324:	4b0b      	ldr	r3, [pc, #44]	@ (8002354 <__NVIC_SetPriorityGrouping+0x40>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002330:	4013      	ands	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800233c:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 800233e:	4313      	orrs	r3, r2
 8002340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002342:	4a04      	ldr	r2, [pc, #16]	@ (8002354 <__NVIC_SetPriorityGrouping+0x40>)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	60d3      	str	r3, [r2, #12]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00
 8002358:	05fa0000 	.word	0x05fa0000

0800235c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002360:	4b04      	ldr	r3, [pc, #16]	@ (8002374 <__NVIC_GetPriorityGrouping+0x18>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	f003 0307 	and.w	r3, r3, #7
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002382:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002386:	2b00      	cmp	r3, #0
 8002388:	db0b      	blt.n	80023a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	f003 021f 	and.w	r2, r3, #31
 8002390:	4907      	ldr	r1, [pc, #28]	@ (80023b0 <__NVIC_EnableIRQ+0x38>)
 8002392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	2001      	movs	r0, #1
 800239a:	fa00 f202 	lsl.w	r2, r0, r2
 800239e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000e100 	.word	0xe000e100

080023b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	6039      	str	r1, [r7, #0]
 80023be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	db0a      	blt.n	80023de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	490c      	ldr	r1, [pc, #48]	@ (8002400 <__NVIC_SetPriority+0x4c>)
 80023ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023d2:	0112      	lsls	r2, r2, #4
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	440b      	add	r3, r1
 80023d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023dc:	e00a      	b.n	80023f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4908      	ldr	r1, [pc, #32]	@ (8002404 <__NVIC_SetPriority+0x50>)
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	3b04      	subs	r3, #4
 80023ec:	0112      	lsls	r2, r2, #4
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	440b      	add	r3, r1
 80023f2:	761a      	strb	r2, [r3, #24]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000e100 	.word	0xe000e100
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	@ 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f1c3 0307 	rsb	r3, r3, #7
 8002422:	2b04      	cmp	r3, #4
 8002424:	bf28      	it	cs
 8002426:	2304      	movcs	r3, #4
 8002428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3304      	adds	r3, #4
 800242e:	2b06      	cmp	r3, #6
 8002430:	d902      	bls.n	8002438 <NVIC_EncodePriority+0x30>
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3b03      	subs	r3, #3
 8002436:	e000      	b.n	800243a <NVIC_EncodePriority+0x32>
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800243c:	f04f 32ff 	mov.w	r2, #4294967295
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43da      	mvns	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	401a      	ands	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002450:	f04f 31ff 	mov.w	r1, #4294967295
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	43d9      	mvns	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	4313      	orrs	r3, r2
         );
}
 8002462:	4618      	mov	r0, r3
 8002464:	3724      	adds	r7, #36	@ 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3b01      	subs	r3, #1
 800247c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002480:	d301      	bcc.n	8002486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002482:	2301      	movs	r3, #1
 8002484:	e00f      	b.n	80024a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002486:	4a0a      	ldr	r2, [pc, #40]	@ (80024b0 <SysTick_Config+0x40>)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248e:	210f      	movs	r1, #15
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	f7ff ff8e 	bl	80023b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002498:	4b05      	ldr	r3, [pc, #20]	@ (80024b0 <SysTick_Config+0x40>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249e:	4b04      	ldr	r3, [pc, #16]	@ (80024b0 <SysTick_Config+0x40>)
 80024a0:	2207      	movs	r2, #7
 80024a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	e000e010 	.word	0xe000e010

080024b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff ff29 	bl	8002314 <__NVIC_SetPriorityGrouping>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	4603      	mov	r3, r0
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024d8:	f7ff ff40 	bl	800235c <__NVIC_GetPriorityGrouping>
 80024dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	6978      	ldr	r0, [r7, #20]
 80024e4:	f7ff ff90 	bl	8002408 <NVIC_EncodePriority>
 80024e8:	4602      	mov	r2, r0
 80024ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff5f 	bl	80023b4 <__NVIC_SetPriority>
}
 80024f6:	bf00      	nop
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	4603      	mov	r3, r0
 8002506:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002508:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff33 	bl	8002378 <__NVIC_EnableIRQ>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff ffa4 	bl	8002470 <SysTick_Config>
 8002528:	4603      	mov	r3, r0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002538:	f3bf 8f5f 	dmb	sy
}
 800253c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800253e:	4b07      	ldr	r3, [pc, #28]	@ (800255c <HAL_MPU_Disable+0x28>)
 8002540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002542:	4a06      	ldr	r2, [pc, #24]	@ (800255c <HAL_MPU_Disable+0x28>)
 8002544:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002548:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800254a:	4b05      	ldr	r3, [pc, #20]	@ (8002560 <HAL_MPU_Disable+0x2c>)
 800254c:	2200      	movs	r2, #0
 800254e:	605a      	str	r2, [r3, #4]
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000ed00 	.word	0xe000ed00
 8002560:	e000ed90 	.word	0xe000ed90

08002564 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800256c:	4a0b      	ldr	r2, [pc, #44]	@ (800259c <HAL_MPU_Enable+0x38>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002576:	4b0a      	ldr	r3, [pc, #40]	@ (80025a0 <HAL_MPU_Enable+0x3c>)
 8002578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257a:	4a09      	ldr	r2, [pc, #36]	@ (80025a0 <HAL_MPU_Enable+0x3c>)
 800257c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002580:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002582:	f3bf 8f4f 	dsb	sy
}
 8002586:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002588:	f3bf 8f6f 	isb	sy
}
 800258c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	e000ed90 	.word	0xe000ed90
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	785a      	ldrb	r2, [r3, #1]
 80025b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002620 <HAL_MPU_ConfigRegion+0x7c>)
 80025b2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80025b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002620 <HAL_MPU_ConfigRegion+0x7c>)
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	4a19      	ldr	r2, [pc, #100]	@ (8002620 <HAL_MPU_ConfigRegion+0x7c>)
 80025ba:	f023 0301 	bic.w	r3, r3, #1
 80025be:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80025c0:	4a17      	ldr	r2, [pc, #92]	@ (8002620 <HAL_MPU_ConfigRegion+0x7c>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7b1b      	ldrb	r3, [r3, #12]
 80025cc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	7adb      	ldrb	r3, [r3, #11]
 80025d2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	7a9b      	ldrb	r3, [r3, #10]
 80025da:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80025dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	7b5b      	ldrb	r3, [r3, #13]
 80025e2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80025e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	7b9b      	ldrb	r3, [r3, #14]
 80025ea:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80025ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	7bdb      	ldrb	r3, [r3, #15]
 80025f2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80025f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	7a5b      	ldrb	r3, [r3, #9]
 80025fa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80025fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	7a1b      	ldrb	r3, [r3, #8]
 8002602:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002604:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	7812      	ldrb	r2, [r2, #0]
 800260a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800260c:	4a04      	ldr	r2, [pc, #16]	@ (8002620 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800260e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002610:	6113      	str	r3, [r2, #16]
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000ed90 	.word	0xe000ed90

08002624 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002624:	b480      	push	{r7}
 8002626:	b089      	sub	sp, #36	@ 0x24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002632:	4b89      	ldr	r3, [pc, #548]	@ (8002858 <HAL_GPIO_Init+0x234>)
 8002634:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002636:	e194      	b.n	8002962 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	2101      	movs	r1, #1
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	fa01 f303 	lsl.w	r3, r1, r3
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 8186 	beq.w	800295c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	2b01      	cmp	r3, #1
 800265a:	d005      	beq.n	8002668 <HAL_GPIO_Init+0x44>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d130      	bne.n	80026ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	2203      	movs	r2, #3
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800269e:	2201      	movs	r2, #1
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	f003 0201 	and.w	r2, r3, #1
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d017      	beq.n	8002706 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	2203      	movs	r2, #3
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d123      	bne.n	800275a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	08da      	lsrs	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3208      	adds	r2, #8
 800271a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	220f      	movs	r2, #15
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	691a      	ldr	r2, [r3, #16]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	f003 0307 	and.w	r3, r3, #7
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	08da      	lsrs	r2, r3, #3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3208      	adds	r2, #8
 8002754:	69b9      	ldr	r1, [r7, #24]
 8002756:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	2203      	movs	r2, #3
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 0203 	and.w	r2, r3, #3
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 80e0 	beq.w	800295c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800279c:	4b2f      	ldr	r3, [pc, #188]	@ (800285c <HAL_GPIO_Init+0x238>)
 800279e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027a2:	4a2e      	ldr	r2, [pc, #184]	@ (800285c <HAL_GPIO_Init+0x238>)
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80027ac:	4b2b      	ldr	r3, [pc, #172]	@ (800285c <HAL_GPIO_Init+0x238>)
 80027ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ba:	4a29      	ldr	r2, [pc, #164]	@ (8002860 <HAL_GPIO_Init+0x23c>)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	3302      	adds	r3, #2
 80027c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	220f      	movs	r2, #15
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a20      	ldr	r2, [pc, #128]	@ (8002864 <HAL_GPIO_Init+0x240>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d052      	beq.n	800288c <HAL_GPIO_Init+0x268>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002868 <HAL_GPIO_Init+0x244>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d031      	beq.n	8002852 <HAL_GPIO_Init+0x22e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a1e      	ldr	r2, [pc, #120]	@ (800286c <HAL_GPIO_Init+0x248>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d02b      	beq.n	800284e <HAL_GPIO_Init+0x22a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002870 <HAL_GPIO_Init+0x24c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d025      	beq.n	800284a <HAL_GPIO_Init+0x226>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a1c      	ldr	r2, [pc, #112]	@ (8002874 <HAL_GPIO_Init+0x250>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d01f      	beq.n	8002846 <HAL_GPIO_Init+0x222>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a1b      	ldr	r2, [pc, #108]	@ (8002878 <HAL_GPIO_Init+0x254>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d019      	beq.n	8002842 <HAL_GPIO_Init+0x21e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a1a      	ldr	r2, [pc, #104]	@ (800287c <HAL_GPIO_Init+0x258>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d013      	beq.n	800283e <HAL_GPIO_Init+0x21a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a19      	ldr	r2, [pc, #100]	@ (8002880 <HAL_GPIO_Init+0x25c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00d      	beq.n	800283a <HAL_GPIO_Init+0x216>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a18      	ldr	r2, [pc, #96]	@ (8002884 <HAL_GPIO_Init+0x260>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d007      	beq.n	8002836 <HAL_GPIO_Init+0x212>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a17      	ldr	r2, [pc, #92]	@ (8002888 <HAL_GPIO_Init+0x264>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d101      	bne.n	8002832 <HAL_GPIO_Init+0x20e>
 800282e:	2309      	movs	r3, #9
 8002830:	e02d      	b.n	800288e <HAL_GPIO_Init+0x26a>
 8002832:	230a      	movs	r3, #10
 8002834:	e02b      	b.n	800288e <HAL_GPIO_Init+0x26a>
 8002836:	2308      	movs	r3, #8
 8002838:	e029      	b.n	800288e <HAL_GPIO_Init+0x26a>
 800283a:	2307      	movs	r3, #7
 800283c:	e027      	b.n	800288e <HAL_GPIO_Init+0x26a>
 800283e:	2306      	movs	r3, #6
 8002840:	e025      	b.n	800288e <HAL_GPIO_Init+0x26a>
 8002842:	2305      	movs	r3, #5
 8002844:	e023      	b.n	800288e <HAL_GPIO_Init+0x26a>
 8002846:	2304      	movs	r3, #4
 8002848:	e021      	b.n	800288e <HAL_GPIO_Init+0x26a>
 800284a:	2303      	movs	r3, #3
 800284c:	e01f      	b.n	800288e <HAL_GPIO_Init+0x26a>
 800284e:	2302      	movs	r3, #2
 8002850:	e01d      	b.n	800288e <HAL_GPIO_Init+0x26a>
 8002852:	2301      	movs	r3, #1
 8002854:	e01b      	b.n	800288e <HAL_GPIO_Init+0x26a>
 8002856:	bf00      	nop
 8002858:	58000080 	.word	0x58000080
 800285c:	58024400 	.word	0x58024400
 8002860:	58000400 	.word	0x58000400
 8002864:	58020000 	.word	0x58020000
 8002868:	58020400 	.word	0x58020400
 800286c:	58020800 	.word	0x58020800
 8002870:	58020c00 	.word	0x58020c00
 8002874:	58021000 	.word	0x58021000
 8002878:	58021400 	.word	0x58021400
 800287c:	58021800 	.word	0x58021800
 8002880:	58021c00 	.word	0x58021c00
 8002884:	58022000 	.word	0x58022000
 8002888:	58022400 	.word	0x58022400
 800288c:	2300      	movs	r3, #0
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	f002 0203 	and.w	r2, r2, #3
 8002894:	0092      	lsls	r2, r2, #2
 8002896:	4093      	lsls	r3, r2
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800289e:	4938      	ldr	r1, [pc, #224]	@ (8002980 <HAL_GPIO_Init+0x35c>)
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	089b      	lsrs	r3, r3, #2
 80028a4:	3302      	adds	r3, #2
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4013      	ands	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80028d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002900:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	3301      	adds	r3, #1
 8002960:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	f47f ae63 	bne.w	8002638 <HAL_GPIO_Init+0x14>
  }
}
 8002972:	bf00      	nop
 8002974:	bf00      	nop
 8002976:	3724      	adds	r7, #36	@ 0x24
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	58000400 	.word	0x58000400

08002984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	807b      	strh	r3, [r7, #2]
 8002990:	4613      	mov	r3, r2
 8002992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002994:	787b      	ldrb	r3, [r7, #1]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800299a:	887a      	ldrh	r2, [r7, #2]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80029a0:	e003      	b.n	80029aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80029a2:	887b      	ldrh	r3, [r7, #2]
 80029a4:	041a      	lsls	r2, r3, #16
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	619a      	str	r2, [r3, #24]
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef *hhrtim)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if (hhrtim == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0bd      	b.n	8002b46 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2202      	movs	r2, #2
 80029ce:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d031      	beq.n	8002a72 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a4f      	ldr	r2, [pc, #316]	@ (8002b50 <HAL_HRTIM_Init+0x198>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d10e      	bne.n	8002a36 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8002a18:	4b4e      	ldr	r3, [pc, #312]	@ (8002b54 <HAL_HRTIM_Init+0x19c>)
 8002a1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a1e:	4a4d      	ldr	r2, [pc, #308]	@ (8002b54 <HAL_HRTIM_Init+0x19c>)
 8002a20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002a24:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002a28:	4b4a      	ldr	r3, [pc, #296]	@ (8002b54 <HAL_HRTIM_Init+0x19c>)
 8002a2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002a44:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a5a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7fe fd64 	bl	8001540 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d012      	beq.n	8002aaa <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a92:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8002aba:	2300      	movs	r3, #0
 8002abc:	75fb      	strb	r3, [r7, #23]
 8002abe:	e03e      	b.n	8002b3e <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8002ac0:	7dfa      	ldrb	r2, [r7, #23]
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	3318      	adds	r3, #24
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8002ad4:	7dfa      	ldrb	r2, [r7, #23]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	331c      	adds	r3, #28
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8002ae8:	7dfa      	ldrb	r2, [r7, #23]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	3320      	adds	r3, #32
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8002afc:	7dfa      	ldrb	r2, [r7, #23]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	1a9b      	subs	r3, r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	3324      	adds	r3, #36	@ 0x24
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8002b10:	7dfa      	ldrb	r2, [r7, #23]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3328      	adds	r3, #40	@ 0x28
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8002b24:	7dfa      	ldrb	r2, [r7, #23]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	3330      	adds	r3, #48	@ 0x30
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8002b3e:	7dfb      	ldrb	r3, [r7, #23]
 8002b40:	2b05      	cmp	r3, #5
 8002b42:	d9bd      	bls.n	8002ac0 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40017400 	.word	0x40017400
 8002b54:	58024400 	.word	0x58024400

08002b58 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d101      	bne.n	8002b74 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
    return HAL_BUSY;
 8002b70:	2302      	movs	r3, #2
 8002b72:	e015      	b.n	8002ba0 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2b05      	cmp	r3, #5
 8002b80:	d104      	bne.n	8002b8c <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f8b2 	bl	8002cee <HRTIM_MasterBase_Config>
 8002b8a:	e004      	b.n	8002b96 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 f8db 	bl	8002d4c <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d101      	bne.n	8002bc4 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
    return HAL_BUSY;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e05f      	b.n	8002c84 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e058      	b.n	8002c84 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b05      	cmp	r3, #5
 8002be6:	d104      	bne.n	8002bf2 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f8ee 	bl	8002dcc <HRTIM_MasterWaveform_Config>
 8002bf0:	e004      	b.n	8002bfc <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f94e 	bl	8002e98 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6819      	ldr	r1, [r3, #0]
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4403      	add	r3, r0
 8002c0e:	3320      	adds	r3, #32
 8002c10:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6859      	ldr	r1, [r3, #4]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	1a9b      	subs	r3, r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4403      	add	r3, r0
 8002c24:	3324      	adds	r3, #36	@ 0x24
 8002c26:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6899      	ldr	r1, [r3, #8]
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4403      	add	r3, r0
 8002c3a:	3328      	adds	r3, #40	@ 0x28
 8002c3c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68d9      	ldr	r1, [r3, #12]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4403      	add	r3, r0
 8002c50:	332c      	adds	r3, #44	@ 0x2c
 8002c52:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6919      	ldr	r1, [r3, #16]
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4403      	add	r3, r0
 8002c66:	3330      	adds	r3, #48	@ 0x30
 8002c68:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8002c6a:	68b9      	ldr	r1, [r7, #8]
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fb2b 	bl	80032c8 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 uint32_t Output,
                                                 const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d101      	bne.n	8002caa <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
    return HAL_BUSY;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e01d      	b.n	8002ce6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e016      	b.n	8002ce6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 fa22 	bl	8003118 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b085      	sub	sp, #20
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f023 0307 	bic.w	r3, r3, #7
 8002d06:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f023 0318 	bic.w	r3, r3, #24
 8002d18:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	6852      	ldr	r2, [r2, #4]
 8002d3e:	619a      	str	r2, [r3, #24]
}
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                        uint32_t TimerIdx,
                                        const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	01db      	lsls	r3, r3, #7
 8002d62:	4413      	add	r3, r2
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f023 0307 	bic.w	r3, r3, #7
 8002d6e:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f023 0318 	bic.w	r3, r3, #24
 8002d80:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	3301      	adds	r3, #1
 8002d94:	01db      	lsls	r3, r3, #7
 8002d96:	4413      	add	r3, r2
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6819      	ldr	r1, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	01db      	lsls	r3, r3, #7
 8002da8:	440b      	add	r3, r1
 8002daa:	3394      	adds	r3, #148	@ 0x94
 8002dac:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6819      	ldr	r1, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	01db      	lsls	r3, r3, #7
 8002dba:	440b      	add	r3, r1
 8002dbc:	3398      	adds	r3, #152	@ 0x98
 8002dbe:	601a      	str	r2, [r3, #0]
}
 8002dc0:	bf00      	nop
 8002dc2:	371c      	adds	r7, #28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                        const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8002de6:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f023 0320 	bic.w	r3, r3, #32
 8002dee:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e00:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e12:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e24:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8002e36:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002e48:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8002e5c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e6e:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b08b      	sub	sp, #44	@ 0x2c
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	01db      	lsls	r3, r3, #7
 8002eae:	4413      	add	r3, r2
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	6811      	ldr	r1, [r2, #0]
 8002eb6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	01db      	lsls	r3, r3, #7
 8002ec0:	440b      	add	r3, r1
 8002ec2:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	01db      	lsls	r3, r3, #7
 8002ece:	4413      	add	r3, r2
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	01db      	lsls	r3, r3, #7
 8002edc:	4413      	add	r3, r2
 8002ede:	33e8      	adds	r3, #232	@ 0xe8
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	01db      	lsls	r3, r3, #7
 8002eec:	4413      	add	r3, r2
 8002eee:	33e4      	adds	r3, #228	@ 0xe4
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8002efc:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8002efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f00:	f023 0320 	bic.w	r3, r3, #32
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8002f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f16:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8002f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f28:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f30:	4313      	orrs	r3, r2
 8002f32:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8002f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f36:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f42:	4313      	orrs	r3, r2
 8002f44:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8002f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f48:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8002f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f54:	4313      	orrs	r3, r2
 8002f56:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8002f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f66:	4313      	orrs	r3, r2
 8002f68:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002f70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f7a:	d103      	bne.n	8002f84 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f82:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f92:	4313      	orrs	r3, r2
 8002f94:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8002f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002faa:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8002fae:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	f023 031f 	bic.w	r3, r3, #31
 8002fc0:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fd6:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d108      	bne.n	8002ffc <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ff0:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	6a3a      	ldr	r2, [r7, #32]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if (((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003000:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8003004:	d004      	beq.n	8003010 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300a:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 800300e:	d103      	bne.n	8003018 <HRTIM_TimingUnitWaveform_Config+0x180>
      || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003014:	2b40      	cmp	r3, #64	@ 0x40
 8003016:	d108      	bne.n	800302a <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT | HRTIM_OUTR_DLYPRTEN);
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 800301e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003024:	6a3a      	ldr	r2, [r7, #32]
 8003026:	4313      	orrs	r3, r2
 8003028:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800302e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b04      	cmp	r3, #4
 8003034:	d843      	bhi.n	80030be <HRTIM_TimingUnitWaveform_Config+0x226>
 8003036:	a201      	add	r2, pc, #4	@ (adr r2, 800303c <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8003038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303c:	08003051 	.word	0x08003051
 8003040:	08003067 	.word	0x08003067
 8003044:	0800307d 	.word	0x0800307d
 8003048:	08003093 	.word	0x08003093
 800304c:	080030a9 	.word	0x080030a9
  {
    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003056:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 1U);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	4313      	orrs	r3, r2
 8003062:	61fb      	str	r3, [r7, #28]
      break;
 8003064:	e02c      	b.n	80030c0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800306c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 2U);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	69fa      	ldr	r2, [r7, #28]
 8003076:	4313      	orrs	r3, r2
 8003078:	61fb      	str	r3, [r7, #28]
      break;
 800307a:	e021      	b.n	80030c0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003082:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 3U);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	4313      	orrs	r3, r2
 800308e:	61fb      	str	r3, [r7, #28]
      break;
 8003090:	e016      	b.n	80030c0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003098:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 4U);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	61fb      	str	r3, [r7, #28]
      break;
 80030a6:	e00b      	b.n	80030c0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80030ae:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 5U);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b4:	015b      	lsls	r3, r3, #5
 80030b6:	69fa      	ldr	r2, [r7, #28]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61fb      	str	r3, [r7, #28]
      break;
 80030bc:	e000      	b.n	80030c0 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

    default:
      break;
 80030be:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	3301      	adds	r3, #1
 80030c8:	01db      	lsls	r3, r3, #7
 80030ca:	4413      	add	r3, r2
 80030cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ce:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	01db      	lsls	r3, r3, #7
 80030d8:	4413      	add	r3, r2
 80030da:	33e8      	adds	r3, #232	@ 0xe8
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	01db      	lsls	r3, r3, #7
 80030e8:	4413      	add	r3, r2
 80030ea:	33e4      	adds	r3, #228	@ 0xe4
 80030ec:	6a3a      	ldr	r2, [r7, #32]
 80030ee:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	01db      	lsls	r3, r3, #7
 80030f8:	4413      	add	r3, r2
 80030fa:	33d4      	adds	r3, #212	@ 0xd4
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 800310a:	bf00      	nop
 800310c:	372c      	adds	r7, #44	@ 0x2c
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop

08003118 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8003118:	b480      	push	{r7}
 800311a:	b089      	sub	sp, #36	@ 0x24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	01db      	lsls	r3, r3, #7
 8003132:	4413      	add	r3, r2
 8003134:	33e4      	adds	r3, #228	@ 0xe4
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	01db      	lsls	r3, r3, #7
 8003142:	4413      	add	r3, r2
 8003144:	33b8      	adds	r3, #184	@ 0xb8
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	617b      	str	r3, [r7, #20]

  switch (Output)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003150:	d04d      	beq.n	80031ee <HRTIM_OutputConfig+0xd6>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003158:	d85e      	bhi.n	8003218 <HRTIM_OutputConfig+0x100>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003160:	d032      	beq.n	80031c8 <HRTIM_OutputConfig+0xb0>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003168:	d856      	bhi.n	8003218 <HRTIM_OutputConfig+0x100>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b80      	cmp	r3, #128	@ 0x80
 800316e:	d03e      	beq.n	80031ee <HRTIM_OutputConfig+0xd6>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b80      	cmp	r3, #128	@ 0x80
 8003174:	d850      	bhi.n	8003218 <HRTIM_OutputConfig+0x100>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b40      	cmp	r3, #64	@ 0x40
 800317a:	d025      	beq.n	80031c8 <HRTIM_OutputConfig+0xb0>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b40      	cmp	r3, #64	@ 0x40
 8003180:	d84a      	bhi.n	8003218 <HRTIM_OutputConfig+0x100>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d01f      	beq.n	80031c8 <HRTIM_OutputConfig+0xb0>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d044      	beq.n	8003218 <HRTIM_OutputConfig+0x100>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b20      	cmp	r3, #32
 8003192:	d841      	bhi.n	8003218 <HRTIM_OutputConfig+0x100>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d33e      	bcc.n	8003218 <HRTIM_OutputConfig+0x100>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3b02      	subs	r3, #2
 800319e:	2201      	movs	r2, #1
 80031a0:	409a      	lsls	r2, r3
 80031a2:	4b48      	ldr	r3, [pc, #288]	@ (80032c4 <HRTIM_OutputConfig+0x1ac>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	bf14      	ite	ne
 80031aa:	2301      	movne	r3, #1
 80031ac:	2300      	moveq	r3, #0
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d11c      	bne.n	80031ee <HRTIM_OutputConfig+0xd6>
 80031b4:	f244 0304 	movw	r3, #16388	@ 0x4004
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	bf14      	ite	ne
 80031be:	2301      	movne	r3, #1
 80031c0:	2300      	moveq	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d027      	beq.n	8003218 <HRTIM_OutputConfig+0x100>
    case HRTIM_OUTPUT_TC1:
    case HRTIM_OUTPUT_TD1:
    case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6819      	ldr	r1, [r3, #0]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	01db      	lsls	r3, r3, #7
 80031d4:	440b      	add	r3, r1
 80031d6:	33bc      	adds	r3, #188	@ 0xbc
 80031d8:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6819      	ldr	r1, [r3, #0]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	01db      	lsls	r3, r3, #7
 80031e6:	440b      	add	r3, r1
 80031e8:	33c0      	adds	r3, #192	@ 0xc0
 80031ea:	601a      	str	r2, [r3, #0]
      break;
 80031ec:	e015      	b.n	800321a <HRTIM_OutputConfig+0x102>
    case HRTIM_OUTPUT_TC2:
    case HRTIM_OUTPUT_TD2:
    case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6819      	ldr	r1, [r3, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	01db      	lsls	r3, r3, #7
 80031fa:	440b      	add	r3, r1
 80031fc:	33c4      	adds	r3, #196	@ 0xc4
 80031fe:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6819      	ldr	r1, [r3, #0]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	01db      	lsls	r3, r3, #7
 800320c:	440b      	add	r3, r1
 800320e:	33c8      	adds	r3, #200	@ 0xc8
 8003210:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8003212:	2310      	movs	r3, #16
 8003214:	61bb      	str	r3, [r7, #24]
      break;
 8003216:	e000      	b.n	800321a <HRTIM_OutputConfig+0x102>
    }

    default:
      break;
 8003218:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1 |
                   HRTIM_OUTR_FAULT1 |
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 800321a:	22fe      	movs	r2, #254	@ 0xfe
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8003222:	43db      	mvns	r3, r3
 8003224:	69fa      	ldr	r2, [r7, #28]
 8003226:	4013      	ands	r3, r2
 8003228:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	4313      	orrs	r3, r2
 8003238:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	69fa      	ldr	r2, [r7, #28]
 8003246:	4313      	orrs	r3, r2
 8003248:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	4313      	orrs	r3, r2
 8003258:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69fa      	ldr	r2, [r7, #28]
 8003266:	4313      	orrs	r3, r2
 8003268:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	69fa      	ldr	r2, [r7, #28]
 8003276:	4313      	orrs	r3, r2
 8003278:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	2b08      	cmp	r3, #8
 8003280:	d111      	bne.n	80032a6 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10c      	bne.n	80032a6 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8003292:	2b00      	cmp	r3, #0
 8003294:	d107      	bne.n	80032a6 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	69da      	ldr	r2, [r3, #28]
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	69fa      	ldr	r2, [r7, #28]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	01db      	lsls	r3, r3, #7
 80032ae:	4413      	add	r3, r2
 80032b0:	33e4      	adds	r3, #228	@ 0xe4
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	601a      	str	r2, [r3, #0]
}
 80032b6:	bf00      	nop
 80032b8:	3724      	adds	r7, #36	@ 0x24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40000041 	.word	0x40000041

080032c8 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef *hhrtim,
                                       uint32_t TimerIdx)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b05      	cmp	r3, #5
 80032d6:	d851      	bhi.n	800337c <HRTIM_ForceRegistersUpdate+0xb4>
 80032d8:	a201      	add	r2, pc, #4	@ (adr r2, 80032e0 <HRTIM_ForceRegistersUpdate+0x18>)
 80032da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032de:	bf00      	nop
 80032e0:	0800330f 	.word	0x0800330f
 80032e4:	08003325 	.word	0x08003325
 80032e8:	0800333b 	.word	0x0800333b
 80032ec:	08003351 	.word	0x08003351
 80032f0:	08003367 	.word	0x08003367
 80032f4:	080032f9 	.word	0x080032f9
  {
    case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0201 	orr.w	r2, r2, #1
 8003308:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800330c:	e037      	b.n	800337e <HRTIM_ForceRegistersUpdate+0xb6>
    }

    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0202 	orr.w	r2, r2, #2
 800331e:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003322:	e02c      	b.n	800337e <HRTIM_ForceRegistersUpdate+0xb6>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0204 	orr.w	r2, r2, #4
 8003334:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003338:	e021      	b.n	800337e <HRTIM_ForceRegistersUpdate+0xb6>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0208 	orr.w	r2, r2, #8
 800334a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800334e:	e016      	b.n	800337e <HRTIM_ForceRegistersUpdate+0xb6>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0210 	orr.w	r2, r2, #16
 8003360:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8003364:	e00b      	b.n	800337e <HRTIM_ForceRegistersUpdate+0xb6>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0220 	orr.w	r2, r2, #32
 8003376:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800337a:	e000      	b.n	800337e <HRTIM_ForceRegistersUpdate+0xb6>
    }

    default:
      break;
 800337c:	bf00      	nop
  }
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop

0800338c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e08b      	b.n	80034b6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7fe f95c 	bl	8001670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2224      	movs	r2, #36	@ 0x24
 80033bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0201 	bic.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d107      	bne.n	8003406 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	e006      	b.n	8003414 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003412:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d108      	bne.n	800342e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800342a:	605a      	str	r2, [r3, #4]
 800342c:	e007      	b.n	800343e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800343c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6859      	ldr	r1, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4b1d      	ldr	r3, [pc, #116]	@ (80034c0 <HAL_I2C_Init+0x134>)
 800344a:	430b      	orrs	r3, r1
 800344c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800345c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	69d9      	ldr	r1, [r3, #28]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1a      	ldr	r2, [r3, #32]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	02008000 	.word	0x02008000

080034c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b20      	cmp	r3, #32
 80034d8:	d138      	bne.n	800354c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e032      	b.n	800354e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2224      	movs	r2, #36	@ 0x24
 80034f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0201 	bic.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003516:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6819      	ldr	r1, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	e000      	b.n	800354e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800354c:	2302      	movs	r3, #2
  }
}
 800354e:	4618      	mov	r0, r3
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800355a:	b480      	push	{r7}
 800355c:	b085      	sub	sp, #20
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b20      	cmp	r3, #32
 800356e:	d139      	bne.n	80035e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800357a:	2302      	movs	r3, #2
 800357c:	e033      	b.n	80035e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2224      	movs	r2, #36	@ 0x24
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0201 	bic.w	r2, r2, #1
 800359c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80035ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	021b      	lsls	r3, r3, #8
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0201 	orr.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	e000      	b.n	80035e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035e4:	2302      	movs	r3, #2
  }
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e097      	b.n	8003736 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d106      	bne.n	8003626 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7fe f8dd 	bl	80017e0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2202      	movs	r2, #2
 800362a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d004      	beq.n	8003648 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003642:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003646:	d103      	bne.n	8003650 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 031e 	bic.w	r3, r3, #30
 800364e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003658:	4293      	cmp	r3, r2
 800365a:	d003      	beq.n	8003664 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	4b38      	ldr	r3, [pc, #224]	@ (8003740 <HAL_LPTIM_Init+0x14c>)
 8003660:	4013      	ands	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4b37      	ldr	r3, [pc, #220]	@ (8003744 <HAL_LPTIM_Init+0x150>)
 8003668:	4013      	ands	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003674:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800367a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8003680:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8003686:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d107      	bne.n	80036a6 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800369e:	4313      	orrs	r3, r2
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d004      	beq.n	80036b8 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036b6:	d107      	bne.n	80036c8 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80036c0:	4313      	orrs	r3, r2
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d00a      	beq.n	80036ea <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80036dc:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80036e2:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a14      	ldr	r2, [pc, #80]	@ (8003748 <HAL_LPTIM_Init+0x154>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d004      	beq.n	8003706 <HAL_LPTIM_Init+0x112>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a12      	ldr	r2, [pc, #72]	@ (800374c <HAL_LPTIM_Init+0x158>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d108      	bne.n	8003718 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	625a      	str	r2, [r3, #36]	@ 0x24
 8003716:	e009      	b.n	800372c <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a0c      	ldr	r2, [pc, #48]	@ (8003750 <HAL_LPTIM_Init+0x15c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d104      	bne.n	800372c <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800372a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	ffff1f3f 	.word	0xffff1f3f
 8003744:	ff19f1fe 	.word	0xff19f1fe
 8003748:	40002400 	.word	0x40002400
 800374c:	58002400 	.word	0x58002400
 8003750:	58002800 	.word	0x58002800

08003754 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af02      	add	r7, sp, #8
 800375a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e0fe      	b.n	8003964 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f009 fe9e 	bl	800d4bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2203      	movs	r2, #3
 8003784:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f006 fac4 	bl	8009d1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	7c1a      	ldrb	r2, [r3, #16]
 800379a:	f88d 2000 	strb.w	r2, [sp]
 800379e:	3304      	adds	r3, #4
 80037a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037a2:	f006 f995 	bl	8009ad0 <USB_CoreInit>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0d5      	b.n	8003964 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2100      	movs	r1, #0
 80037be:	4618      	mov	r0, r3
 80037c0:	f006 fabc 	bl	8009d3c <USB_SetCurrentMode>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d005      	beq.n	80037d6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2202      	movs	r2, #2
 80037ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e0c6      	b.n	8003964 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d6:	2300      	movs	r3, #0
 80037d8:	73fb      	strb	r3, [r7, #15]
 80037da:	e04a      	b.n	8003872 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037dc:	7bfa      	ldrb	r2, [r7, #15]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	3315      	adds	r3, #21
 80037ec:	2201      	movs	r2, #1
 80037ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037f0:	7bfa      	ldrb	r2, [r7, #15]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	3314      	adds	r3, #20
 8003800:	7bfa      	ldrb	r2, [r7, #15]
 8003802:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003804:	7bfa      	ldrb	r2, [r7, #15]
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	b298      	uxth	r0, r3
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	332e      	adds	r3, #46	@ 0x2e
 8003818:	4602      	mov	r2, r0
 800381a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800381c:	7bfa      	ldrb	r2, [r7, #15]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	3318      	adds	r3, #24
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003830:	7bfa      	ldrb	r2, [r7, #15]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	331c      	adds	r3, #28
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003844:	7bfa      	ldrb	r2, [r7, #15]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	3320      	adds	r3, #32
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003858:	7bfa      	ldrb	r2, [r7, #15]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	3324      	adds	r3, #36	@ 0x24
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	3301      	adds	r3, #1
 8003870:	73fb      	strb	r3, [r7, #15]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	791b      	ldrb	r3, [r3, #4]
 8003876:	7bfa      	ldrb	r2, [r7, #15]
 8003878:	429a      	cmp	r2, r3
 800387a:	d3af      	bcc.n	80037dc <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800387c:	2300      	movs	r3, #0
 800387e:	73fb      	strb	r3, [r7, #15]
 8003880:	e044      	b.n	800390c <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003882:	7bfa      	ldrb	r2, [r7, #15]
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4413      	add	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003898:	7bfa      	ldrb	r2, [r7, #15]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80038aa:	7bfa      	ldrb	r2, [r7, #15]
 80038ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038ae:	7bfa      	ldrb	r2, [r7, #15]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4413      	add	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80038c0:	2200      	movs	r2, #0
 80038c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038c4:	7bfa      	ldrb	r2, [r7, #15]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038da:	7bfa      	ldrb	r2, [r7, #15]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038f0:	7bfa      	ldrb	r2, [r7, #15]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	3301      	adds	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	791b      	ldrb	r3, [r3, #4]
 8003910:	7bfa      	ldrb	r2, [r7, #15]
 8003912:	429a      	cmp	r2, r3
 8003914:	d3b5      	bcc.n	8003882 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6818      	ldr	r0, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	7c1a      	ldrb	r2, [r3, #16]
 800391e:	f88d 2000 	strb.w	r2, [sp]
 8003922:	3304      	adds	r3, #4
 8003924:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003926:	f006 fa55 	bl	8009dd4 <USB_DevInit>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e013      	b.n	8003964 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	7b1b      	ldrb	r3, [r3, #12]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d102      	bne.n	8003958 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f001 f96e 	bl	8004c34 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4618      	mov	r0, r3
 800395e:	f007 fa98 	bl	800ae92 <USB_DevDisconnect>

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_PCD_Start+0x1c>
 8003984:	2302      	movs	r3, #2
 8003986:	e022      	b.n	80039ce <HAL_PCD_Start+0x62>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003998:	2b00      	cmp	r3, #0
 800399a:	d009      	beq.n	80039b0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d105      	bne.n	80039b0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f006 f99f 	bl	8009cf8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f007 fa46 	bl	800ae50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80039d6:	b590      	push	{r4, r7, lr}
 80039d8:	b08d      	sub	sp, #52	@ 0x34
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f007 fb04 	bl	800affa <USB_GetMode>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f040 84b9 	bne.w	800436c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f007 fa68 	bl	800aed4 <USB_ReadInterrupts>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 84af 	beq.w	800436a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	0a1b      	lsrs	r3, r3, #8
 8003a16:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f007 fa55 	bl	800aed4 <USB_ReadInterrupts>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d107      	bne.n	8003a44 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f002 0202 	and.w	r2, r2, #2
 8003a42:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f007 fa43 	bl	800aed4 <USB_ReadInterrupts>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d161      	bne.n	8003b1c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0210 	bic.w	r2, r2, #16
 8003a66:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	f003 020f 	and.w	r2, r3, #15
 8003a74:	4613      	mov	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	4413      	add	r3, r2
 8003a84:	3304      	adds	r3, #4
 8003a86:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003a8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a92:	d124      	bne.n	8003ade <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d035      	beq.n	8003b0c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	091b      	lsrs	r3, r3, #4
 8003aa8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003aaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6a38      	ldr	r0, [r7, #32]
 8003ab4:	f007 f87a 	bl	800abac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ac4:	441a      	add	r2, r3
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	695a      	ldr	r2, [r3, #20]
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	091b      	lsrs	r3, r3, #4
 8003ad2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ad6:	441a      	add	r2, r3
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	615a      	str	r2, [r3, #20]
 8003adc:	e016      	b.n	8003b0c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003ae4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003ae8:	d110      	bne.n	8003b0c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003af0:	2208      	movs	r2, #8
 8003af2:	4619      	mov	r1, r3
 8003af4:	6a38      	ldr	r0, [r7, #32]
 8003af6:	f007 f859 	bl	800abac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	695a      	ldr	r2, [r3, #20]
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b06:	441a      	add	r2, r3
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0210 	orr.w	r2, r2, #16
 8003b1a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f007 f9d7 	bl	800aed4 <USB_ReadInterrupts>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b2c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b30:	f040 80a7 	bne.w	8003c82 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f007 f9dc 	bl	800aefa <USB_ReadDevAllOutEpInterrupt>
 8003b42:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003b44:	e099      	b.n	8003c7a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 808e 	beq.w	8003c6e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f007 fa00 	bl	800af62 <USB_ReadDevOutEPInterrupt>
 8003b62:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00c      	beq.n	8003b88 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fed0 	bl	8004928 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00c      	beq.n	8003bac <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	2308      	movs	r3, #8
 8003ba2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003ba4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 ffa6 	bl	8004af8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	2310      	movs	r3, #16
 8003bc6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d030      	beq.n	8003c34 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bda:	2b80      	cmp	r3, #128	@ 0x80
 8003bdc:	d109      	bne.n	8003bf2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bf0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	4413      	add	r3, r2
 8003c04:	3304      	adds	r3, #4
 8003c06:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	78db      	ldrb	r3, [r3, #3]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d108      	bne.n	8003c22 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	2200      	movs	r2, #0
 8003c14:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f009 fd73 	bl	800d708 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c2e:	461a      	mov	r2, r3
 8003c30:	2302      	movs	r3, #2
 8003c32:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d008      	beq.n	8003c50 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	2320      	movs	r3, #32
 8003c4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d009      	beq.n	8003c6e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c66:	461a      	mov	r2, r3
 8003c68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c6c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	3301      	adds	r3, #1
 8003c72:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c76:	085b      	lsrs	r3, r3, #1
 8003c78:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f47f af62 	bne.w	8003b46 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f007 f924 	bl	800aed4 <USB_ReadInterrupts>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c96:	f040 80db 	bne.w	8003e50 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f007 f945 	bl	800af2e <USB_ReadDevAllInEpInterrupt>
 8003ca4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003caa:	e0cd      	b.n	8003e48 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 80c2 	beq.w	8003e3c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	4611      	mov	r1, r2
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f007 f96b 	bl	800af9e <USB_ReadDevInEPInterrupt>
 8003cc8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d057      	beq.n	8003d84 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	2201      	movs	r2, #1
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ce8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69f9      	ldr	r1, [r7, #28]
 8003cf0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d04:	461a      	mov	r2, r3
 8003d06:	2301      	movs	r3, #1
 8003d08:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	799b      	ldrb	r3, [r3, #6]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d132      	bne.n	8003d78 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d16:	4613      	mov	r3, r2
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	3320      	adds	r3, #32
 8003d22:	6819      	ldr	r1, [r3, #0]
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d28:	4613      	mov	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4403      	add	r3, r0
 8003d32:	331c      	adds	r3, #28
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4419      	add	r1, r3
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4403      	add	r3, r0
 8003d46:	3320      	adds	r3, #32
 8003d48:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d113      	bne.n	8003d78 <HAL_PCD_IRQHandler+0x3a2>
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d54:	4613      	mov	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	3324      	adds	r3, #36	@ 0x24
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d108      	bne.n	8003d78 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6818      	ldr	r0, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d70:	461a      	mov	r2, r3
 8003d72:	2101      	movs	r1, #1
 8003d74:	f007 f974 	bl	800b060 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f009 fc3d 	bl	800d5fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d008      	beq.n	8003da0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	2308      	movs	r3, #8
 8003d9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f003 0310 	and.w	r3, r3, #16
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d008      	beq.n	8003dbc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003db6:	461a      	mov	r2, r3
 8003db8:	2310      	movs	r3, #16
 8003dba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d008      	beq.n	8003dd8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	2340      	movs	r3, #64	@ 0x40
 8003dd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d023      	beq.n	8003e2a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003de2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003de4:	6a38      	ldr	r0, [r7, #32]
 8003de6:	f006 f953 	bl	800a090 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dec:	4613      	mov	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4413      	add	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	3310      	adds	r3, #16
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	4413      	add	r3, r2
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	78db      	ldrb	r3, [r3, #3]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d108      	bne.n	8003e18 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	4619      	mov	r1, r3
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f009 fc8a 	bl	800d72c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e24:	461a      	mov	r2, r3
 8003e26:	2302      	movs	r3, #2
 8003e28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fcea 	bl	8004810 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3e:	3301      	adds	r3, #1
 8003e40:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e44:	085b      	lsrs	r3, r3, #1
 8003e46:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f47f af2e 	bne.w	8003cac <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f007 f83d 	bl	800aed4 <USB_ReadInterrupts>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e64:	d122      	bne.n	8003eac <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	69fa      	ldr	r2, [r7, #28]
 8003e70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d108      	bne.n	8003e96 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fef4 	bl	8004c7c <HAL_PCDEx_LPM_Callback>
 8003e94:	e002      	b.n	8003e9c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f009 fc28 	bl	800d6ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695a      	ldr	r2, [r3, #20]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003eaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f007 f80f 	bl	800aed4 <USB_ReadInterrupts>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ebc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ec0:	d112      	bne.n	8003ee8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d102      	bne.n	8003ed8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f009 fbe4 	bl	800d6a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695a      	ldr	r2, [r3, #20]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003ee6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f006 fff1 	bl	800aed4 <USB_ReadInterrupts>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ef8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003efc:	d121      	bne.n	8003f42 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695a      	ldr	r2, [r3, #20]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003f0c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d111      	bne.n	8003f3c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f26:	089b      	lsrs	r3, r3, #2
 8003f28:	f003 020f 	and.w	r2, r3, #15
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003f32:	2101      	movs	r1, #1
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fea1 	bl	8004c7c <HAL_PCDEx_LPM_Callback>
 8003f3a:	e002      	b.n	8003f42 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f009 fbaf 	bl	800d6a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f006 ffc4 	bl	800aed4 <USB_ReadInterrupts>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f56:	f040 80b7 	bne.w	80040c8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f68:	f023 0301 	bic.w	r3, r3, #1
 8003f6c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2110      	movs	r1, #16
 8003f74:	4618      	mov	r0, r3
 8003f76:	f006 f88b 	bl	800a090 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f7e:	e046      	b.n	800400e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f92:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fa4:	0151      	lsls	r1, r2, #5
 8003fa6:	69fa      	ldr	r2, [r7, #28]
 8003fa8:	440a      	add	r2, r1
 8003faa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003fb2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003fc6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fd8:	0151      	lsls	r1, r2, #5
 8003fda:	69fa      	ldr	r2, [r7, #28]
 8003fdc:	440a      	add	r2, r1
 8003fde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003fe2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003fe6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ff8:	0151      	lsls	r1, r2, #5
 8003ffa:	69fa      	ldr	r2, [r7, #28]
 8003ffc:	440a      	add	r2, r1
 8003ffe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004002:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004006:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800400a:	3301      	adds	r3, #1
 800400c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	791b      	ldrb	r3, [r3, #4]
 8004012:	461a      	mov	r2, r3
 8004014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004016:	4293      	cmp	r3, r2
 8004018:	d3b2      	bcc.n	8003f80 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	69fa      	ldr	r2, [r7, #28]
 8004024:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004028:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800402c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	7bdb      	ldrb	r3, [r3, #15]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d016      	beq.n	8004064 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800403c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004046:	f043 030b 	orr.w	r3, r3, #11
 800404a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800405c:	f043 030b 	orr.w	r3, r3, #11
 8004060:	6453      	str	r3, [r2, #68]	@ 0x44
 8004062:	e015      	b.n	8004090 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800406a:	695a      	ldr	r2, [r3, #20]
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004072:	4619      	mov	r1, r3
 8004074:	f242 032b 	movw	r3, #8235	@ 0x202b
 8004078:	4313      	orrs	r3, r2
 800407a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800408a:	f043 030b 	orr.w	r3, r3, #11
 800408e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69fa      	ldr	r2, [r7, #28]
 800409a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800409e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80040a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6818      	ldr	r0, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040b2:	461a      	mov	r2, r3
 80040b4:	f006 ffd4 	bl	800b060 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695a      	ldr	r2, [r3, #20]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80040c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f006 ff01 	bl	800aed4 <USB_ReadInterrupts>
 80040d2:	4603      	mov	r3, r0
 80040d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040dc:	d123      	bne.n	8004126 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f006 ff98 	bl	800b018 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f006 f848 	bl	800a182 <USB_GetDevSpeed>
 80040f2:	4603      	mov	r3, r0
 80040f4:	461a      	mov	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681c      	ldr	r4, [r3, #0]
 80040fe:	f001 fd9d 	bl	8005c3c <HAL_RCC_GetHCLKFreq>
 8004102:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004108:	461a      	mov	r2, r3
 800410a:	4620      	mov	r0, r4
 800410c:	f005 fd52 	bl	8009bb4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f009 fa9c 	bl	800d64e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695a      	ldr	r2, [r3, #20]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004124:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f006 fed2 	bl	800aed4 <USB_ReadInterrupts>
 8004130:	4603      	mov	r3, r0
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b08      	cmp	r3, #8
 8004138:	d10a      	bne.n	8004150 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f009 fa79 	bl	800d632 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695a      	ldr	r2, [r3, #20]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f002 0208 	and.w	r2, r2, #8
 800414e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f006 febd 	bl	800aed4 <USB_ReadInterrupts>
 800415a:	4603      	mov	r3, r0
 800415c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004160:	2b80      	cmp	r3, #128	@ 0x80
 8004162:	d123      	bne.n	80041ac <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004170:	2301      	movs	r3, #1
 8004172:	627b      	str	r3, [r7, #36]	@ 0x24
 8004174:	e014      	b.n	80041a0 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800417a:	4613      	mov	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	4413      	add	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d105      	bne.n	800419a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800418e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004190:	b2db      	uxtb	r3, r3
 8004192:	4619      	mov	r1, r3
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 fb0a 	bl	80047ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800419a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419c:	3301      	adds	r3, #1
 800419e:	627b      	str	r3, [r7, #36]	@ 0x24
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	791b      	ldrb	r3, [r3, #4]
 80041a4:	461a      	mov	r2, r3
 80041a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d3e4      	bcc.n	8004176 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f006 fe8f 	bl	800aed4 <USB_ReadInterrupts>
 80041b6:	4603      	mov	r3, r0
 80041b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041c0:	d13c      	bne.n	800423c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041c2:	2301      	movs	r3, #1
 80041c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80041c6:	e02b      	b.n	8004220 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80041c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041dc:	4613      	mov	r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	3318      	adds	r3, #24
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d115      	bne.n	800421a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80041ee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	da12      	bge.n	800421a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041f8:	4613      	mov	r3, r2
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	4413      	add	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	440b      	add	r3, r1
 8004202:	3317      	adds	r3, #23
 8004204:	2201      	movs	r2, #1
 8004206:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420a:	b2db      	uxtb	r3, r3
 800420c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004210:	b2db      	uxtb	r3, r3
 8004212:	4619      	mov	r1, r3
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 faca 	bl	80047ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	3301      	adds	r3, #1
 800421e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	791b      	ldrb	r3, [r3, #4]
 8004224:	461a      	mov	r2, r3
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	4293      	cmp	r3, r2
 800422a:	d3cd      	bcc.n	80041c8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695a      	ldr	r2, [r3, #20]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800423a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f006 fe47 	bl	800aed4 <USB_ReadInterrupts>
 8004246:	4603      	mov	r3, r0
 8004248:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800424c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004250:	d156      	bne.n	8004300 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004252:	2301      	movs	r3, #1
 8004254:	627b      	str	r3, [r7, #36]	@ 0x24
 8004256:	e045      	b.n	80042e4 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800426c:	4613      	mov	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d12e      	bne.n	80042de <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004280:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004282:	2b00      	cmp	r3, #0
 8004284:	da2b      	bge.n	80042de <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	0c1a      	lsrs	r2, r3, #16
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004290:	4053      	eors	r3, r2
 8004292:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004296:	2b00      	cmp	r3, #0
 8004298:	d121      	bne.n	80042de <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800429e:	4613      	mov	r3, r2
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	440b      	add	r3, r1
 80042a8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80042ac:	2201      	movs	r2, #1
 80042ae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10a      	bne.n	80042de <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042da:	6053      	str	r3, [r2, #4]
            break;
 80042dc:	e008      	b.n	80042f0 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e0:	3301      	adds	r3, #1
 80042e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	791b      	ldrb	r3, [r3, #4]
 80042e8:	461a      	mov	r2, r3
 80042ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d3b3      	bcc.n	8004258 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695a      	ldr	r2, [r3, #20]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80042fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f006 fde5 	bl	800aed4 <USB_ReadInterrupts>
 800430a:	4603      	mov	r3, r0
 800430c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004314:	d10a      	bne.n	800432c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f009 fa1a 	bl	800d750 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695a      	ldr	r2, [r3, #20]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800432a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f006 fdcf 	bl	800aed4 <USB_ReadInterrupts>
 8004336:	4603      	mov	r3, r0
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b04      	cmp	r3, #4
 800433e:	d115      	bne.n	800436c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f009 fa0a 	bl	800d76c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6859      	ldr	r1, [r3, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	430a      	orrs	r2, r1
 8004366:	605a      	str	r2, [r3, #4]
 8004368:	e000      	b.n	800436c <HAL_PCD_IRQHandler+0x996>
      return;
 800436a:	bf00      	nop
    }
  }
}
 800436c:	3734      	adds	r7, #52	@ 0x34
 800436e:	46bd      	mov	sp, r7
 8004370:	bd90      	pop	{r4, r7, pc}

08004372 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b082      	sub	sp, #8
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	460b      	mov	r3, r1
 800437c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004384:	2b01      	cmp	r3, #1
 8004386:	d101      	bne.n	800438c <HAL_PCD_SetAddress+0x1a>
 8004388:	2302      	movs	r3, #2
 800438a:	e012      	b.n	80043b2 <HAL_PCD_SetAddress+0x40>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	78fa      	ldrb	r2, [r7, #3]
 8004398:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	78fa      	ldrb	r2, [r7, #3]
 80043a0:	4611      	mov	r1, r2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f006 fd2e 	bl	800ae04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
 80043c2:	4608      	mov	r0, r1
 80043c4:	4611      	mov	r1, r2
 80043c6:	461a      	mov	r2, r3
 80043c8:	4603      	mov	r3, r0
 80043ca:	70fb      	strb	r3, [r7, #3]
 80043cc:	460b      	mov	r3, r1
 80043ce:	803b      	strh	r3, [r7, #0]
 80043d0:	4613      	mov	r3, r2
 80043d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	da0f      	bge.n	8004400 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	f003 020f 	and.w	r2, r3, #15
 80043e6:	4613      	mov	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	3310      	adds	r3, #16
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	4413      	add	r3, r2
 80043f4:	3304      	adds	r3, #4
 80043f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2201      	movs	r2, #1
 80043fc:	705a      	strb	r2, [r3, #1]
 80043fe:	e00f      	b.n	8004420 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	f003 020f 	and.w	r2, r3, #15
 8004406:	4613      	mov	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	4413      	add	r3, r2
 8004416:	3304      	adds	r3, #4
 8004418:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	b2da      	uxtb	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800442c:	883b      	ldrh	r3, [r7, #0]
 800442e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	78ba      	ldrb	r2, [r7, #2]
 800443a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	785b      	ldrb	r3, [r3, #1]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d004      	beq.n	800444e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	461a      	mov	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800444e:	78bb      	ldrb	r3, [r7, #2]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d102      	bne.n	800445a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_PCD_EP_Open+0xae>
 8004464:	2302      	movs	r3, #2
 8004466:	e00e      	b.n	8004486 <HAL_PCD_EP_Open+0xcc>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68f9      	ldr	r1, [r7, #12]
 8004476:	4618      	mov	r0, r3
 8004478:	f005 fea8 	bl	800a1cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004484:	7afb      	ldrb	r3, [r7, #11]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b084      	sub	sp, #16
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	460b      	mov	r3, r1
 8004498:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800449a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	da0f      	bge.n	80044c2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044a2:	78fb      	ldrb	r3, [r7, #3]
 80044a4:	f003 020f 	and.w	r2, r3, #15
 80044a8:	4613      	mov	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	4413      	add	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	3310      	adds	r3, #16
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	4413      	add	r3, r2
 80044b6:	3304      	adds	r3, #4
 80044b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2201      	movs	r2, #1
 80044be:	705a      	strb	r2, [r3, #1]
 80044c0:	e00f      	b.n	80044e2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044c2:	78fb      	ldrb	r3, [r7, #3]
 80044c4:	f003 020f 	and.w	r2, r3, #15
 80044c8:	4613      	mov	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	4413      	add	r3, r2
 80044d8:	3304      	adds	r3, #4
 80044da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80044e2:	78fb      	ldrb	r3, [r7, #3]
 80044e4:	f003 030f 	and.w	r3, r3, #15
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <HAL_PCD_EP_Close+0x6e>
 80044f8:	2302      	movs	r3, #2
 80044fa:	e00e      	b.n	800451a <HAL_PCD_EP_Close+0x8c>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68f9      	ldr	r1, [r7, #12]
 800450a:	4618      	mov	r0, r3
 800450c:	f005 fee6 	bl	800a2dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b086      	sub	sp, #24
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	603b      	str	r3, [r7, #0]
 800452e:	460b      	mov	r3, r1
 8004530:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004532:	7afb      	ldrb	r3, [r7, #11]
 8004534:	f003 020f 	and.w	r2, r3, #15
 8004538:	4613      	mov	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	4413      	add	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	4413      	add	r3, r2
 8004548:	3304      	adds	r3, #4
 800454a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2200      	movs	r2, #0
 800455c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2200      	movs	r2, #0
 8004562:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004564:	7afb      	ldrb	r3, [r7, #11]
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	b2da      	uxtb	r2, r3
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	799b      	ldrb	r3, [r3, #6]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d102      	bne.n	800457e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	799b      	ldrb	r3, [r3, #6]
 8004586:	461a      	mov	r2, r3
 8004588:	6979      	ldr	r1, [r7, #20]
 800458a:	f005 ff83 	bl	800a494 <USB_EPStartXfer>

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	f003 020f 	and.w	r2, r3, #15
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	4613      	mov	r3, r2
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80045ba:	681b      	ldr	r3, [r3, #0]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	607a      	str	r2, [r7, #4]
 80045d2:	603b      	str	r3, [r7, #0]
 80045d4:	460b      	mov	r3, r1
 80045d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045d8:	7afb      	ldrb	r3, [r7, #11]
 80045da:	f003 020f 	and.w	r2, r3, #15
 80045de:	4613      	mov	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	3310      	adds	r3, #16
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4413      	add	r3, r2
 80045ec:	3304      	adds	r3, #4
 80045ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	2200      	movs	r2, #0
 8004600:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2201      	movs	r2, #1
 8004606:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004608:	7afb      	ldrb	r3, [r7, #11]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	b2da      	uxtb	r2, r3
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	799b      	ldrb	r3, [r3, #6]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d102      	bne.n	8004622 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	799b      	ldrb	r3, [r3, #6]
 800462a:	461a      	mov	r2, r3
 800462c:	6979      	ldr	r1, [r7, #20]
 800462e:	f005 ff31 	bl	800a494 <USB_EPStartXfer>

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	460b      	mov	r3, r1
 8004646:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	7912      	ldrb	r2, [r2, #4]
 8004652:	4293      	cmp	r3, r2
 8004654:	d901      	bls.n	800465a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e04f      	b.n	80046fa <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800465a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800465e:	2b00      	cmp	r3, #0
 8004660:	da0f      	bge.n	8004682 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004662:	78fb      	ldrb	r3, [r7, #3]
 8004664:	f003 020f 	and.w	r2, r3, #15
 8004668:	4613      	mov	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	4413      	add	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	3310      	adds	r3, #16
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	4413      	add	r3, r2
 8004676:	3304      	adds	r3, #4
 8004678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	705a      	strb	r2, [r3, #1]
 8004680:	e00d      	b.n	800469e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004682:	78fa      	ldrb	r2, [r7, #3]
 8004684:	4613      	mov	r3, r2
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	4413      	add	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	4413      	add	r3, r2
 8004694:	3304      	adds	r3, #4
 8004696:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046a4:	78fb      	ldrb	r3, [r7, #3]
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <HAL_PCD_EP_SetStall+0x82>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e01d      	b.n	80046fa <HAL_PCD_EP_SetStall+0xbe>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68f9      	ldr	r1, [r7, #12]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f006 fac5 	bl	800ac5c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046d2:	78fb      	ldrb	r3, [r7, #3]
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d109      	bne.n	80046f0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	7999      	ldrb	r1, [r3, #6]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046ea:	461a      	mov	r2, r3
 80046ec:	f006 fcb8 	bl	800b060 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b084      	sub	sp, #16
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	460b      	mov	r3, r1
 800470c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800470e:	78fb      	ldrb	r3, [r7, #3]
 8004710:	f003 030f 	and.w	r3, r3, #15
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	7912      	ldrb	r2, [r2, #4]
 8004718:	4293      	cmp	r3, r2
 800471a:	d901      	bls.n	8004720 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e042      	b.n	80047a6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004720:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004724:	2b00      	cmp	r3, #0
 8004726:	da0f      	bge.n	8004748 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	f003 020f 	and.w	r2, r3, #15
 800472e:	4613      	mov	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	3310      	adds	r3, #16
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	4413      	add	r3, r2
 800473c:	3304      	adds	r3, #4
 800473e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	705a      	strb	r2, [r3, #1]
 8004746:	e00f      	b.n	8004768 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	f003 020f 	and.w	r2, r3, #15
 800474e:	4613      	mov	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	4413      	add	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	4413      	add	r3, r2
 800475e:	3304      	adds	r3, #4
 8004760:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800476e:	78fb      	ldrb	r3, [r7, #3]
 8004770:	f003 030f 	and.w	r3, r3, #15
 8004774:	b2da      	uxtb	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_PCD_EP_ClrStall+0x86>
 8004784:	2302      	movs	r3, #2
 8004786:	e00e      	b.n	80047a6 <HAL_PCD_EP_ClrStall+0xa4>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68f9      	ldr	r1, [r7, #12]
 8004796:	4618      	mov	r0, r3
 8004798:	f006 face 	bl	800ad38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b084      	sub	sp, #16
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	460b      	mov	r3, r1
 80047b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80047ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	da0c      	bge.n	80047dc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047c2:	78fb      	ldrb	r3, [r7, #3]
 80047c4:	f003 020f 	and.w	r2, r3, #15
 80047c8:	4613      	mov	r3, r2
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	4413      	add	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	3310      	adds	r3, #16
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	4413      	add	r3, r2
 80047d6:	3304      	adds	r3, #4
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	e00c      	b.n	80047f6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047dc:	78fb      	ldrb	r3, [r7, #3]
 80047de:	f003 020f 	and.w	r2, r3, #15
 80047e2:	4613      	mov	r3, r2
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	4413      	add	r3, r2
 80047f2:	3304      	adds	r3, #4
 80047f4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68f9      	ldr	r1, [r7, #12]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f006 f8ed 	bl	800a9dc <USB_EPStopXfer>
 8004802:	4603      	mov	r3, r0
 8004804:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004806:	7afb      	ldrb	r3, [r7, #11]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b08a      	sub	sp, #40	@ 0x28
 8004814:	af02      	add	r7, sp, #8
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	4613      	mov	r3, r2
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4413      	add	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	3310      	adds	r3, #16
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	4413      	add	r3, r2
 8004834:	3304      	adds	r3, #4
 8004836:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	695a      	ldr	r2, [r3, #20]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	429a      	cmp	r2, r3
 8004842:	d901      	bls.n	8004848 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e06b      	b.n	8004920 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	69fa      	ldr	r2, [r7, #28]
 800485a:	429a      	cmp	r2, r3
 800485c:	d902      	bls.n	8004864 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	3303      	adds	r3, #3
 8004868:	089b      	lsrs	r3, r3, #2
 800486a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800486c:	e02a      	b.n	80048c4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	691a      	ldr	r2, [r3, #16]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	69fa      	ldr	r2, [r7, #28]
 8004880:	429a      	cmp	r2, r3
 8004882:	d902      	bls.n	800488a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	3303      	adds	r3, #3
 800488e:	089b      	lsrs	r3, r3, #2
 8004890:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	68d9      	ldr	r1, [r3, #12]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	b2da      	uxtb	r2, r3
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	4603      	mov	r3, r0
 80048a6:	6978      	ldr	r0, [r7, #20]
 80048a8:	f006 f942 	bl	800ab30 <USB_WritePacket>

    ep->xfer_buff  += len;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	441a      	add	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	695a      	ldr	r2, [r3, #20]
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	441a      	add	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d809      	bhi.n	80048ee <PCD_WriteEmptyTxFifo+0xde>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	695a      	ldr	r2, [r3, #20]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d203      	bcs.n	80048ee <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1bf      	bne.n	800486e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	691a      	ldr	r2, [r3, #16]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d811      	bhi.n	800491e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	2201      	movs	r2, #1
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800490e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	43db      	mvns	r3, r3
 8004914:	6939      	ldr	r1, [r7, #16]
 8004916:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800491a:	4013      	ands	r3, r2
 800491c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3720      	adds	r7, #32
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b088      	sub	sp, #32
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	333c      	adds	r3, #60	@ 0x3c
 8004940:	3304      	adds	r3, #4
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	799b      	ldrb	r3, [r3, #6]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d17b      	bne.n	8004a56 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b00      	cmp	r3, #0
 8004966:	d015      	beq.n	8004994 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	4a61      	ldr	r2, [pc, #388]	@ (8004af0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	f240 80b9 	bls.w	8004ae4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 80b3 	beq.w	8004ae4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	4413      	add	r3, r2
 8004986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800498a:	461a      	mov	r2, r3
 800498c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004990:	6093      	str	r3, [r2, #8]
 8004992:	e0a7      	b.n	8004ae4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b00      	cmp	r3, #0
 800499c:	d009      	beq.n	80049b2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049aa:	461a      	mov	r2, r3
 80049ac:	2320      	movs	r3, #32
 80049ae:	6093      	str	r3, [r2, #8]
 80049b0:	e098      	b.n	8004ae4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f040 8093 	bne.w	8004ae4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	4a4b      	ldr	r2, [pc, #300]	@ (8004af0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d90f      	bls.n	80049e6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049dc:	461a      	mov	r2, r3
 80049de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049e2:	6093      	str	r3, [r2, #8]
 80049e4:	e07e      	b.n	8004ae4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	4613      	mov	r3, r2
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	4413      	add	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	4413      	add	r3, r2
 80049f8:	3304      	adds	r3, #4
 80049fa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a1a      	ldr	r2, [r3, #32]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	0159      	lsls	r1, r3, #5
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	440b      	add	r3, r1
 8004a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a12:	1ad2      	subs	r2, r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d114      	bne.n	8004a48 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6818      	ldr	r0, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a30:	461a      	mov	r2, r3
 8004a32:	2101      	movs	r1, #1
 8004a34:	f006 fb14 	bl	800b060 <USB_EP0_OutStart>
 8004a38:	e006      	b.n	8004a48 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	441a      	add	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f008 fdba 	bl	800d5c8 <HAL_PCD_DataOutStageCallback>
 8004a54:	e046      	b.n	8004ae4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	4a26      	ldr	r2, [pc, #152]	@ (8004af4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d124      	bne.n	8004aa8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a74:	461a      	mov	r2, r3
 8004a76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a7a:	6093      	str	r3, [r2, #8]
 8004a7c:	e032      	b.n	8004ae4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f003 0320 	and.w	r3, r3, #32
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d008      	beq.n	8004a9a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a94:	461a      	mov	r2, r3
 8004a96:	2320      	movs	r3, #32
 8004a98:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f008 fd91 	bl	800d5c8 <HAL_PCD_DataOutStageCallback>
 8004aa6:	e01d      	b.n	8004ae4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d114      	bne.n	8004ad8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
 8004abc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d108      	bne.n	8004ad8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6818      	ldr	r0, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	f006 fac4 	bl	800b060 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	4619      	mov	r1, r3
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f008 fd72 	bl	800d5c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3720      	adds	r7, #32
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	4f54300a 	.word	0x4f54300a
 8004af4:	4f54310a 	.word	0x4f54310a

08004af8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	333c      	adds	r3, #60	@ 0x3c
 8004b10:	3304      	adds	r3, #4
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4a15      	ldr	r2, [pc, #84]	@ (8004b80 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d90e      	bls.n	8004b4c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d009      	beq.n	8004b4c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b44:	461a      	mov	r2, r3
 8004b46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b4a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f008 fd29 	bl	800d5a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4a0a      	ldr	r2, [pc, #40]	@ (8004b80 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d90c      	bls.n	8004b74 <PCD_EP_OutSetupPacket_int+0x7c>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	799b      	ldrb	r3, [r3, #6]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d108      	bne.n	8004b74 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6818      	ldr	r0, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	2101      	movs	r1, #1
 8004b70:	f006 fa76 	bl	800b060 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3718      	adds	r7, #24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	4f54300a 	.word	0x4f54300a

08004b84 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	70fb      	strb	r3, [r7, #3]
 8004b90:	4613      	mov	r3, r2
 8004b92:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004b9c:	78fb      	ldrb	r3, [r7, #3]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d107      	bne.n	8004bb2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004ba2:	883b      	ldrh	r3, [r7, #0]
 8004ba4:	0419      	lsls	r1, r3, #16
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	629a      	str	r2, [r3, #40]	@ 0x28
 8004bb0:	e028      	b.n	8004c04 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb8:	0c1b      	lsrs	r3, r3, #16
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	73fb      	strb	r3, [r7, #15]
 8004bc4:	e00d      	b.n	8004be2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
 8004bcc:	3340      	adds	r3, #64	@ 0x40
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	0c1b      	lsrs	r3, r3, #16
 8004bd6:	68ba      	ldr	r2, [r7, #8]
 8004bd8:	4413      	add	r3, r2
 8004bda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
 8004bde:	3301      	adds	r3, #1
 8004be0:	73fb      	strb	r3, [r7, #15]
 8004be2:	7bfa      	ldrb	r2, [r7, #15]
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	3b01      	subs	r3, #1
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d3ec      	bcc.n	8004bc6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004bec:	883b      	ldrh	r3, [r7, #0]
 8004bee:	0418      	lsls	r0, r3, #16
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6819      	ldr	r1, [r3, #0]
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	4302      	orrs	r2, r0
 8004bfc:	3340      	adds	r3, #64	@ 0x40
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	440b      	add	r3, r1
 8004c02:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	887a      	ldrh	r2, [r7, #2]
 8004c24:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c62:	4b05      	ldr	r3, [pc, #20]	@ (8004c78 <HAL_PCDEx_ActivateLPM+0x44>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	10000003 	.word	0x10000003

08004c7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004c9c:	4b19      	ldr	r3, [pc, #100]	@ (8004d04 <HAL_PWREx_ConfigSupply+0x70>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d00a      	beq.n	8004cbe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004ca8:	4b16      	ldr	r3, [pc, #88]	@ (8004d04 <HAL_PWREx_ConfigSupply+0x70>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d001      	beq.n	8004cba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e01f      	b.n	8004cfa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	e01d      	b.n	8004cfa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004cbe:	4b11      	ldr	r3, [pc, #68]	@ (8004d04 <HAL_PWREx_ConfigSupply+0x70>)
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f023 0207 	bic.w	r2, r3, #7
 8004cc6:	490f      	ldr	r1, [pc, #60]	@ (8004d04 <HAL_PWREx_ConfigSupply+0x70>)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004cce:	f7fd fae5 	bl	800229c <HAL_GetTick>
 8004cd2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004cd4:	e009      	b.n	8004cea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004cd6:	f7fd fae1 	bl	800229c <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ce4:	d901      	bls.n	8004cea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e007      	b.n	8004cfa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004cea:	4b06      	ldr	r3, [pc, #24]	@ (8004d04 <HAL_PWREx_ConfigSupply+0x70>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cf6:	d1ee      	bne.n	8004cd6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	58024800 	.word	0x58024800

08004d08 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004d0c:	4b05      	ldr	r3, [pc, #20]	@ (8004d24 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	4a04      	ldr	r2, [pc, #16]	@ (8004d24 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d16:	60d3      	str	r3, [r2, #12]
}
 8004d18:	bf00      	nop
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	58024800 	.word	0x58024800

08004d28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b08c      	sub	sp, #48	@ 0x30
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d102      	bne.n	8004d3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	f000 bc48 	b.w	80055cc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 8088 	beq.w	8004e5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d4a:	4b99      	ldr	r3, [pc, #612]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d54:	4b96      	ldr	r3, [pc, #600]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d58:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d5c:	2b10      	cmp	r3, #16
 8004d5e:	d007      	beq.n	8004d70 <HAL_RCC_OscConfig+0x48>
 8004d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d62:	2b18      	cmp	r3, #24
 8004d64:	d111      	bne.n	8004d8a <HAL_RCC_OscConfig+0x62>
 8004d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d10c      	bne.n	8004d8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d70:	4b8f      	ldr	r3, [pc, #572]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d06d      	beq.n	8004e58 <HAL_RCC_OscConfig+0x130>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d169      	bne.n	8004e58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	f000 bc21 	b.w	80055cc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d92:	d106      	bne.n	8004da2 <HAL_RCC_OscConfig+0x7a>
 8004d94:	4b86      	ldr	r3, [pc, #536]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a85      	ldr	r2, [pc, #532]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004d9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d9e:	6013      	str	r3, [r2, #0]
 8004da0:	e02e      	b.n	8004e00 <HAL_RCC_OscConfig+0xd8>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10c      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x9c>
 8004daa:	4b81      	ldr	r3, [pc, #516]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a80      	ldr	r2, [pc, #512]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004db0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	4b7e      	ldr	r3, [pc, #504]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a7d      	ldr	r2, [pc, #500]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004dbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	e01d      	b.n	8004e00 <HAL_RCC_OscConfig+0xd8>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dcc:	d10c      	bne.n	8004de8 <HAL_RCC_OscConfig+0xc0>
 8004dce:	4b78      	ldr	r3, [pc, #480]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a77      	ldr	r2, [pc, #476]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004dd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	4b75      	ldr	r3, [pc, #468]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a74      	ldr	r2, [pc, #464]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	e00b      	b.n	8004e00 <HAL_RCC_OscConfig+0xd8>
 8004de8:	4b71      	ldr	r3, [pc, #452]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a70      	ldr	r2, [pc, #448]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004dee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004df2:	6013      	str	r3, [r2, #0]
 8004df4:	4b6e      	ldr	r3, [pc, #440]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a6d      	ldr	r2, [pc, #436]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004dfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d013      	beq.n	8004e30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e08:	f7fd fa48 	bl	800229c <HAL_GetTick>
 8004e0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e10:	f7fd fa44 	bl	800229c <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b64      	cmp	r3, #100	@ 0x64
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e3d4      	b.n	80055cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e22:	4b63      	ldr	r3, [pc, #396]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0f0      	beq.n	8004e10 <HAL_RCC_OscConfig+0xe8>
 8004e2e:	e014      	b.n	8004e5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fd fa34 	bl	800229c <HAL_GetTick>
 8004e34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e38:	f7fd fa30 	bl	800229c <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b64      	cmp	r3, #100	@ 0x64
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e3c0      	b.n	80055cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e4a:	4b59      	ldr	r3, [pc, #356]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f0      	bne.n	8004e38 <HAL_RCC_OscConfig+0x110>
 8004e56:	e000      	b.n	8004e5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 80ca 	beq.w	8004ffc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e68:	4b51      	ldr	r3, [pc, #324]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e70:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e72:	4b4f      	ldr	r3, [pc, #316]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e76:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d007      	beq.n	8004e8e <HAL_RCC_OscConfig+0x166>
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	2b18      	cmp	r3, #24
 8004e82:	d156      	bne.n	8004f32 <HAL_RCC_OscConfig+0x20a>
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	f003 0303 	and.w	r3, r3, #3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d151      	bne.n	8004f32 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e8e:	4b48      	ldr	r3, [pc, #288]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d005      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x17e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e392      	b.n	80055cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ea6:	4b42      	ldr	r3, [pc, #264]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f023 0219 	bic.w	r2, r3, #25
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	493f      	ldr	r1, [pc, #252]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb8:	f7fd f9f0 	bl	800229c <HAL_GetTick>
 8004ebc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ebe:	e008      	b.n	8004ed2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ec0:	f7fd f9ec 	bl	800229c <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e37c      	b.n	80055cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ed2:	4b37      	ldr	r3, [pc, #220]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0f0      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ede:	f7fd fa0d 	bl	80022fc <HAL_GetREVID>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d817      	bhi.n	8004f1c <HAL_RCC_OscConfig+0x1f4>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	2b40      	cmp	r3, #64	@ 0x40
 8004ef2:	d108      	bne.n	8004f06 <HAL_RCC_OscConfig+0x1de>
 8004ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004efc:	4a2c      	ldr	r2, [pc, #176]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f02:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f04:	e07a      	b.n	8004ffc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f06:	4b2a      	ldr	r3, [pc, #168]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	031b      	lsls	r3, r3, #12
 8004f14:	4926      	ldr	r1, [pc, #152]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f1a:	e06f      	b.n	8004ffc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f1c:	4b24      	ldr	r3, [pc, #144]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	061b      	lsls	r3, r3, #24
 8004f2a:	4921      	ldr	r1, [pc, #132]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f30:	e064      	b.n	8004ffc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d047      	beq.n	8004fca <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f023 0219 	bic.w	r2, r3, #25
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	491a      	ldr	r1, [pc, #104]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4c:	f7fd f9a6 	bl	800229c <HAL_GetTick>
 8004f50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f54:	f7fd f9a2 	bl	800229c <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e332      	b.n	80055cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f66:	4b12      	ldr	r3, [pc, #72]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0f0      	beq.n	8004f54 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f72:	f7fd f9c3 	bl	80022fc <HAL_GetREVID>
 8004f76:	4603      	mov	r3, r0
 8004f78:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d819      	bhi.n	8004fb4 <HAL_RCC_OscConfig+0x28c>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	2b40      	cmp	r3, #64	@ 0x40
 8004f86:	d108      	bne.n	8004f9a <HAL_RCC_OscConfig+0x272>
 8004f88:	4b09      	ldr	r3, [pc, #36]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004f90:	4a07      	ldr	r2, [pc, #28]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004f92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f96:	6053      	str	r3, [r2, #4]
 8004f98:	e030      	b.n	8004ffc <HAL_RCC_OscConfig+0x2d4>
 8004f9a:	4b05      	ldr	r3, [pc, #20]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	031b      	lsls	r3, r3, #12
 8004fa8:	4901      	ldr	r1, [pc, #4]	@ (8004fb0 <HAL_RCC_OscConfig+0x288>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	604b      	str	r3, [r1, #4]
 8004fae:	e025      	b.n	8004ffc <HAL_RCC_OscConfig+0x2d4>
 8004fb0:	58024400 	.word	0x58024400
 8004fb4:	4b9a      	ldr	r3, [pc, #616]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	061b      	lsls	r3, r3, #24
 8004fc2:	4997      	ldr	r1, [pc, #604]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	604b      	str	r3, [r1, #4]
 8004fc8:	e018      	b.n	8004ffc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fca:	4b95      	ldr	r3, [pc, #596]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a94      	ldr	r2, [pc, #592]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8004fd0:	f023 0301 	bic.w	r3, r3, #1
 8004fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd6:	f7fd f961 	bl	800229c <HAL_GetTick>
 8004fda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fde:	f7fd f95d 	bl	800229c <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e2ed      	b.n	80055cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ff0:	4b8b      	ldr	r3, [pc, #556]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1f0      	bne.n	8004fde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 80a9 	beq.w	800515c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800500a:	4b85      	ldr	r3, [pc, #532]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005012:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005014:	4b82      	ldr	r3, [pc, #520]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8005016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005018:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	2b08      	cmp	r3, #8
 800501e:	d007      	beq.n	8005030 <HAL_RCC_OscConfig+0x308>
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	2b18      	cmp	r3, #24
 8005024:	d13a      	bne.n	800509c <HAL_RCC_OscConfig+0x374>
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f003 0303 	and.w	r3, r3, #3
 800502c:	2b01      	cmp	r3, #1
 800502e:	d135      	bne.n	800509c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005030:	4b7b      	ldr	r3, [pc, #492]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <HAL_RCC_OscConfig+0x320>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	2b80      	cmp	r3, #128	@ 0x80
 8005042:	d001      	beq.n	8005048 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e2c1      	b.n	80055cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005048:	f7fd f958 	bl	80022fc <HAL_GetREVID>
 800504c:	4603      	mov	r3, r0
 800504e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005052:	4293      	cmp	r3, r2
 8005054:	d817      	bhi.n	8005086 <HAL_RCC_OscConfig+0x35e>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	2b20      	cmp	r3, #32
 800505c:	d108      	bne.n	8005070 <HAL_RCC_OscConfig+0x348>
 800505e:	4b70      	ldr	r3, [pc, #448]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005066:	4a6e      	ldr	r2, [pc, #440]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8005068:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800506c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800506e:	e075      	b.n	800515c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005070:	4b6b      	ldr	r3, [pc, #428]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	069b      	lsls	r3, r3, #26
 800507e:	4968      	ldr	r1, [pc, #416]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8005080:	4313      	orrs	r3, r2
 8005082:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005084:	e06a      	b.n	800515c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005086:	4b66      	ldr	r3, [pc, #408]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	061b      	lsls	r3, r3, #24
 8005094:	4962      	ldr	r1, [pc, #392]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8005096:	4313      	orrs	r3, r2
 8005098:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800509a:	e05f      	b.n	800515c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d042      	beq.n	800512a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80050a4:	4b5e      	ldr	r3, [pc, #376]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a5d      	ldr	r2, [pc, #372]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 80050aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b0:	f7fd f8f4 	bl	800229c <HAL_GetTick>
 80050b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80050b8:	f7fd f8f0 	bl	800229c <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e280      	b.n	80055cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050ca:	4b55      	ldr	r3, [pc, #340]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0f0      	beq.n	80050b8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050d6:	f7fd f911 	bl	80022fc <HAL_GetREVID>
 80050da:	4603      	mov	r3, r0
 80050dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d817      	bhi.n	8005114 <HAL_RCC_OscConfig+0x3ec>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d108      	bne.n	80050fe <HAL_RCC_OscConfig+0x3d6>
 80050ec:	4b4c      	ldr	r3, [pc, #304]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80050f4:	4a4a      	ldr	r2, [pc, #296]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 80050f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050fa:	6053      	str	r3, [r2, #4]
 80050fc:	e02e      	b.n	800515c <HAL_RCC_OscConfig+0x434>
 80050fe:	4b48      	ldr	r3, [pc, #288]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	069b      	lsls	r3, r3, #26
 800510c:	4944      	ldr	r1, [pc, #272]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 800510e:	4313      	orrs	r3, r2
 8005110:	604b      	str	r3, [r1, #4]
 8005112:	e023      	b.n	800515c <HAL_RCC_OscConfig+0x434>
 8005114:	4b42      	ldr	r3, [pc, #264]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	061b      	lsls	r3, r3, #24
 8005122:	493f      	ldr	r1, [pc, #252]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8005124:	4313      	orrs	r3, r2
 8005126:	60cb      	str	r3, [r1, #12]
 8005128:	e018      	b.n	800515c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800512a:	4b3d      	ldr	r3, [pc, #244]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a3c      	ldr	r2, [pc, #240]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8005130:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005136:	f7fd f8b1 	bl	800229c <HAL_GetTick>
 800513a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800513c:	e008      	b.n	8005150 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800513e:	f7fd f8ad 	bl	800229c <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e23d      	b.n	80055cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005150:	4b33      	ldr	r3, [pc, #204]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1f0      	bne.n	800513e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b00      	cmp	r3, #0
 8005166:	d036      	beq.n	80051d6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d019      	beq.n	80051a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005170:	4b2b      	ldr	r3, [pc, #172]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8005172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005174:	4a2a      	ldr	r2, [pc, #168]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8005176:	f043 0301 	orr.w	r3, r3, #1
 800517a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517c:	f7fd f88e 	bl	800229c <HAL_GetTick>
 8005180:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005184:	f7fd f88a 	bl	800229c <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e21a      	b.n	80055cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005196:	4b22      	ldr	r3, [pc, #136]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8005198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0f0      	beq.n	8005184 <HAL_RCC_OscConfig+0x45c>
 80051a2:	e018      	b.n	80051d6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051a4:	4b1e      	ldr	r3, [pc, #120]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 80051a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 80051aa:	f023 0301 	bic.w	r3, r3, #1
 80051ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b0:	f7fd f874 	bl	800229c <HAL_GetTick>
 80051b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051b8:	f7fd f870 	bl	800229c <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e200      	b.n	80055cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051ca:	4b15      	ldr	r3, [pc, #84]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 80051cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1f0      	bne.n	80051b8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0320 	and.w	r3, r3, #32
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d039      	beq.n	8005256 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d01c      	beq.n	8005224 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a0c      	ldr	r2, [pc, #48]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 80051f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80051f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80051f6:	f7fd f851 	bl	800229c <HAL_GetTick>
 80051fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80051fc:	e008      	b.n	8005210 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051fe:	f7fd f84d 	bl	800229c <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e1dd      	b.n	80055cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005210:	4b03      	ldr	r3, [pc, #12]	@ (8005220 <HAL_RCC_OscConfig+0x4f8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0f0      	beq.n	80051fe <HAL_RCC_OscConfig+0x4d6>
 800521c:	e01b      	b.n	8005256 <HAL_RCC_OscConfig+0x52e>
 800521e:	bf00      	nop
 8005220:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005224:	4b9b      	ldr	r3, [pc, #620]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a9a      	ldr	r2, [pc, #616]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 800522a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800522e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005230:	f7fd f834 	bl	800229c <HAL_GetTick>
 8005234:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005238:	f7fd f830 	bl	800229c <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e1c0      	b.n	80055cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800524a:	4b92      	ldr	r3, [pc, #584]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f0      	bne.n	8005238 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0304 	and.w	r3, r3, #4
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 8081 	beq.w	8005366 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005264:	4b8c      	ldr	r3, [pc, #560]	@ (8005498 <HAL_RCC_OscConfig+0x770>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a8b      	ldr	r2, [pc, #556]	@ (8005498 <HAL_RCC_OscConfig+0x770>)
 800526a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800526e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005270:	f7fd f814 	bl	800229c <HAL_GetTick>
 8005274:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005278:	f7fd f810 	bl	800229c <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b64      	cmp	r3, #100	@ 0x64
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e1a0      	b.n	80055cc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800528a:	4b83      	ldr	r3, [pc, #524]	@ (8005498 <HAL_RCC_OscConfig+0x770>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0f0      	beq.n	8005278 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d106      	bne.n	80052ac <HAL_RCC_OscConfig+0x584>
 800529e:	4b7d      	ldr	r3, [pc, #500]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 80052a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a2:	4a7c      	ldr	r2, [pc, #496]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 80052a4:	f043 0301 	orr.w	r3, r3, #1
 80052a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80052aa:	e02d      	b.n	8005308 <HAL_RCC_OscConfig+0x5e0>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10c      	bne.n	80052ce <HAL_RCC_OscConfig+0x5a6>
 80052b4:	4b77      	ldr	r3, [pc, #476]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 80052b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b8:	4a76      	ldr	r2, [pc, #472]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 80052ba:	f023 0301 	bic.w	r3, r3, #1
 80052be:	6713      	str	r3, [r2, #112]	@ 0x70
 80052c0:	4b74      	ldr	r3, [pc, #464]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 80052c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c4:	4a73      	ldr	r2, [pc, #460]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 80052c6:	f023 0304 	bic.w	r3, r3, #4
 80052ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80052cc:	e01c      	b.n	8005308 <HAL_RCC_OscConfig+0x5e0>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2b05      	cmp	r3, #5
 80052d4:	d10c      	bne.n	80052f0 <HAL_RCC_OscConfig+0x5c8>
 80052d6:	4b6f      	ldr	r3, [pc, #444]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 80052d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052da:	4a6e      	ldr	r2, [pc, #440]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 80052dc:	f043 0304 	orr.w	r3, r3, #4
 80052e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80052e2:	4b6c      	ldr	r3, [pc, #432]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 80052e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e6:	4a6b      	ldr	r2, [pc, #428]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 80052e8:	f043 0301 	orr.w	r3, r3, #1
 80052ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ee:	e00b      	b.n	8005308 <HAL_RCC_OscConfig+0x5e0>
 80052f0:	4b68      	ldr	r3, [pc, #416]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 80052f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f4:	4a67      	ldr	r2, [pc, #412]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 80052f6:	f023 0301 	bic.w	r3, r3, #1
 80052fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80052fc:	4b65      	ldr	r3, [pc, #404]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 80052fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005300:	4a64      	ldr	r2, [pc, #400]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 8005302:	f023 0304 	bic.w	r3, r3, #4
 8005306:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d015      	beq.n	800533c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005310:	f7fc ffc4 	bl	800229c <HAL_GetTick>
 8005314:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005316:	e00a      	b.n	800532e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005318:	f7fc ffc0 	bl	800229c <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005326:	4293      	cmp	r3, r2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e14e      	b.n	80055cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800532e:	4b59      	ldr	r3, [pc, #356]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 8005330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0ee      	beq.n	8005318 <HAL_RCC_OscConfig+0x5f0>
 800533a:	e014      	b.n	8005366 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800533c:	f7fc ffae 	bl	800229c <HAL_GetTick>
 8005340:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005342:	e00a      	b.n	800535a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005344:	f7fc ffaa 	bl	800229c <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005352:	4293      	cmp	r3, r2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e138      	b.n	80055cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800535a:	4b4e      	ldr	r3, [pc, #312]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 800535c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1ee      	bne.n	8005344 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 812d 	beq.w	80055ca <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005370:	4b48      	ldr	r3, [pc, #288]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005378:	2b18      	cmp	r3, #24
 800537a:	f000 80bd 	beq.w	80054f8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005382:	2b02      	cmp	r3, #2
 8005384:	f040 809e 	bne.w	80054c4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005388:	4b42      	ldr	r3, [pc, #264]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a41      	ldr	r2, [pc, #260]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 800538e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005394:	f7fc ff82 	bl	800229c <HAL_GetTick>
 8005398:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800539c:	f7fc ff7e 	bl	800229c <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e10e      	b.n	80055cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053ae:	4b39      	ldr	r3, [pc, #228]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1f0      	bne.n	800539c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053ba:	4b36      	ldr	r3, [pc, #216]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 80053bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053be:	4b37      	ldr	r3, [pc, #220]	@ (800549c <HAL_RCC_OscConfig+0x774>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80053ca:	0112      	lsls	r2, r2, #4
 80053cc:	430a      	orrs	r2, r1
 80053ce:	4931      	ldr	r1, [pc, #196]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d8:	3b01      	subs	r3, #1
 80053da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e2:	3b01      	subs	r3, #1
 80053e4:	025b      	lsls	r3, r3, #9
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ee:	3b01      	subs	r3, #1
 80053f0:	041b      	lsls	r3, r3, #16
 80053f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053fc:	3b01      	subs	r3, #1
 80053fe:	061b      	lsls	r3, r3, #24
 8005400:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005404:	4923      	ldr	r1, [pc, #140]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 8005406:	4313      	orrs	r3, r2
 8005408:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800540a:	4b22      	ldr	r3, [pc, #136]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 800540c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540e:	4a21      	ldr	r2, [pc, #132]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 8005410:	f023 0301 	bic.w	r3, r3, #1
 8005414:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005416:	4b1f      	ldr	r3, [pc, #124]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 8005418:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800541a:	4b21      	ldr	r3, [pc, #132]	@ (80054a0 <HAL_RCC_OscConfig+0x778>)
 800541c:	4013      	ands	r3, r2
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005422:	00d2      	lsls	r2, r2, #3
 8005424:	491b      	ldr	r1, [pc, #108]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 8005426:	4313      	orrs	r3, r2
 8005428:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800542a:	4b1a      	ldr	r3, [pc, #104]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 800542c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542e:	f023 020c 	bic.w	r2, r3, #12
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005436:	4917      	ldr	r1, [pc, #92]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 8005438:	4313      	orrs	r3, r2
 800543a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800543c:	4b15      	ldr	r3, [pc, #84]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 800543e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005440:	f023 0202 	bic.w	r2, r3, #2
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005448:	4912      	ldr	r1, [pc, #72]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 800544a:	4313      	orrs	r3, r2
 800544c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800544e:	4b11      	ldr	r3, [pc, #68]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 8005450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005452:	4a10      	ldr	r2, [pc, #64]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 8005454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005458:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800545a:	4b0e      	ldr	r3, [pc, #56]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 800545c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545e:	4a0d      	ldr	r2, [pc, #52]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 8005460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005464:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005466:	4b0b      	ldr	r3, [pc, #44]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 8005468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546a:	4a0a      	ldr	r2, [pc, #40]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 800546c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005470:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005472:	4b08      	ldr	r3, [pc, #32]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 8005474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005476:	4a07      	ldr	r2, [pc, #28]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 8005478:	f043 0301 	orr.w	r3, r3, #1
 800547c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800547e:	4b05      	ldr	r3, [pc, #20]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a04      	ldr	r2, [pc, #16]	@ (8005494 <HAL_RCC_OscConfig+0x76c>)
 8005484:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548a:	f7fc ff07 	bl	800229c <HAL_GetTick>
 800548e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005490:	e011      	b.n	80054b6 <HAL_RCC_OscConfig+0x78e>
 8005492:	bf00      	nop
 8005494:	58024400 	.word	0x58024400
 8005498:	58024800 	.word	0x58024800
 800549c:	fffffc0c 	.word	0xfffffc0c
 80054a0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054a4:	f7fc fefa 	bl	800229c <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e08a      	b.n	80055cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054b6:	4b47      	ldr	r3, [pc, #284]	@ (80055d4 <HAL_RCC_OscConfig+0x8ac>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d0f0      	beq.n	80054a4 <HAL_RCC_OscConfig+0x77c>
 80054c2:	e082      	b.n	80055ca <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c4:	4b43      	ldr	r3, [pc, #268]	@ (80055d4 <HAL_RCC_OscConfig+0x8ac>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a42      	ldr	r2, [pc, #264]	@ (80055d4 <HAL_RCC_OscConfig+0x8ac>)
 80054ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d0:	f7fc fee4 	bl	800229c <HAL_GetTick>
 80054d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d8:	f7fc fee0 	bl	800229c <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e070      	b.n	80055cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054ea:	4b3a      	ldr	r3, [pc, #232]	@ (80055d4 <HAL_RCC_OscConfig+0x8ac>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1f0      	bne.n	80054d8 <HAL_RCC_OscConfig+0x7b0>
 80054f6:	e068      	b.n	80055ca <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80054f8:	4b36      	ldr	r3, [pc, #216]	@ (80055d4 <HAL_RCC_OscConfig+0x8ac>)
 80054fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80054fe:	4b35      	ldr	r3, [pc, #212]	@ (80055d4 <HAL_RCC_OscConfig+0x8ac>)
 8005500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005502:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005508:	2b01      	cmp	r3, #1
 800550a:	d031      	beq.n	8005570 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	f003 0203 	and.w	r2, r3, #3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005516:	429a      	cmp	r2, r3
 8005518:	d12a      	bne.n	8005570 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	091b      	lsrs	r3, r3, #4
 800551e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005526:	429a      	cmp	r2, r3
 8005528:	d122      	bne.n	8005570 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005534:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005536:	429a      	cmp	r2, r3
 8005538:	d11a      	bne.n	8005570 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	0a5b      	lsrs	r3, r3, #9
 800553e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005546:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005548:	429a      	cmp	r2, r3
 800554a:	d111      	bne.n	8005570 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	0c1b      	lsrs	r3, r3, #16
 8005550:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005558:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800555a:	429a      	cmp	r2, r3
 800555c:	d108      	bne.n	8005570 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	0e1b      	lsrs	r3, r3, #24
 8005562:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800556a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800556c:	429a      	cmp	r2, r3
 800556e:	d001      	beq.n	8005574 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e02b      	b.n	80055cc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005574:	4b17      	ldr	r3, [pc, #92]	@ (80055d4 <HAL_RCC_OscConfig+0x8ac>)
 8005576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005578:	08db      	lsrs	r3, r3, #3
 800557a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800557e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	429a      	cmp	r2, r3
 8005588:	d01f      	beq.n	80055ca <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800558a:	4b12      	ldr	r3, [pc, #72]	@ (80055d4 <HAL_RCC_OscConfig+0x8ac>)
 800558c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558e:	4a11      	ldr	r2, [pc, #68]	@ (80055d4 <HAL_RCC_OscConfig+0x8ac>)
 8005590:	f023 0301 	bic.w	r3, r3, #1
 8005594:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005596:	f7fc fe81 	bl	800229c <HAL_GetTick>
 800559a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800559c:	bf00      	nop
 800559e:	f7fc fe7d 	bl	800229c <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d0f9      	beq.n	800559e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80055aa:	4b0a      	ldr	r3, [pc, #40]	@ (80055d4 <HAL_RCC_OscConfig+0x8ac>)
 80055ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055ae:	4b0a      	ldr	r3, [pc, #40]	@ (80055d8 <HAL_RCC_OscConfig+0x8b0>)
 80055b0:	4013      	ands	r3, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80055b6:	00d2      	lsls	r2, r2, #3
 80055b8:	4906      	ldr	r1, [pc, #24]	@ (80055d4 <HAL_RCC_OscConfig+0x8ac>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80055be:	4b05      	ldr	r3, [pc, #20]	@ (80055d4 <HAL_RCC_OscConfig+0x8ac>)
 80055c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c2:	4a04      	ldr	r2, [pc, #16]	@ (80055d4 <HAL_RCC_OscConfig+0x8ac>)
 80055c4:	f043 0301 	orr.w	r3, r3, #1
 80055c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3730      	adds	r7, #48	@ 0x30
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	58024400 	.word	0x58024400
 80055d8:	ffff0007 	.word	0xffff0007

080055dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e19c      	b.n	800592a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055f0:	4b8a      	ldr	r3, [pc, #552]	@ (800581c <HAL_RCC_ClockConfig+0x240>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 030f 	and.w	r3, r3, #15
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d910      	bls.n	8005620 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055fe:	4b87      	ldr	r3, [pc, #540]	@ (800581c <HAL_RCC_ClockConfig+0x240>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f023 020f 	bic.w	r2, r3, #15
 8005606:	4985      	ldr	r1, [pc, #532]	@ (800581c <HAL_RCC_ClockConfig+0x240>)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	4313      	orrs	r3, r2
 800560c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800560e:	4b83      	ldr	r3, [pc, #524]	@ (800581c <HAL_RCC_ClockConfig+0x240>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 030f 	and.w	r3, r3, #15
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	429a      	cmp	r2, r3
 800561a:	d001      	beq.n	8005620 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e184      	b.n	800592a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d010      	beq.n	800564e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	4b7b      	ldr	r3, [pc, #492]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005638:	429a      	cmp	r2, r3
 800563a:	d908      	bls.n	800564e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800563c:	4b78      	ldr	r3, [pc, #480]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	4975      	ldr	r1, [pc, #468]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 800564a:	4313      	orrs	r3, r2
 800564c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0308 	and.w	r3, r3, #8
 8005656:	2b00      	cmp	r3, #0
 8005658:	d010      	beq.n	800567c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	695a      	ldr	r2, [r3, #20]
 800565e:	4b70      	ldr	r3, [pc, #448]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005666:	429a      	cmp	r2, r3
 8005668:	d908      	bls.n	800567c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800566a:	4b6d      	ldr	r3, [pc, #436]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	496a      	ldr	r1, [pc, #424]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 8005678:	4313      	orrs	r3, r2
 800567a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	2b00      	cmp	r3, #0
 8005686:	d010      	beq.n	80056aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	699a      	ldr	r2, [r3, #24]
 800568c:	4b64      	ldr	r3, [pc, #400]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005694:	429a      	cmp	r2, r3
 8005696:	d908      	bls.n	80056aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005698:	4b61      	ldr	r3, [pc, #388]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	495e      	ldr	r1, [pc, #376]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0320 	and.w	r3, r3, #32
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d010      	beq.n	80056d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69da      	ldr	r2, [r3, #28]
 80056ba:	4b59      	ldr	r3, [pc, #356]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d908      	bls.n	80056d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80056c6:	4b56      	ldr	r3, [pc, #344]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	4953      	ldr	r1, [pc, #332]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d010      	beq.n	8005706 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68da      	ldr	r2, [r3, #12]
 80056e8:	4b4d      	ldr	r3, [pc, #308]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d908      	bls.n	8005706 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056f4:	4b4a      	ldr	r3, [pc, #296]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	f023 020f 	bic.w	r2, r3, #15
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	4947      	ldr	r1, [pc, #284]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 8005702:	4313      	orrs	r3, r2
 8005704:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d055      	beq.n	80057be <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005712:	4b43      	ldr	r3, [pc, #268]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	4940      	ldr	r1, [pc, #256]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 8005720:	4313      	orrs	r3, r2
 8005722:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2b02      	cmp	r3, #2
 800572a:	d107      	bne.n	800573c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800572c:	4b3c      	ldr	r3, [pc, #240]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d121      	bne.n	800577c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e0f6      	b.n	800592a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2b03      	cmp	r3, #3
 8005742:	d107      	bne.n	8005754 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005744:	4b36      	ldr	r3, [pc, #216]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d115      	bne.n	800577c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e0ea      	b.n	800592a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d107      	bne.n	800576c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800575c:	4b30      	ldr	r3, [pc, #192]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005764:	2b00      	cmp	r3, #0
 8005766:	d109      	bne.n	800577c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e0de      	b.n	800592a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800576c:	4b2c      	ldr	r3, [pc, #176]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e0d6      	b.n	800592a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800577c:	4b28      	ldr	r3, [pc, #160]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f023 0207 	bic.w	r2, r3, #7
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	4925      	ldr	r1, [pc, #148]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 800578a:	4313      	orrs	r3, r2
 800578c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800578e:	f7fc fd85 	bl	800229c <HAL_GetTick>
 8005792:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005794:	e00a      	b.n	80057ac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005796:	f7fc fd81 	bl	800229c <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d901      	bls.n	80057ac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e0be      	b.n	800592a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d1eb      	bne.n	8005796 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d010      	beq.n	80057ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	4b14      	ldr	r3, [pc, #80]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d208      	bcs.n	80057ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057da:	4b11      	ldr	r3, [pc, #68]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	f023 020f 	bic.w	r2, r3, #15
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	490e      	ldr	r1, [pc, #56]	@ (8005820 <HAL_RCC_ClockConfig+0x244>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057ec:	4b0b      	ldr	r3, [pc, #44]	@ (800581c <HAL_RCC_ClockConfig+0x240>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d214      	bcs.n	8005824 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057fa:	4b08      	ldr	r3, [pc, #32]	@ (800581c <HAL_RCC_ClockConfig+0x240>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f023 020f 	bic.w	r2, r3, #15
 8005802:	4906      	ldr	r1, [pc, #24]	@ (800581c <HAL_RCC_ClockConfig+0x240>)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	4313      	orrs	r3, r2
 8005808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800580a:	4b04      	ldr	r3, [pc, #16]	@ (800581c <HAL_RCC_ClockConfig+0x240>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 030f 	and.w	r3, r3, #15
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	429a      	cmp	r2, r3
 8005816:	d005      	beq.n	8005824 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e086      	b.n	800592a <HAL_RCC_ClockConfig+0x34e>
 800581c:	52002000 	.word	0x52002000
 8005820:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0304 	and.w	r3, r3, #4
 800582c:	2b00      	cmp	r3, #0
 800582e:	d010      	beq.n	8005852 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691a      	ldr	r2, [r3, #16]
 8005834:	4b3f      	ldr	r3, [pc, #252]	@ (8005934 <HAL_RCC_ClockConfig+0x358>)
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800583c:	429a      	cmp	r2, r3
 800583e:	d208      	bcs.n	8005852 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005840:	4b3c      	ldr	r3, [pc, #240]	@ (8005934 <HAL_RCC_ClockConfig+0x358>)
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	4939      	ldr	r1, [pc, #228]	@ (8005934 <HAL_RCC_ClockConfig+0x358>)
 800584e:	4313      	orrs	r3, r2
 8005850:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0308 	and.w	r3, r3, #8
 800585a:	2b00      	cmp	r3, #0
 800585c:	d010      	beq.n	8005880 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	695a      	ldr	r2, [r3, #20]
 8005862:	4b34      	ldr	r3, [pc, #208]	@ (8005934 <HAL_RCC_ClockConfig+0x358>)
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800586a:	429a      	cmp	r2, r3
 800586c:	d208      	bcs.n	8005880 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800586e:	4b31      	ldr	r3, [pc, #196]	@ (8005934 <HAL_RCC_ClockConfig+0x358>)
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	492e      	ldr	r1, [pc, #184]	@ (8005934 <HAL_RCC_ClockConfig+0x358>)
 800587c:	4313      	orrs	r3, r2
 800587e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0310 	and.w	r3, r3, #16
 8005888:	2b00      	cmp	r3, #0
 800588a:	d010      	beq.n	80058ae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	699a      	ldr	r2, [r3, #24]
 8005890:	4b28      	ldr	r3, [pc, #160]	@ (8005934 <HAL_RCC_ClockConfig+0x358>)
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005898:	429a      	cmp	r2, r3
 800589a:	d208      	bcs.n	80058ae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800589c:	4b25      	ldr	r3, [pc, #148]	@ (8005934 <HAL_RCC_ClockConfig+0x358>)
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	4922      	ldr	r1, [pc, #136]	@ (8005934 <HAL_RCC_ClockConfig+0x358>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0320 	and.w	r3, r3, #32
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d010      	beq.n	80058dc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	69da      	ldr	r2, [r3, #28]
 80058be:	4b1d      	ldr	r3, [pc, #116]	@ (8005934 <HAL_RCC_ClockConfig+0x358>)
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d208      	bcs.n	80058dc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80058ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005934 <HAL_RCC_ClockConfig+0x358>)
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	4917      	ldr	r1, [pc, #92]	@ (8005934 <HAL_RCC_ClockConfig+0x358>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80058dc:	f000 f834 	bl	8005948 <HAL_RCC_GetSysClockFreq>
 80058e0:	4602      	mov	r2, r0
 80058e2:	4b14      	ldr	r3, [pc, #80]	@ (8005934 <HAL_RCC_ClockConfig+0x358>)
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	0a1b      	lsrs	r3, r3, #8
 80058e8:	f003 030f 	and.w	r3, r3, #15
 80058ec:	4912      	ldr	r1, [pc, #72]	@ (8005938 <HAL_RCC_ClockConfig+0x35c>)
 80058ee:	5ccb      	ldrb	r3, [r1, r3]
 80058f0:	f003 031f 	and.w	r3, r3, #31
 80058f4:	fa22 f303 	lsr.w	r3, r2, r3
 80058f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80058fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005934 <HAL_RCC_ClockConfig+0x358>)
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	4a0d      	ldr	r2, [pc, #52]	@ (8005938 <HAL_RCC_ClockConfig+0x35c>)
 8005904:	5cd3      	ldrb	r3, [r2, r3]
 8005906:	f003 031f 	and.w	r3, r3, #31
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	fa22 f303 	lsr.w	r3, r2, r3
 8005910:	4a0a      	ldr	r2, [pc, #40]	@ (800593c <HAL_RCC_ClockConfig+0x360>)
 8005912:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005914:	4a0a      	ldr	r2, [pc, #40]	@ (8005940 <HAL_RCC_ClockConfig+0x364>)
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800591a:	4b0a      	ldr	r3, [pc, #40]	@ (8005944 <HAL_RCC_ClockConfig+0x368>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4618      	mov	r0, r3
 8005920:	f7fc fc72 	bl	8002208 <HAL_InitTick>
 8005924:	4603      	mov	r3, r0
 8005926:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005928:	7bfb      	ldrb	r3, [r7, #15]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	58024400 	.word	0x58024400
 8005938:	0800dbe4 	.word	0x0800dbe4
 800593c:	24000004 	.word	0x24000004
 8005940:	24000000 	.word	0x24000000
 8005944:	24000008 	.word	0x24000008

08005948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005948:	b480      	push	{r7}
 800594a:	b089      	sub	sp, #36	@ 0x24
 800594c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800594e:	4bb3      	ldr	r3, [pc, #716]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005956:	2b18      	cmp	r3, #24
 8005958:	f200 8155 	bhi.w	8005c06 <HAL_RCC_GetSysClockFreq+0x2be>
 800595c:	a201      	add	r2, pc, #4	@ (adr r2, 8005964 <HAL_RCC_GetSysClockFreq+0x1c>)
 800595e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005962:	bf00      	nop
 8005964:	080059c9 	.word	0x080059c9
 8005968:	08005c07 	.word	0x08005c07
 800596c:	08005c07 	.word	0x08005c07
 8005970:	08005c07 	.word	0x08005c07
 8005974:	08005c07 	.word	0x08005c07
 8005978:	08005c07 	.word	0x08005c07
 800597c:	08005c07 	.word	0x08005c07
 8005980:	08005c07 	.word	0x08005c07
 8005984:	080059ef 	.word	0x080059ef
 8005988:	08005c07 	.word	0x08005c07
 800598c:	08005c07 	.word	0x08005c07
 8005990:	08005c07 	.word	0x08005c07
 8005994:	08005c07 	.word	0x08005c07
 8005998:	08005c07 	.word	0x08005c07
 800599c:	08005c07 	.word	0x08005c07
 80059a0:	08005c07 	.word	0x08005c07
 80059a4:	080059f5 	.word	0x080059f5
 80059a8:	08005c07 	.word	0x08005c07
 80059ac:	08005c07 	.word	0x08005c07
 80059b0:	08005c07 	.word	0x08005c07
 80059b4:	08005c07 	.word	0x08005c07
 80059b8:	08005c07 	.word	0x08005c07
 80059bc:	08005c07 	.word	0x08005c07
 80059c0:	08005c07 	.word	0x08005c07
 80059c4:	080059fb 	.word	0x080059fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059c8:	4b94      	ldr	r3, [pc, #592]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0320 	and.w	r3, r3, #32
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d009      	beq.n	80059e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059d4:	4b91      	ldr	r3, [pc, #580]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	08db      	lsrs	r3, r3, #3
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	4a90      	ldr	r2, [pc, #576]	@ (8005c20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
 80059e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80059e6:	e111      	b.n	8005c0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80059e8:	4b8d      	ldr	r3, [pc, #564]	@ (8005c20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80059ea:	61bb      	str	r3, [r7, #24]
      break;
 80059ec:	e10e      	b.n	8005c0c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80059ee:	4b8d      	ldr	r3, [pc, #564]	@ (8005c24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059f0:	61bb      	str	r3, [r7, #24]
      break;
 80059f2:	e10b      	b.n	8005c0c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80059f4:	4b8c      	ldr	r3, [pc, #560]	@ (8005c28 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80059f6:	61bb      	str	r3, [r7, #24]
      break;
 80059f8:	e108      	b.n	8005c0c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059fa:	4b88      	ldr	r3, [pc, #544]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005a04:	4b85      	ldr	r3, [pc, #532]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a08:	091b      	lsrs	r3, r3, #4
 8005a0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a0e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005a10:	4b82      	ldr	r3, [pc, #520]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005a1a:	4b80      	ldr	r3, [pc, #512]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a1e:	08db      	lsrs	r3, r3, #3
 8005a20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	fb02 f303 	mul.w	r3, r2, r3
 8005a2a:	ee07 3a90 	vmov	s15, r3
 8005a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a32:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 80e1 	beq.w	8005c00 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	f000 8083 	beq.w	8005b4c <HAL_RCC_GetSysClockFreq+0x204>
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	f200 80a1 	bhi.w	8005b90 <HAL_RCC_GetSysClockFreq+0x248>
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <HAL_RCC_GetSysClockFreq+0x114>
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d056      	beq.n	8005b08 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005a5a:	e099      	b.n	8005b90 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a5c:	4b6f      	ldr	r3, [pc, #444]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0320 	and.w	r3, r3, #32
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d02d      	beq.n	8005ac4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a68:	4b6c      	ldr	r3, [pc, #432]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	08db      	lsrs	r3, r3, #3
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	4a6b      	ldr	r2, [pc, #428]	@ (8005c20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a74:	fa22 f303 	lsr.w	r3, r2, r3
 8005a78:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	ee07 3a90 	vmov	s15, r3
 8005a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	ee07 3a90 	vmov	s15, r3
 8005a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a92:	4b62      	ldr	r3, [pc, #392]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a9a:	ee07 3a90 	vmov	s15, r3
 8005a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005aa6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005abe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005ac2:	e087      	b.n	8005bd4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	ee07 3a90 	vmov	s15, r3
 8005aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ace:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005c30 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ad6:	4b51      	ldr	r3, [pc, #324]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ade:	ee07 3a90 	vmov	s15, r3
 8005ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005aea:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b06:	e065      	b.n	8005bd4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	ee07 3a90 	vmov	s15, r3
 8005b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b12:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005c34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b1a:	4b40      	ldr	r3, [pc, #256]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b22:	ee07 3a90 	vmov	s15, r3
 8005b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b2e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b4a:	e043      	b.n	8005bd4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	ee07 3a90 	vmov	s15, r3
 8005b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b56:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005c38 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b66:	ee07 3a90 	vmov	s15, r3
 8005b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b72:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005b8e:	e021      	b.n	8005bd4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	ee07 3a90 	vmov	s15, r3
 8005b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005c34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005baa:	ee07 3a90 	vmov	s15, r3
 8005bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bb6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005bd2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005bd4:	4b11      	ldr	r3, [pc, #68]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd8:	0a5b      	lsrs	r3, r3, #9
 8005bda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bde:	3301      	adds	r3, #1
 8005be0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	ee07 3a90 	vmov	s15, r3
 8005be8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005bec:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bf8:	ee17 3a90 	vmov	r3, s15
 8005bfc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005bfe:	e005      	b.n	8005c0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	61bb      	str	r3, [r7, #24]
      break;
 8005c04:	e002      	b.n	8005c0c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005c06:	4b07      	ldr	r3, [pc, #28]	@ (8005c24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c08:	61bb      	str	r3, [r7, #24]
      break;
 8005c0a:	bf00      	nop
  }

  return sysclockfreq;
 8005c0c:	69bb      	ldr	r3, [r7, #24]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3724      	adds	r7, #36	@ 0x24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	58024400 	.word	0x58024400
 8005c20:	03d09000 	.word	0x03d09000
 8005c24:	003d0900 	.word	0x003d0900
 8005c28:	007a1200 	.word	0x007a1200
 8005c2c:	46000000 	.word	0x46000000
 8005c30:	4c742400 	.word	0x4c742400
 8005c34:	4a742400 	.word	0x4a742400
 8005c38:	4af42400 	.word	0x4af42400

08005c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005c42:	f7ff fe81 	bl	8005948 <HAL_RCC_GetSysClockFreq>
 8005c46:	4602      	mov	r2, r0
 8005c48:	4b10      	ldr	r3, [pc, #64]	@ (8005c8c <HAL_RCC_GetHCLKFreq+0x50>)
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	0a1b      	lsrs	r3, r3, #8
 8005c4e:	f003 030f 	and.w	r3, r3, #15
 8005c52:	490f      	ldr	r1, [pc, #60]	@ (8005c90 <HAL_RCC_GetHCLKFreq+0x54>)
 8005c54:	5ccb      	ldrb	r3, [r1, r3]
 8005c56:	f003 031f 	and.w	r3, r3, #31
 8005c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c5e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c60:	4b0a      	ldr	r3, [pc, #40]	@ (8005c8c <HAL_RCC_GetHCLKFreq+0x50>)
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	4a09      	ldr	r2, [pc, #36]	@ (8005c90 <HAL_RCC_GetHCLKFreq+0x54>)
 8005c6a:	5cd3      	ldrb	r3, [r2, r3]
 8005c6c:	f003 031f 	and.w	r3, r3, #31
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	fa22 f303 	lsr.w	r3, r2, r3
 8005c76:	4a07      	ldr	r2, [pc, #28]	@ (8005c94 <HAL_RCC_GetHCLKFreq+0x58>)
 8005c78:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c7a:	4a07      	ldr	r2, [pc, #28]	@ (8005c98 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005c80:	4b04      	ldr	r3, [pc, #16]	@ (8005c94 <HAL_RCC_GetHCLKFreq+0x58>)
 8005c82:	681b      	ldr	r3, [r3, #0]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3708      	adds	r7, #8
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	58024400 	.word	0x58024400
 8005c90:	0800dbe4 	.word	0x0800dbe4
 8005c94:	24000004 	.word	0x24000004
 8005c98:	24000000 	.word	0x24000000

08005c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005ca0:	f7ff ffcc 	bl	8005c3c <HAL_RCC_GetHCLKFreq>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	4b06      	ldr	r3, [pc, #24]	@ (8005cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	091b      	lsrs	r3, r3, #4
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	4904      	ldr	r1, [pc, #16]	@ (8005cc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005cb2:	5ccb      	ldrb	r3, [r1, r3]
 8005cb4:	f003 031f 	and.w	r3, r3, #31
 8005cb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	58024400 	.word	0x58024400
 8005cc4:	0800dbe4 	.word	0x0800dbe4

08005cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005ccc:	f7ff ffb6 	bl	8005c3c <HAL_RCC_GetHCLKFreq>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	4b06      	ldr	r3, [pc, #24]	@ (8005cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	0a1b      	lsrs	r3, r3, #8
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	4904      	ldr	r1, [pc, #16]	@ (8005cf0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005cde:	5ccb      	ldrb	r3, [r1, r3]
 8005ce0:	f003 031f 	and.w	r3, r3, #31
 8005ce4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	58024400 	.word	0x58024400
 8005cf0:	0800dbe4 	.word	0x0800dbe4

08005cf4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cf8:	b0ca      	sub	sp, #296	@ 0x128
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d00:	2300      	movs	r3, #0
 8005d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d06:	2300      	movs	r3, #0
 8005d08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005d18:	2500      	movs	r5, #0
 8005d1a:	ea54 0305 	orrs.w	r3, r4, r5
 8005d1e:	d049      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d26:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d2a:	d02f      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005d2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d30:	d828      	bhi.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005d32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d36:	d01a      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d3c:	d822      	bhi.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d003      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005d42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d46:	d007      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d48:	e01c      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d4a:	4bb8      	ldr	r3, [pc, #736]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4e:	4ab7      	ldr	r2, [pc, #732]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d56:	e01a      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d5c:	3308      	adds	r3, #8
 8005d5e:	2102      	movs	r1, #2
 8005d60:	4618      	mov	r0, r3
 8005d62:	f001 fc8f 	bl	8007684 <RCCEx_PLL2_Config>
 8005d66:	4603      	mov	r3, r0
 8005d68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d6c:	e00f      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d72:	3328      	adds	r3, #40	@ 0x28
 8005d74:	2102      	movs	r1, #2
 8005d76:	4618      	mov	r0, r3
 8005d78:	f001 fd36 	bl	80077e8 <RCCEx_PLL3_Config>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005d82:	e004      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d8a:	e000      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10a      	bne.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005d96:	4ba5      	ldr	r3, [pc, #660]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d9a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005da4:	4aa1      	ldr	r2, [pc, #644]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005da6:	430b      	orrs	r3, r1
 8005da8:	6513      	str	r3, [r2, #80]	@ 0x50
 8005daa:	e003      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005db0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005dc0:	f04f 0900 	mov.w	r9, #0
 8005dc4:	ea58 0309 	orrs.w	r3, r8, r9
 8005dc8:	d047      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dd0:	2b04      	cmp	r3, #4
 8005dd2:	d82a      	bhi.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8005ddc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dda:	bf00      	nop
 8005ddc:	08005df1 	.word	0x08005df1
 8005de0:	08005dff 	.word	0x08005dff
 8005de4:	08005e15 	.word	0x08005e15
 8005de8:	08005e33 	.word	0x08005e33
 8005dec:	08005e33 	.word	0x08005e33
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005df0:	4b8e      	ldr	r3, [pc, #568]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df4:	4a8d      	ldr	r2, [pc, #564]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005df6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005dfc:	e01a      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e02:	3308      	adds	r3, #8
 8005e04:	2100      	movs	r1, #0
 8005e06:	4618      	mov	r0, r3
 8005e08:	f001 fc3c 	bl	8007684 <RCCEx_PLL2_Config>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e12:	e00f      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e18:	3328      	adds	r3, #40	@ 0x28
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f001 fce3 	bl	80077e8 <RCCEx_PLL3_Config>
 8005e22:	4603      	mov	r3, r0
 8005e24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005e28:	e004      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e30:	e000      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005e32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e3c:	4b7b      	ldr	r3, [pc, #492]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e40:	f023 0107 	bic.w	r1, r3, #7
 8005e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e4a:	4a78      	ldr	r2, [pc, #480]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e4c:	430b      	orrs	r3, r1
 8005e4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e50:	e003      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005e66:	f04f 0b00 	mov.w	fp, #0
 8005e6a:	ea5a 030b 	orrs.w	r3, sl, fp
 8005e6e:	d04c      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e7a:	d030      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e80:	d829      	bhi.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e82:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e84:	d02d      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005e86:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e88:	d825      	bhi.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e8a:	2b80      	cmp	r3, #128	@ 0x80
 8005e8c:	d018      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005e8e:	2b80      	cmp	r3, #128	@ 0x80
 8005e90:	d821      	bhi.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005e96:	2b40      	cmp	r3, #64	@ 0x40
 8005e98:	d007      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005e9a:	e01c      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e9c:	4b63      	ldr	r3, [pc, #396]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea0:	4a62      	ldr	r2, [pc, #392]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ea8:	e01c      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eae:	3308      	adds	r3, #8
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f001 fbe6 	bl	8007684 <RCCEx_PLL2_Config>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ebe:	e011      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec4:	3328      	adds	r3, #40	@ 0x28
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f001 fc8d 	bl	80077e8 <RCCEx_PLL3_Config>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ed4:	e006      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005edc:	e002      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005ede:	bf00      	nop
 8005ee0:	e000      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10a      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005eec:	4b4f      	ldr	r3, [pc, #316]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005efa:	4a4c      	ldr	r2, [pc, #304]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005efc:	430b      	orrs	r3, r1
 8005efe:	6513      	str	r3, [r2, #80]	@ 0x50
 8005f00:	e003      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f12:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005f16:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005f20:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005f24:	460b      	mov	r3, r1
 8005f26:	4313      	orrs	r3, r2
 8005f28:	d053      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005f32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f36:	d035      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005f38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005f3c:	d82e      	bhi.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f3e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f42:	d031      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005f44:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005f48:	d828      	bhi.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f4e:	d01a      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005f50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f54:	d822      	bhi.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005f5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005f5e:	d007      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005f60:	e01c      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f62:	4b32      	ldr	r3, [pc, #200]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f66:	4a31      	ldr	r2, [pc, #196]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f6e:	e01c      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f74:	3308      	adds	r3, #8
 8005f76:	2100      	movs	r1, #0
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f001 fb83 	bl	8007684 <RCCEx_PLL2_Config>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005f84:	e011      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f8a:	3328      	adds	r3, #40	@ 0x28
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f001 fc2a 	bl	80077e8 <RCCEx_PLL3_Config>
 8005f94:	4603      	mov	r3, r0
 8005f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005f9a:	e006      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fa2:	e002      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005fa4:	bf00      	nop
 8005fa6:	e000      	b.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005fa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10b      	bne.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fb6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005fc2:	4a1a      	ldr	r2, [pc, #104]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fc4:	430b      	orrs	r3, r1
 8005fc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fc8:	e003      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fda:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005fde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005fe8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005fec:	460b      	mov	r3, r1
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	d056      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005ffa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ffe:	d038      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006000:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006004:	d831      	bhi.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006006:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800600a:	d034      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800600c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006010:	d82b      	bhi.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006012:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006016:	d01d      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006018:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800601c:	d825      	bhi.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800601e:	2b00      	cmp	r3, #0
 8006020:	d006      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006022:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006026:	d00a      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006028:	e01f      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800602a:	bf00      	nop
 800602c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006030:	4ba2      	ldr	r3, [pc, #648]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006034:	4aa1      	ldr	r2, [pc, #644]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800603a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800603c:	e01c      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800603e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006042:	3308      	adds	r3, #8
 8006044:	2100      	movs	r1, #0
 8006046:	4618      	mov	r0, r3
 8006048:	f001 fb1c 	bl	8007684 <RCCEx_PLL2_Config>
 800604c:	4603      	mov	r3, r0
 800604e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006052:	e011      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006058:	3328      	adds	r3, #40	@ 0x28
 800605a:	2100      	movs	r1, #0
 800605c:	4618      	mov	r0, r3
 800605e:	f001 fbc3 	bl	80077e8 <RCCEx_PLL3_Config>
 8006062:	4603      	mov	r3, r0
 8006064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006068:	e006      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006070:	e002      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006072:	bf00      	nop
 8006074:	e000      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006076:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006078:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10b      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006080:	4b8e      	ldr	r3, [pc, #568]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006084:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800608c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006090:	4a8a      	ldr	r2, [pc, #552]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006092:	430b      	orrs	r3, r1
 8006094:	6593      	str	r3, [r2, #88]	@ 0x58
 8006096:	e003      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006098:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800609c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80060a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80060ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80060b0:	2300      	movs	r3, #0
 80060b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80060b6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80060ba:	460b      	mov	r3, r1
 80060bc:	4313      	orrs	r3, r2
 80060be:	d03a      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80060c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060c6:	2b30      	cmp	r3, #48	@ 0x30
 80060c8:	d01f      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80060ca:	2b30      	cmp	r3, #48	@ 0x30
 80060cc:	d819      	bhi.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80060ce:	2b20      	cmp	r3, #32
 80060d0:	d00c      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80060d2:	2b20      	cmp	r3, #32
 80060d4:	d815      	bhi.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d019      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80060da:	2b10      	cmp	r3, #16
 80060dc:	d111      	bne.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060de:	4b77      	ldr	r3, [pc, #476]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e2:	4a76      	ldr	r2, [pc, #472]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80060e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80060ea:	e011      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f0:	3308      	adds	r3, #8
 80060f2:	2102      	movs	r1, #2
 80060f4:	4618      	mov	r0, r3
 80060f6:	f001 fac5 	bl	8007684 <RCCEx_PLL2_Config>
 80060fa:	4603      	mov	r3, r0
 80060fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006100:	e006      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006108:	e002      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800610a:	bf00      	nop
 800610c:	e000      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800610e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10a      	bne.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006118:	4b68      	ldr	r3, [pc, #416]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800611a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800611c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006126:	4a65      	ldr	r2, [pc, #404]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006128:	430b      	orrs	r3, r1
 800612a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800612c:	e003      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006132:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006142:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006146:	2300      	movs	r3, #0
 8006148:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800614c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006150:	460b      	mov	r3, r1
 8006152:	4313      	orrs	r3, r2
 8006154:	d051      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800615a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800615c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006160:	d035      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006162:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006166:	d82e      	bhi.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006168:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800616c:	d031      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800616e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006172:	d828      	bhi.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006174:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006178:	d01a      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800617a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800617e:	d822      	bhi.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006180:	2b00      	cmp	r3, #0
 8006182:	d003      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006188:	d007      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800618a:	e01c      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800618c:	4b4b      	ldr	r3, [pc, #300]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800618e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006190:	4a4a      	ldr	r2, [pc, #296]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006198:	e01c      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800619a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619e:	3308      	adds	r3, #8
 80061a0:	2100      	movs	r1, #0
 80061a2:	4618      	mov	r0, r3
 80061a4:	f001 fa6e 	bl	8007684 <RCCEx_PLL2_Config>
 80061a8:	4603      	mov	r3, r0
 80061aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061ae:	e011      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b4:	3328      	adds	r3, #40	@ 0x28
 80061b6:	2100      	movs	r1, #0
 80061b8:	4618      	mov	r0, r3
 80061ba:	f001 fb15 	bl	80077e8 <RCCEx_PLL3_Config>
 80061be:	4603      	mov	r3, r0
 80061c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80061c4:	e006      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061cc:	e002      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80061ce:	bf00      	nop
 80061d0:	e000      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80061d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10a      	bne.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80061dc:	4b37      	ldr	r3, [pc, #220]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061e0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80061e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ea:	4a34      	ldr	r2, [pc, #208]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061ec:	430b      	orrs	r3, r1
 80061ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80061f0:	e003      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80061fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006202:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006206:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800620a:	2300      	movs	r3, #0
 800620c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006210:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006214:	460b      	mov	r3, r1
 8006216:	4313      	orrs	r3, r2
 8006218:	d056      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800621a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800621e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006220:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006224:	d033      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006226:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800622a:	d82c      	bhi.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800622c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006230:	d02f      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006232:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006236:	d826      	bhi.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006238:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800623c:	d02b      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800623e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006242:	d820      	bhi.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006244:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006248:	d012      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800624a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800624e:	d81a      	bhi.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006250:	2b00      	cmp	r3, #0
 8006252:	d022      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006258:	d115      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800625a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800625e:	3308      	adds	r3, #8
 8006260:	2101      	movs	r1, #1
 8006262:	4618      	mov	r0, r3
 8006264:	f001 fa0e 	bl	8007684 <RCCEx_PLL2_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800626e:	e015      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006274:	3328      	adds	r3, #40	@ 0x28
 8006276:	2101      	movs	r1, #1
 8006278:	4618      	mov	r0, r3
 800627a:	f001 fab5 	bl	80077e8 <RCCEx_PLL3_Config>
 800627e:	4603      	mov	r3, r0
 8006280:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006284:	e00a      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800628c:	e006      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800628e:	bf00      	nop
 8006290:	e004      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006292:	bf00      	nop
 8006294:	e002      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006296:	bf00      	nop
 8006298:	e000      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800629a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800629c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10d      	bne.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80062a4:	4b05      	ldr	r3, [pc, #20]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062a8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80062ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062b2:	4a02      	ldr	r2, [pc, #8]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062b4:	430b      	orrs	r3, r1
 80062b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80062b8:	e006      	b.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80062ba:	bf00      	nop
 80062bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80062c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80062d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80062d8:	2300      	movs	r3, #0
 80062da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80062de:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4313      	orrs	r3, r2
 80062e6:	d055      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80062e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80062f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062f4:	d033      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80062f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062fa:	d82c      	bhi.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80062fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006300:	d02f      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006306:	d826      	bhi.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006308:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800630c:	d02b      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800630e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006312:	d820      	bhi.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006314:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006318:	d012      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800631a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800631e:	d81a      	bhi.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006320:	2b00      	cmp	r3, #0
 8006322:	d022      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006324:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006328:	d115      	bne.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800632a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632e:	3308      	adds	r3, #8
 8006330:	2101      	movs	r1, #1
 8006332:	4618      	mov	r0, r3
 8006334:	f001 f9a6 	bl	8007684 <RCCEx_PLL2_Config>
 8006338:	4603      	mov	r3, r0
 800633a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800633e:	e015      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006344:	3328      	adds	r3, #40	@ 0x28
 8006346:	2101      	movs	r1, #1
 8006348:	4618      	mov	r0, r3
 800634a:	f001 fa4d 	bl	80077e8 <RCCEx_PLL3_Config>
 800634e:	4603      	mov	r3, r0
 8006350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006354:	e00a      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800635c:	e006      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800635e:	bf00      	nop
 8006360:	e004      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006362:	bf00      	nop
 8006364:	e002      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006366:	bf00      	nop
 8006368:	e000      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800636a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800636c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10b      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006374:	4ba3      	ldr	r3, [pc, #652]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006378:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800637c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006380:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006384:	4a9f      	ldr	r2, [pc, #636]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006386:	430b      	orrs	r3, r1
 8006388:	6593      	str	r3, [r2, #88]	@ 0x58
 800638a:	e003      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006390:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80063a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063a4:	2300      	movs	r3, #0
 80063a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80063aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80063ae:	460b      	mov	r3, r1
 80063b0:	4313      	orrs	r3, r2
 80063b2:	d037      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80063b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063be:	d00e      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80063c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063c4:	d816      	bhi.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d018      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80063ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063ce:	d111      	bne.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063d0:	4b8c      	ldr	r3, [pc, #560]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d4:	4a8b      	ldr	r2, [pc, #556]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80063d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80063dc:	e00f      	b.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e2:	3308      	adds	r3, #8
 80063e4:	2101      	movs	r1, #1
 80063e6:	4618      	mov	r0, r3
 80063e8:	f001 f94c 	bl	8007684 <RCCEx_PLL2_Config>
 80063ec:	4603      	mov	r3, r0
 80063ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80063f2:	e004      	b.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063fa:	e000      	b.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80063fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10a      	bne.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006406:	4b7f      	ldr	r3, [pc, #508]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800640a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800640e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006414:	4a7b      	ldr	r2, [pc, #492]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006416:	430b      	orrs	r3, r1
 8006418:	6513      	str	r3, [r2, #80]	@ 0x50
 800641a:	e003      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800641c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006420:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006430:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006434:	2300      	movs	r3, #0
 8006436:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800643a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800643e:	460b      	mov	r3, r1
 8006440:	4313      	orrs	r3, r2
 8006442:	d039      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800644a:	2b03      	cmp	r3, #3
 800644c:	d81c      	bhi.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800644e:	a201      	add	r2, pc, #4	@ (adr r2, 8006454 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006454:	08006491 	.word	0x08006491
 8006458:	08006465 	.word	0x08006465
 800645c:	08006473 	.word	0x08006473
 8006460:	08006491 	.word	0x08006491
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006464:	4b67      	ldr	r3, [pc, #412]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006468:	4a66      	ldr	r2, [pc, #408]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800646a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800646e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006470:	e00f      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006476:	3308      	adds	r3, #8
 8006478:	2102      	movs	r1, #2
 800647a:	4618      	mov	r0, r3
 800647c:	f001 f902 	bl	8007684 <RCCEx_PLL2_Config>
 8006480:	4603      	mov	r3, r0
 8006482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006486:	e004      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800648e:	e000      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10a      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800649a:	4b5a      	ldr	r3, [pc, #360]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800649c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800649e:	f023 0103 	bic.w	r1, r3, #3
 80064a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064a8:	4a56      	ldr	r2, [pc, #344]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80064aa:	430b      	orrs	r3, r1
 80064ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064ae:	e003      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80064c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064c8:	2300      	movs	r3, #0
 80064ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80064d2:	460b      	mov	r3, r1
 80064d4:	4313      	orrs	r3, r2
 80064d6:	f000 809f 	beq.w	8006618 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064da:	4b4b      	ldr	r3, [pc, #300]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a4a      	ldr	r2, [pc, #296]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80064e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064e6:	f7fb fed9 	bl	800229c <HAL_GetTick>
 80064ea:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064ee:	e00b      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064f0:	f7fb fed4 	bl	800229c <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b64      	cmp	r3, #100	@ 0x64
 80064fe:	d903      	bls.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006506:	e005      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006508:	4b3f      	ldr	r3, [pc, #252]	@ (8006608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006510:	2b00      	cmp	r3, #0
 8006512:	d0ed      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006514:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006518:	2b00      	cmp	r3, #0
 800651a:	d179      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800651c:	4b39      	ldr	r3, [pc, #228]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800651e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006524:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006528:	4053      	eors	r3, r2
 800652a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800652e:	2b00      	cmp	r3, #0
 8006530:	d015      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006532:	4b34      	ldr	r3, [pc, #208]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800653a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800653e:	4b31      	ldr	r3, [pc, #196]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006542:	4a30      	ldr	r2, [pc, #192]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006548:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800654a:	4b2e      	ldr	r3, [pc, #184]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800654c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800654e:	4a2d      	ldr	r2, [pc, #180]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006550:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006554:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006556:	4a2b      	ldr	r2, [pc, #172]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006558:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800655c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800655e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006562:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800656a:	d118      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800656c:	f7fb fe96 	bl	800229c <HAL_GetTick>
 8006570:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006574:	e00d      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006576:	f7fb fe91 	bl	800229c <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006580:	1ad2      	subs	r2, r2, r3
 8006582:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006586:	429a      	cmp	r2, r3
 8006588:	d903      	bls.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006590:	e005      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006592:	4b1c      	ldr	r3, [pc, #112]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d0eb      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800659e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d129      	bne.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065b6:	d10e      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80065b8:	4b12      	ldr	r3, [pc, #72]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80065c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065c8:	091a      	lsrs	r2, r3, #4
 80065ca:	4b10      	ldr	r3, [pc, #64]	@ (800660c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80065cc:	4013      	ands	r3, r2
 80065ce:	4a0d      	ldr	r2, [pc, #52]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065d0:	430b      	orrs	r3, r1
 80065d2:	6113      	str	r3, [r2, #16]
 80065d4:	e005      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80065d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	4a0a      	ldr	r2, [pc, #40]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80065e0:	6113      	str	r3, [r2, #16]
 80065e2:	4b08      	ldr	r3, [pc, #32]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065e4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80065e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065f2:	4a04      	ldr	r2, [pc, #16]	@ (8006604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065f4:	430b      	orrs	r3, r1
 80065f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80065f8:	e00e      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006602:	e009      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006604:	58024400 	.word	0x58024400
 8006608:	58024800 	.word	0x58024800
 800660c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006614:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f002 0301 	and.w	r3, r2, #1
 8006624:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006628:	2300      	movs	r3, #0
 800662a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800662e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006632:	460b      	mov	r3, r1
 8006634:	4313      	orrs	r3, r2
 8006636:	f000 8089 	beq.w	800674c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800663a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800663e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006640:	2b28      	cmp	r3, #40	@ 0x28
 8006642:	d86b      	bhi.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006644:	a201      	add	r2, pc, #4	@ (adr r2, 800664c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664a:	bf00      	nop
 800664c:	08006725 	.word	0x08006725
 8006650:	0800671d 	.word	0x0800671d
 8006654:	0800671d 	.word	0x0800671d
 8006658:	0800671d 	.word	0x0800671d
 800665c:	0800671d 	.word	0x0800671d
 8006660:	0800671d 	.word	0x0800671d
 8006664:	0800671d 	.word	0x0800671d
 8006668:	0800671d 	.word	0x0800671d
 800666c:	080066f1 	.word	0x080066f1
 8006670:	0800671d 	.word	0x0800671d
 8006674:	0800671d 	.word	0x0800671d
 8006678:	0800671d 	.word	0x0800671d
 800667c:	0800671d 	.word	0x0800671d
 8006680:	0800671d 	.word	0x0800671d
 8006684:	0800671d 	.word	0x0800671d
 8006688:	0800671d 	.word	0x0800671d
 800668c:	08006707 	.word	0x08006707
 8006690:	0800671d 	.word	0x0800671d
 8006694:	0800671d 	.word	0x0800671d
 8006698:	0800671d 	.word	0x0800671d
 800669c:	0800671d 	.word	0x0800671d
 80066a0:	0800671d 	.word	0x0800671d
 80066a4:	0800671d 	.word	0x0800671d
 80066a8:	0800671d 	.word	0x0800671d
 80066ac:	08006725 	.word	0x08006725
 80066b0:	0800671d 	.word	0x0800671d
 80066b4:	0800671d 	.word	0x0800671d
 80066b8:	0800671d 	.word	0x0800671d
 80066bc:	0800671d 	.word	0x0800671d
 80066c0:	0800671d 	.word	0x0800671d
 80066c4:	0800671d 	.word	0x0800671d
 80066c8:	0800671d 	.word	0x0800671d
 80066cc:	08006725 	.word	0x08006725
 80066d0:	0800671d 	.word	0x0800671d
 80066d4:	0800671d 	.word	0x0800671d
 80066d8:	0800671d 	.word	0x0800671d
 80066dc:	0800671d 	.word	0x0800671d
 80066e0:	0800671d 	.word	0x0800671d
 80066e4:	0800671d 	.word	0x0800671d
 80066e8:	0800671d 	.word	0x0800671d
 80066ec:	08006725 	.word	0x08006725
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f4:	3308      	adds	r3, #8
 80066f6:	2101      	movs	r1, #1
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 ffc3 	bl	8007684 <RCCEx_PLL2_Config>
 80066fe:	4603      	mov	r3, r0
 8006700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006704:	e00f      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670a:	3328      	adds	r3, #40	@ 0x28
 800670c:	2101      	movs	r1, #1
 800670e:	4618      	mov	r0, r3
 8006710:	f001 f86a 	bl	80077e8 <RCCEx_PLL3_Config>
 8006714:	4603      	mov	r3, r0
 8006716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800671a:	e004      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006722:	e000      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10a      	bne.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800672e:	4bbf      	ldr	r3, [pc, #764]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006732:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800673c:	4abb      	ldr	r2, [pc, #748]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800673e:	430b      	orrs	r3, r1
 8006740:	6553      	str	r3, [r2, #84]	@ 0x54
 8006742:	e003      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006748:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800674c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006754:	f002 0302 	and.w	r3, r2, #2
 8006758:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800675c:	2300      	movs	r3, #0
 800675e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006762:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006766:	460b      	mov	r3, r1
 8006768:	4313      	orrs	r3, r2
 800676a:	d041      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800676c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006770:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006772:	2b05      	cmp	r3, #5
 8006774:	d824      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006776:	a201      	add	r2, pc, #4	@ (adr r2, 800677c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677c:	080067c9 	.word	0x080067c9
 8006780:	08006795 	.word	0x08006795
 8006784:	080067ab 	.word	0x080067ab
 8006788:	080067c9 	.word	0x080067c9
 800678c:	080067c9 	.word	0x080067c9
 8006790:	080067c9 	.word	0x080067c9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006798:	3308      	adds	r3, #8
 800679a:	2101      	movs	r1, #1
 800679c:	4618      	mov	r0, r3
 800679e:	f000 ff71 	bl	8007684 <RCCEx_PLL2_Config>
 80067a2:	4603      	mov	r3, r0
 80067a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80067a8:	e00f      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ae:	3328      	adds	r3, #40	@ 0x28
 80067b0:	2101      	movs	r1, #1
 80067b2:	4618      	mov	r0, r3
 80067b4:	f001 f818 	bl	80077e8 <RCCEx_PLL3_Config>
 80067b8:	4603      	mov	r3, r0
 80067ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80067be:	e004      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067c6:	e000      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80067c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10a      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80067d2:	4b96      	ldr	r3, [pc, #600]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d6:	f023 0107 	bic.w	r1, r3, #7
 80067da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067e0:	4a92      	ldr	r2, [pc, #584]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80067e2:	430b      	orrs	r3, r1
 80067e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80067e6:	e003      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f8:	f002 0304 	and.w	r3, r2, #4
 80067fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006800:	2300      	movs	r3, #0
 8006802:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006806:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800680a:	460b      	mov	r3, r1
 800680c:	4313      	orrs	r3, r2
 800680e:	d044      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006818:	2b05      	cmp	r3, #5
 800681a:	d825      	bhi.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800681c:	a201      	add	r2, pc, #4	@ (adr r2, 8006824 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800681e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006822:	bf00      	nop
 8006824:	08006871 	.word	0x08006871
 8006828:	0800683d 	.word	0x0800683d
 800682c:	08006853 	.word	0x08006853
 8006830:	08006871 	.word	0x08006871
 8006834:	08006871 	.word	0x08006871
 8006838:	08006871 	.word	0x08006871
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800683c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006840:	3308      	adds	r3, #8
 8006842:	2101      	movs	r1, #1
 8006844:	4618      	mov	r0, r3
 8006846:	f000 ff1d 	bl	8007684 <RCCEx_PLL2_Config>
 800684a:	4603      	mov	r3, r0
 800684c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006850:	e00f      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006856:	3328      	adds	r3, #40	@ 0x28
 8006858:	2101      	movs	r1, #1
 800685a:	4618      	mov	r0, r3
 800685c:	f000 ffc4 	bl	80077e8 <RCCEx_PLL3_Config>
 8006860:	4603      	mov	r3, r0
 8006862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006866:	e004      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800686e:	e000      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10b      	bne.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800687a:	4b6c      	ldr	r3, [pc, #432]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800687c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800687e:	f023 0107 	bic.w	r1, r3, #7
 8006882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800688a:	4a68      	ldr	r2, [pc, #416]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800688c:	430b      	orrs	r3, r1
 800688e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006890:	e003      	b.n	800689a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006892:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006896:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800689a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800689e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a2:	f002 0320 	and.w	r3, r2, #32
 80068a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80068aa:	2300      	movs	r3, #0
 80068ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80068b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80068b4:	460b      	mov	r3, r1
 80068b6:	4313      	orrs	r3, r2
 80068b8:	d055      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80068ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068c6:	d033      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80068c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068cc:	d82c      	bhi.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80068ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068d2:	d02f      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80068d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068d8:	d826      	bhi.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80068da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068de:	d02b      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80068e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80068e4:	d820      	bhi.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80068e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068ea:	d012      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80068ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068f0:	d81a      	bhi.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d022      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80068f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068fa:	d115      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006900:	3308      	adds	r3, #8
 8006902:	2100      	movs	r1, #0
 8006904:	4618      	mov	r0, r3
 8006906:	f000 febd 	bl	8007684 <RCCEx_PLL2_Config>
 800690a:	4603      	mov	r3, r0
 800690c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006910:	e015      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006916:	3328      	adds	r3, #40	@ 0x28
 8006918:	2102      	movs	r1, #2
 800691a:	4618      	mov	r0, r3
 800691c:	f000 ff64 	bl	80077e8 <RCCEx_PLL3_Config>
 8006920:	4603      	mov	r3, r0
 8006922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006926:	e00a      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800692e:	e006      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006930:	bf00      	nop
 8006932:	e004      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006934:	bf00      	nop
 8006936:	e002      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006938:	bf00      	nop
 800693a:	e000      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800693c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800693e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10b      	bne.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006946:	4b39      	ldr	r3, [pc, #228]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800694a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800694e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006956:	4a35      	ldr	r2, [pc, #212]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006958:	430b      	orrs	r3, r1
 800695a:	6553      	str	r3, [r2, #84]	@ 0x54
 800695c:	e003      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800695e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006962:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800696a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006972:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006976:	2300      	movs	r3, #0
 8006978:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800697c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006980:	460b      	mov	r3, r1
 8006982:	4313      	orrs	r3, r2
 8006984:	d058      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800698e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006992:	d033      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006994:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006998:	d82c      	bhi.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800699a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800699e:	d02f      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80069a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069a4:	d826      	bhi.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80069a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069aa:	d02b      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80069ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80069b0:	d820      	bhi.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80069b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069b6:	d012      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80069b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069bc:	d81a      	bhi.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d022      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80069c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069c6:	d115      	bne.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069cc:	3308      	adds	r3, #8
 80069ce:	2100      	movs	r1, #0
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 fe57 	bl	8007684 <RCCEx_PLL2_Config>
 80069d6:	4603      	mov	r3, r0
 80069d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80069dc:	e015      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e2:	3328      	adds	r3, #40	@ 0x28
 80069e4:	2102      	movs	r1, #2
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 fefe 	bl	80077e8 <RCCEx_PLL3_Config>
 80069ec:	4603      	mov	r3, r0
 80069ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80069f2:	e00a      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069fa:	e006      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80069fc:	bf00      	nop
 80069fe:	e004      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006a00:	bf00      	nop
 8006a02:	e002      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006a04:	bf00      	nop
 8006a06:	e000      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10e      	bne.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a12:	4b06      	ldr	r3, [pc, #24]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a16:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a22:	4a02      	ldr	r2, [pc, #8]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a24:	430b      	orrs	r3, r1
 8006a26:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a28:	e006      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006a2a:	bf00      	nop
 8006a2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a40:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006a44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a4e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006a52:	460b      	mov	r3, r1
 8006a54:	4313      	orrs	r3, r2
 8006a56:	d055      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006a60:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006a64:	d033      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006a66:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006a6a:	d82c      	bhi.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a70:	d02f      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006a72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a76:	d826      	bhi.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a78:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006a7c:	d02b      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006a7e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006a82:	d820      	bhi.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a88:	d012      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006a8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a8e:	d81a      	bhi.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d022      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006a94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a98:	d115      	bne.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fdee 	bl	8007684 <RCCEx_PLL2_Config>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006aae:	e015      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab4:	3328      	adds	r3, #40	@ 0x28
 8006ab6:	2102      	movs	r1, #2
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f000 fe95 	bl	80077e8 <RCCEx_PLL3_Config>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006ac4:	e00a      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006acc:	e006      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006ace:	bf00      	nop
 8006ad0:	e004      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006ad2:	bf00      	nop
 8006ad4:	e002      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006ad6:	bf00      	nop
 8006ad8:	e000      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006adc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10b      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ae4:	4ba1      	ldr	r3, [pc, #644]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ae8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006af4:	4a9d      	ldr	r2, [pc, #628]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006af6:	430b      	orrs	r3, r1
 8006af8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006afa:	e003      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006afc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0c:	f002 0308 	and.w	r3, r2, #8
 8006b10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006b14:	2300      	movs	r3, #0
 8006b16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b1a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4313      	orrs	r3, r2
 8006b22:	d01e      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b30:	d10c      	bne.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b36:	3328      	adds	r3, #40	@ 0x28
 8006b38:	2102      	movs	r1, #2
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 fe54 	bl	80077e8 <RCCEx_PLL3_Config>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006b4c:	4b87      	ldr	r3, [pc, #540]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b50:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b5c:	4a83      	ldr	r2, [pc, #524]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006b5e:	430b      	orrs	r3, r1
 8006b60:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6a:	f002 0310 	and.w	r3, r2, #16
 8006b6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b72:	2300      	movs	r3, #0
 8006b74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b78:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	d01e      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b8e:	d10c      	bne.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b94:	3328      	adds	r3, #40	@ 0x28
 8006b96:	2102      	movs	r1, #2
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f000 fe25 	bl	80077e8 <RCCEx_PLL3_Config>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d002      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006baa:	4b70      	ldr	r3, [pc, #448]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006bba:	4a6c      	ldr	r2, [pc, #432]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006bbc:	430b      	orrs	r3, r1
 8006bbe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006bcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006bd6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	d03e      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006be8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bec:	d022      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006bee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bf2:	d81b      	bhi.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bfc:	d00b      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006bfe:	e015      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c04:	3308      	adds	r3, #8
 8006c06:	2100      	movs	r1, #0
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f000 fd3b 	bl	8007684 <RCCEx_PLL2_Config>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006c14:	e00f      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c1a:	3328      	adds	r3, #40	@ 0x28
 8006c1c:	2102      	movs	r1, #2
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 fde2 	bl	80077e8 <RCCEx_PLL3_Config>
 8006c24:	4603      	mov	r3, r0
 8006c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006c2a:	e004      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c32:	e000      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10b      	bne.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c3e:	4b4b      	ldr	r3, [pc, #300]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c42:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006c4e:	4a47      	ldr	r2, [pc, #284]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c50:	430b      	orrs	r3, r1
 8006c52:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c54:	e003      	b.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c66:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006c6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c70:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006c74:	460b      	mov	r3, r1
 8006c76:	4313      	orrs	r3, r2
 8006c78:	d03b      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c86:	d01f      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006c88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006c8c:	d818      	bhi.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006c8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c92:	d003      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006c94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c98:	d007      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006c9a:	e011      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c9c:	4b33      	ldr	r3, [pc, #204]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca0:	4a32      	ldr	r2, [pc, #200]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006ca8:	e00f      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cae:	3328      	adds	r3, #40	@ 0x28
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 fd98 	bl	80077e8 <RCCEx_PLL3_Config>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006cbe:	e004      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cc6:	e000      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10b      	bne.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cd2:	4b26      	ldr	r3, [pc, #152]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ce2:	4a22      	ldr	r2, [pc, #136]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ce4:	430b      	orrs	r3, r1
 8006ce6:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ce8:	e003      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006cfe:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d00:	2300      	movs	r3, #0
 8006d02:	677b      	str	r3, [r7, #116]	@ 0x74
 8006d04:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006d08:	460b      	mov	r3, r1
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	d034      	beq.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d003      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d1c:	d007      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006d1e:	e011      	b.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d20:	4b12      	ldr	r3, [pc, #72]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d24:	4a11      	ldr	r2, [pc, #68]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d2c:	e00e      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d32:	3308      	adds	r3, #8
 8006d34:	2102      	movs	r1, #2
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 fca4 	bl	8007684 <RCCEx_PLL2_Config>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006d42:	e003      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10d      	bne.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006d54:	4b05      	ldr	r3, [pc, #20]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d58:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d62:	4a02      	ldr	r2, [pc, #8]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d64:	430b      	orrs	r3, r1
 8006d66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d68:	e006      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006d6a:	bf00      	nop
 8006d6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d80:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006d84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d86:	2300      	movs	r3, #0
 8006d88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d8a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4313      	orrs	r3, r2
 8006d92:	d00c      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d98:	3328      	adds	r3, #40	@ 0x28
 8006d9a:	2102      	movs	r1, #2
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 fd23 	bl	80077e8 <RCCEx_PLL3_Config>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006dba:	663b      	str	r3, [r7, #96]	@ 0x60
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	667b      	str	r3, [r7, #100]	@ 0x64
 8006dc0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	d038      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dd6:	d018      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006dd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ddc:	d811      	bhi.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006dde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006de2:	d014      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006de8:	d80b      	bhi.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d011      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006dee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006df2:	d106      	bne.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006df4:	4bc3      	ldr	r3, [pc, #780]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df8:	4ac2      	ldr	r2, [pc, #776]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006dfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006e00:	e008      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e08:	e004      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006e0a:	bf00      	nop
 8006e0c:	e002      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006e0e:	bf00      	nop
 8006e10:	e000      	b.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006e12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10b      	bne.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e1c:	4bb9      	ldr	r3, [pc, #740]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e20:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e2c:	4ab5      	ldr	r2, [pc, #724]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e2e:	430b      	orrs	r3, r1
 8006e30:	6553      	str	r3, [r2, #84]	@ 0x54
 8006e32:	e003      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e44:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006e48:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e4e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006e52:	460b      	mov	r3, r1
 8006e54:	4313      	orrs	r3, r2
 8006e56:	d009      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e58:	4baa      	ldr	r3, [pc, #680]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e5c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e66:	4aa7      	ldr	r2, [pc, #668]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e68:	430b      	orrs	r3, r1
 8006e6a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e74:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006e78:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e7e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006e82:	460b      	mov	r3, r1
 8006e84:	4313      	orrs	r3, r2
 8006e86:	d00a      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006e88:	4b9e      	ldr	r3, [pc, #632]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006e98:	4a9a      	ldr	r2, [pc, #616]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006e9a:	430b      	orrs	r3, r1
 8006e9c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006eac:	2300      	movs	r3, #0
 8006eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006eb0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	d009      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006eba:	4b92      	ldr	r3, [pc, #584]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ebe:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ec8:	4a8e      	ldr	r2, [pc, #568]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006eca:	430b      	orrs	r3, r1
 8006ecc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006eda:	643b      	str	r3, [r7, #64]	@ 0x40
 8006edc:	2300      	movs	r3, #0
 8006ede:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ee0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	d00e      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006eea:	4b86      	ldr	r3, [pc, #536]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	4a85      	ldr	r2, [pc, #532]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ef0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ef4:	6113      	str	r3, [r2, #16]
 8006ef6:	4b83      	ldr	r3, [pc, #524]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ef8:	6919      	ldr	r1, [r3, #16]
 8006efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006efe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006f02:	4a80      	ldr	r2, [pc, #512]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f04:	430b      	orrs	r3, r1
 8006f06:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f10:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006f14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f16:	2300      	movs	r3, #0
 8006f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f1a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006f1e:	460b      	mov	r3, r1
 8006f20:	4313      	orrs	r3, r2
 8006f22:	d009      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006f24:	4b77      	ldr	r3, [pc, #476]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f28:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f32:	4a74      	ldr	r2, [pc, #464]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f34:	430b      	orrs	r3, r1
 8006f36:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f40:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006f44:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f46:	2300      	movs	r3, #0
 8006f48:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f4a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006f4e:	460b      	mov	r3, r1
 8006f50:	4313      	orrs	r3, r2
 8006f52:	d00a      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f54:	4b6b      	ldr	r3, [pc, #428]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f58:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f64:	4a67      	ldr	r2, [pc, #412]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006f66:	430b      	orrs	r3, r1
 8006f68:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f72:	2100      	movs	r1, #0
 8006f74:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f7c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006f80:	460b      	mov	r3, r1
 8006f82:	4313      	orrs	r3, r2
 8006f84:	d011      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 fb78 	bl	8007684 <RCCEx_PLL2_Config>
 8006f94:	4603      	mov	r3, r0
 8006f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fa6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	6239      	str	r1, [r7, #32]
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fbc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	d011      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fca:	3308      	adds	r3, #8
 8006fcc:	2101      	movs	r1, #1
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 fb58 	bl	8007684 <RCCEx_PLL2_Config>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fe6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	61b9      	str	r1, [r7, #24]
 8006ff6:	f003 0304 	and.w	r3, r3, #4
 8006ffa:	61fb      	str	r3, [r7, #28]
 8006ffc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007000:	460b      	mov	r3, r1
 8007002:	4313      	orrs	r3, r2
 8007004:	d011      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800700a:	3308      	adds	r3, #8
 800700c:	2102      	movs	r1, #2
 800700e:	4618      	mov	r0, r3
 8007010:	f000 fb38 	bl	8007684 <RCCEx_PLL2_Config>
 8007014:	4603      	mov	r3, r0
 8007016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800701a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007026:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800702a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007032:	2100      	movs	r1, #0
 8007034:	6139      	str	r1, [r7, #16]
 8007036:	f003 0308 	and.w	r3, r3, #8
 800703a:	617b      	str	r3, [r7, #20]
 800703c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007040:	460b      	mov	r3, r1
 8007042:	4313      	orrs	r3, r2
 8007044:	d011      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800704a:	3328      	adds	r3, #40	@ 0x28
 800704c:	2100      	movs	r1, #0
 800704e:	4618      	mov	r0, r3
 8007050:	f000 fbca 	bl	80077e8 <RCCEx_PLL3_Config>
 8007054:	4603      	mov	r3, r0
 8007056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800705a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007066:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800706a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800706e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007072:	2100      	movs	r1, #0
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	f003 0310 	and.w	r3, r3, #16
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007080:	460b      	mov	r3, r1
 8007082:	4313      	orrs	r3, r2
 8007084:	d011      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708a:	3328      	adds	r3, #40	@ 0x28
 800708c:	2101      	movs	r1, #1
 800708e:	4618      	mov	r0, r3
 8007090:	f000 fbaa 	bl	80077e8 <RCCEx_PLL3_Config>
 8007094:	4603      	mov	r3, r0
 8007096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800709a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80070aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b2:	2100      	movs	r1, #0
 80070b4:	6039      	str	r1, [r7, #0]
 80070b6:	f003 0320 	and.w	r3, r3, #32
 80070ba:	607b      	str	r3, [r7, #4]
 80070bc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80070c0:	460b      	mov	r3, r1
 80070c2:	4313      	orrs	r3, r2
 80070c4:	d011      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ca:	3328      	adds	r3, #40	@ 0x28
 80070cc:	2102      	movs	r1, #2
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 fb8a 	bl	80077e8 <RCCEx_PLL3_Config>
 80070d4:	4603      	mov	r3, r0
 80070d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80070da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80070ea:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	e000      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80070fe:	46bd      	mov	sp, r7
 8007100:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007104:	58024400 	.word	0x58024400

08007108 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800710c:	f7fe fd96 	bl	8005c3c <HAL_RCC_GetHCLKFreq>
 8007110:	4602      	mov	r2, r0
 8007112:	4b06      	ldr	r3, [pc, #24]	@ (800712c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	091b      	lsrs	r3, r3, #4
 8007118:	f003 0307 	and.w	r3, r3, #7
 800711c:	4904      	ldr	r1, [pc, #16]	@ (8007130 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800711e:	5ccb      	ldrb	r3, [r1, r3]
 8007120:	f003 031f 	and.w	r3, r3, #31
 8007124:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007128:	4618      	mov	r0, r3
 800712a:	bd80      	pop	{r7, pc}
 800712c:	58024400 	.word	0x58024400
 8007130:	0800dbe4 	.word	0x0800dbe4

08007134 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007134:	b480      	push	{r7}
 8007136:	b089      	sub	sp, #36	@ 0x24
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800713c:	4ba1      	ldr	r3, [pc, #644]	@ (80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800713e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007140:	f003 0303 	and.w	r3, r3, #3
 8007144:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007146:	4b9f      	ldr	r3, [pc, #636]	@ (80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800714a:	0b1b      	lsrs	r3, r3, #12
 800714c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007150:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007152:	4b9c      	ldr	r3, [pc, #624]	@ (80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007156:	091b      	lsrs	r3, r3, #4
 8007158:	f003 0301 	and.w	r3, r3, #1
 800715c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800715e:	4b99      	ldr	r3, [pc, #612]	@ (80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007162:	08db      	lsrs	r3, r3, #3
 8007164:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	fb02 f303 	mul.w	r3, r2, r3
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007176:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 8111 	beq.w	80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	2b02      	cmp	r3, #2
 8007186:	f000 8083 	beq.w	8007290 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	2b02      	cmp	r3, #2
 800718e:	f200 80a1 	bhi.w	80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d056      	beq.n	800724c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800719e:	e099      	b.n	80072d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071a0:	4b88      	ldr	r3, [pc, #544]	@ (80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0320 	and.w	r3, r3, #32
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d02d      	beq.n	8007208 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071ac:	4b85      	ldr	r3, [pc, #532]	@ (80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	08db      	lsrs	r3, r3, #3
 80071b2:	f003 0303 	and.w	r3, r3, #3
 80071b6:	4a84      	ldr	r2, [pc, #528]	@ (80073c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80071b8:	fa22 f303 	lsr.w	r3, r2, r3
 80071bc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	ee07 3a90 	vmov	s15, r3
 80071c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	ee07 3a90 	vmov	s15, r3
 80071ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071d6:	4b7b      	ldr	r3, [pc, #492]	@ (80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071de:	ee07 3a90 	vmov	s15, r3
 80071e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007202:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007206:	e087      	b.n	8007318 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007212:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80073d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800721a:	4b6a      	ldr	r3, [pc, #424]	@ (80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800721c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800721e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007222:	ee07 3a90 	vmov	s15, r3
 8007226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800722a:	ed97 6a03 	vldr	s12, [r7, #12]
 800722e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800723a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800723e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800724a:	e065      	b.n	8007318 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007256:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800725a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800725e:	4b59      	ldr	r3, [pc, #356]	@ (80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007266:	ee07 3a90 	vmov	s15, r3
 800726a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800726e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007272:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800727a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800727e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800728a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800728e:	e043      	b.n	8007318 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	ee07 3a90 	vmov	s15, r3
 8007296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80073d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800729e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072a2:	4b48      	ldr	r3, [pc, #288]	@ (80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072d2:	e021      	b.n	8007318 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	ee07 3a90 	vmov	s15, r3
 80072da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072e6:	4b37      	ldr	r3, [pc, #220]	@ (80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ee:	ee07 3a90 	vmov	s15, r3
 80072f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80073cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800730a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800730e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007312:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007316:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007318:	4b2a      	ldr	r3, [pc, #168]	@ (80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800731a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800731c:	0a5b      	lsrs	r3, r3, #9
 800731e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007322:	ee07 3a90 	vmov	s15, r3
 8007326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800732e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007332:	edd7 6a07 	vldr	s13, [r7, #28]
 8007336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800733a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800733e:	ee17 2a90 	vmov	r2, s15
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007346:	4b1f      	ldr	r3, [pc, #124]	@ (80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800734a:	0c1b      	lsrs	r3, r3, #16
 800734c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007350:	ee07 3a90 	vmov	s15, r3
 8007354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007358:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800735c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007360:	edd7 6a07 	vldr	s13, [r7, #28]
 8007364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800736c:	ee17 2a90 	vmov	r2, s15
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007374:	4b13      	ldr	r3, [pc, #76]	@ (80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007378:	0e1b      	lsrs	r3, r3, #24
 800737a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800737e:	ee07 3a90 	vmov	s15, r3
 8007382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007386:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800738a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800738e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800739a:	ee17 2a90 	vmov	r2, s15
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80073a2:	e008      	b.n	80073b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	609a      	str	r2, [r3, #8]
}
 80073b6:	bf00      	nop
 80073b8:	3724      	adds	r7, #36	@ 0x24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	58024400 	.word	0x58024400
 80073c8:	03d09000 	.word	0x03d09000
 80073cc:	46000000 	.word	0x46000000
 80073d0:	4c742400 	.word	0x4c742400
 80073d4:	4a742400 	.word	0x4a742400
 80073d8:	4af42400 	.word	0x4af42400

080073dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80073dc:	b480      	push	{r7}
 80073de:	b089      	sub	sp, #36	@ 0x24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073e4:	4ba1      	ldr	r3, [pc, #644]	@ (800766c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e8:	f003 0303 	and.w	r3, r3, #3
 80073ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80073ee:	4b9f      	ldr	r3, [pc, #636]	@ (800766c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f2:	0d1b      	lsrs	r3, r3, #20
 80073f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80073fa:	4b9c      	ldr	r3, [pc, #624]	@ (800766c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fe:	0a1b      	lsrs	r3, r3, #8
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007406:	4b99      	ldr	r3, [pc, #612]	@ (800766c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800740a:	08db      	lsrs	r3, r3, #3
 800740c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	fb02 f303 	mul.w	r3, r2, r3
 8007416:	ee07 3a90 	vmov	s15, r3
 800741a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800741e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 8111 	beq.w	800764c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	2b02      	cmp	r3, #2
 800742e:	f000 8083 	beq.w	8007538 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	2b02      	cmp	r3, #2
 8007436:	f200 80a1 	bhi.w	800757c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d003      	beq.n	8007448 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d056      	beq.n	80074f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007446:	e099      	b.n	800757c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007448:	4b88      	ldr	r3, [pc, #544]	@ (800766c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0320 	and.w	r3, r3, #32
 8007450:	2b00      	cmp	r3, #0
 8007452:	d02d      	beq.n	80074b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007454:	4b85      	ldr	r3, [pc, #532]	@ (800766c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	08db      	lsrs	r3, r3, #3
 800745a:	f003 0303 	and.w	r3, r3, #3
 800745e:	4a84      	ldr	r2, [pc, #528]	@ (8007670 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007460:	fa22 f303 	lsr.w	r3, r2, r3
 8007464:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	ee07 3a90 	vmov	s15, r3
 800746c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800747e:	4b7b      	ldr	r3, [pc, #492]	@ (800766c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007486:	ee07 3a90 	vmov	s15, r3
 800748a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800748e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007492:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800749a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800749e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80074ae:	e087      	b.n	80075c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	ee07 3a90 	vmov	s15, r3
 80074b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007678 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80074be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074c2:	4b6a      	ldr	r3, [pc, #424]	@ (800766c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ca:	ee07 3a90 	vmov	s15, r3
 80074ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074f2:	e065      	b.n	80075c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	ee07 3a90 	vmov	s15, r3
 80074fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800767c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007506:	4b59      	ldr	r3, [pc, #356]	@ (800766c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800750a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800750e:	ee07 3a90 	vmov	s15, r3
 8007512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007516:	ed97 6a03 	vldr	s12, [r7, #12]
 800751a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800751e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800752a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800752e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007532:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007536:	e043      	b.n	80075c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	ee07 3a90 	vmov	s15, r3
 800753e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007542:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007680 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800754a:	4b48      	ldr	r3, [pc, #288]	@ (800766c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800754c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800754e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007552:	ee07 3a90 	vmov	s15, r3
 8007556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800755a:	ed97 6a03 	vldr	s12, [r7, #12]
 800755e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800756a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800756e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007576:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800757a:	e021      	b.n	80075c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	ee07 3a90 	vmov	s15, r3
 8007582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007586:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800767c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800758a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800758e:	4b37      	ldr	r3, [pc, #220]	@ (800766c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007596:	ee07 3a90 	vmov	s15, r3
 800759a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800759e:	ed97 6a03 	vldr	s12, [r7, #12]
 80075a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80075c0:	4b2a      	ldr	r3, [pc, #168]	@ (800766c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c4:	0a5b      	lsrs	r3, r3, #9
 80075c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075ca:	ee07 3a90 	vmov	s15, r3
 80075ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075da:	edd7 6a07 	vldr	s13, [r7, #28]
 80075de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075e6:	ee17 2a90 	vmov	r2, s15
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80075ee:	4b1f      	ldr	r3, [pc, #124]	@ (800766c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f2:	0c1b      	lsrs	r3, r3, #16
 80075f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075f8:	ee07 3a90 	vmov	s15, r3
 80075fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007600:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007604:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007608:	edd7 6a07 	vldr	s13, [r7, #28]
 800760c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007614:	ee17 2a90 	vmov	r2, s15
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800761c:	4b13      	ldr	r3, [pc, #76]	@ (800766c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800761e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007620:	0e1b      	lsrs	r3, r3, #24
 8007622:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007626:	ee07 3a90 	vmov	s15, r3
 800762a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800762e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007632:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007636:	edd7 6a07 	vldr	s13, [r7, #28]
 800763a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800763e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007642:	ee17 2a90 	vmov	r2, s15
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800764a:	e008      	b.n	800765e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	609a      	str	r2, [r3, #8]
}
 800765e:	bf00      	nop
 8007660:	3724      	adds	r7, #36	@ 0x24
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	58024400 	.word	0x58024400
 8007670:	03d09000 	.word	0x03d09000
 8007674:	46000000 	.word	0x46000000
 8007678:	4c742400 	.word	0x4c742400
 800767c:	4a742400 	.word	0x4a742400
 8007680:	4af42400 	.word	0x4af42400

08007684 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800768e:	2300      	movs	r3, #0
 8007690:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007692:	4b53      	ldr	r3, [pc, #332]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 8007694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007696:	f003 0303 	and.w	r3, r3, #3
 800769a:	2b03      	cmp	r3, #3
 800769c:	d101      	bne.n	80076a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e099      	b.n	80077d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80076a2:	4b4f      	ldr	r3, [pc, #316]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a4e      	ldr	r2, [pc, #312]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 80076a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80076ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076ae:	f7fa fdf5 	bl	800229c <HAL_GetTick>
 80076b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076b4:	e008      	b.n	80076c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80076b6:	f7fa fdf1 	bl	800229c <HAL_GetTick>
 80076ba:	4602      	mov	r2, r0
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d901      	bls.n	80076c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e086      	b.n	80077d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076c8:	4b45      	ldr	r3, [pc, #276]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1f0      	bne.n	80076b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80076d4:	4b42      	ldr	r3, [pc, #264]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 80076d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	031b      	lsls	r3, r3, #12
 80076e2:	493f      	ldr	r1, [pc, #252]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	3b01      	subs	r3, #1
 80076ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	3b01      	subs	r3, #1
 80076f8:	025b      	lsls	r3, r3, #9
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	431a      	orrs	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	3b01      	subs	r3, #1
 8007704:	041b      	lsls	r3, r3, #16
 8007706:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800770a:	431a      	orrs	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	3b01      	subs	r3, #1
 8007712:	061b      	lsls	r3, r3, #24
 8007714:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007718:	4931      	ldr	r1, [pc, #196]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 800771a:	4313      	orrs	r3, r2
 800771c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800771e:	4b30      	ldr	r3, [pc, #192]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 8007720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007722:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	492d      	ldr	r1, [pc, #180]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 800772c:	4313      	orrs	r3, r2
 800772e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007730:	4b2b      	ldr	r3, [pc, #172]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 8007732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007734:	f023 0220 	bic.w	r2, r3, #32
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	4928      	ldr	r1, [pc, #160]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 800773e:	4313      	orrs	r3, r2
 8007740:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007742:	4b27      	ldr	r3, [pc, #156]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 8007744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007746:	4a26      	ldr	r2, [pc, #152]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 8007748:	f023 0310 	bic.w	r3, r3, #16
 800774c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800774e:	4b24      	ldr	r3, [pc, #144]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 8007750:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007752:	4b24      	ldr	r3, [pc, #144]	@ (80077e4 <RCCEx_PLL2_Config+0x160>)
 8007754:	4013      	ands	r3, r2
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	69d2      	ldr	r2, [r2, #28]
 800775a:	00d2      	lsls	r2, r2, #3
 800775c:	4920      	ldr	r1, [pc, #128]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 800775e:	4313      	orrs	r3, r2
 8007760:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007762:	4b1f      	ldr	r3, [pc, #124]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 8007764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007766:	4a1e      	ldr	r2, [pc, #120]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 8007768:	f043 0310 	orr.w	r3, r3, #16
 800776c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d106      	bne.n	8007782 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007774:	4b1a      	ldr	r3, [pc, #104]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 8007776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007778:	4a19      	ldr	r2, [pc, #100]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 800777a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800777e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007780:	e00f      	b.n	80077a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d106      	bne.n	8007796 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007788:	4b15      	ldr	r3, [pc, #84]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 800778a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800778c:	4a14      	ldr	r2, [pc, #80]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 800778e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007792:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007794:	e005      	b.n	80077a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007796:	4b12      	ldr	r3, [pc, #72]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 8007798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779a:	4a11      	ldr	r2, [pc, #68]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 800779c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80077a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80077a2:	4b0f      	ldr	r3, [pc, #60]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a0e      	ldr	r2, [pc, #56]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 80077a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80077ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077ae:	f7fa fd75 	bl	800229c <HAL_GetTick>
 80077b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077b4:	e008      	b.n	80077c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80077b6:	f7fa fd71 	bl	800229c <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d901      	bls.n	80077c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e006      	b.n	80077d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077c8:	4b05      	ldr	r3, [pc, #20]	@ (80077e0 <RCCEx_PLL2_Config+0x15c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d0f0      	beq.n	80077b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	58024400 	.word	0x58024400
 80077e4:	ffff0007 	.word	0xffff0007

080077e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077f6:	4b53      	ldr	r3, [pc, #332]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 80077f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077fa:	f003 0303 	and.w	r3, r3, #3
 80077fe:	2b03      	cmp	r3, #3
 8007800:	d101      	bne.n	8007806 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e099      	b.n	800793a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007806:	4b4f      	ldr	r3, [pc, #316]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a4e      	ldr	r2, [pc, #312]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 800780c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007810:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007812:	f7fa fd43 	bl	800229c <HAL_GetTick>
 8007816:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007818:	e008      	b.n	800782c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800781a:	f7fa fd3f 	bl	800229c <HAL_GetTick>
 800781e:	4602      	mov	r2, r0
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	2b02      	cmp	r3, #2
 8007826:	d901      	bls.n	800782c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	e086      	b.n	800793a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800782c:	4b45      	ldr	r3, [pc, #276]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1f0      	bne.n	800781a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007838:	4b42      	ldr	r3, [pc, #264]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 800783a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800783c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	051b      	lsls	r3, r3, #20
 8007846:	493f      	ldr	r1, [pc, #252]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 8007848:	4313      	orrs	r3, r2
 800784a:	628b      	str	r3, [r1, #40]	@ 0x28
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	3b01      	subs	r3, #1
 8007852:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	3b01      	subs	r3, #1
 800785c:	025b      	lsls	r3, r3, #9
 800785e:	b29b      	uxth	r3, r3
 8007860:	431a      	orrs	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	3b01      	subs	r3, #1
 8007868:	041b      	lsls	r3, r3, #16
 800786a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800786e:	431a      	orrs	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	3b01      	subs	r3, #1
 8007876:	061b      	lsls	r3, r3, #24
 8007878:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800787c:	4931      	ldr	r1, [pc, #196]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 800787e:	4313      	orrs	r3, r2
 8007880:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007882:	4b30      	ldr	r3, [pc, #192]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 8007884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007886:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	492d      	ldr	r1, [pc, #180]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 8007890:	4313      	orrs	r3, r2
 8007892:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007894:	4b2b      	ldr	r3, [pc, #172]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 8007896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007898:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	4928      	ldr	r1, [pc, #160]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80078a6:	4b27      	ldr	r3, [pc, #156]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 80078a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078aa:	4a26      	ldr	r2, [pc, #152]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 80078ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80078b2:	4b24      	ldr	r3, [pc, #144]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 80078b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078b6:	4b24      	ldr	r3, [pc, #144]	@ (8007948 <RCCEx_PLL3_Config+0x160>)
 80078b8:	4013      	ands	r3, r2
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	69d2      	ldr	r2, [r2, #28]
 80078be:	00d2      	lsls	r2, r2, #3
 80078c0:	4920      	ldr	r1, [pc, #128]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 80078c2:	4313      	orrs	r3, r2
 80078c4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80078c6:	4b1f      	ldr	r3, [pc, #124]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 80078c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 80078cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d106      	bne.n	80078e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80078d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 80078da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078dc:	4a19      	ldr	r2, [pc, #100]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 80078de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80078e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80078e4:	e00f      	b.n	8007906 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d106      	bne.n	80078fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80078ec:	4b15      	ldr	r3, [pc, #84]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 80078ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f0:	4a14      	ldr	r2, [pc, #80]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 80078f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80078f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80078f8:	e005      	b.n	8007906 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80078fa:	4b12      	ldr	r3, [pc, #72]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 80078fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fe:	4a11      	ldr	r2, [pc, #68]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 8007900:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007904:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007906:	4b0f      	ldr	r3, [pc, #60]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a0e      	ldr	r2, [pc, #56]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 800790c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007910:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007912:	f7fa fcc3 	bl	800229c <HAL_GetTick>
 8007916:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007918:	e008      	b.n	800792c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800791a:	f7fa fcbf 	bl	800229c <HAL_GetTick>
 800791e:	4602      	mov	r2, r0
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	2b02      	cmp	r3, #2
 8007926:	d901      	bls.n	800792c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	e006      	b.n	800793a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800792c:	4b05      	ldr	r3, [pc, #20]	@ (8007944 <RCCEx_PLL3_Config+0x15c>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d0f0      	beq.n	800791a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007938:	7bfb      	ldrb	r3, [r7, #15]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	58024400 	.word	0x58024400
 8007948:	ffff0007 	.word	0xffff0007

0800794c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e049      	b.n	80079f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d106      	bne.n	8007978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7fa f90c 	bl	8001b90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2202      	movs	r2, #2
 800797c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	3304      	adds	r3, #4
 8007988:	4619      	mov	r1, r3
 800798a:	4610      	mov	r0, r2
 800798c:	f000 faa4 	bl	8007ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b082      	sub	sp, #8
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e049      	b.n	8007aa0 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d106      	bne.n	8007a26 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7fa f905 	bl	8001c30 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2202      	movs	r2, #2
 8007a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	3304      	adds	r3, #4
 8007a36:	4619      	mov	r1, r3
 8007a38:	4610      	mov	r0, r2
 8007a3a:	f000 fa4d 	bl	8007ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d101      	bne.n	8007abc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e08f      	b.n	8007bdc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d106      	bne.n	8007ad6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7f9 ff15 	bl	8001900 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2202      	movs	r2, #2
 8007ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	6899      	ldr	r1, [r3, #8]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	4b3e      	ldr	r3, [pc, #248]	@ (8007be4 <HAL_TIM_Encoder_Init+0x13c>)
 8007aea:	400b      	ands	r3, r1
 8007aec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	3304      	adds	r3, #4
 8007af6:	4619      	mov	r1, r3
 8007af8:	4610      	mov	r0, r2
 8007afa:	f000 f9ed 	bl	8007ed8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6a1b      	ldr	r3, [r3, #32]
 8007b14:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	4b31      	ldr	r3, [pc, #196]	@ (8007be8 <HAL_TIM_Encoder_Init+0x140>)
 8007b24:	4013      	ands	r3, r2
 8007b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	689a      	ldr	r2, [r3, #8]
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	021b      	lsls	r3, r3, #8
 8007b32:	4313      	orrs	r3, r2
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	4b2b      	ldr	r3, [pc, #172]	@ (8007bec <HAL_TIM_Encoder_Init+0x144>)
 8007b3e:	4013      	ands	r3, r2
 8007b40:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	4b2a      	ldr	r3, [pc, #168]	@ (8007bf0 <HAL_TIM_Encoder_Init+0x148>)
 8007b46:	4013      	ands	r3, r2
 8007b48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	68da      	ldr	r2, [r3, #12]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	021b      	lsls	r3, r3, #8
 8007b54:	4313      	orrs	r3, r2
 8007b56:	693a      	ldr	r2, [r7, #16]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	011a      	lsls	r2, r3, #4
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	031b      	lsls	r3, r3, #12
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007b76:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007b7e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	011b      	lsls	r3, r3, #4
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	693a      	ldr	r2, [r7, #16]
 8007ba0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3718      	adds	r7, #24
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	fffebff8 	.word	0xfffebff8
 8007be8:	fffffcfc 	.word	0xfffffcfc
 8007bec:	fffff3f3 	.word	0xfffff3f3
 8007bf0:	ffff0f0f 	.word	0xffff0f0f

08007bf4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d101      	bne.n	8007c12 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007c0e:	2302      	movs	r3, #2
 8007c10:	e066      	b.n	8007ce0 <HAL_TIM_OC_ConfigChannel+0xec>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b14      	cmp	r3, #20
 8007c1e:	d857      	bhi.n	8007cd0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007c20:	a201      	add	r2, pc, #4	@ (adr r2, 8007c28 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c26:	bf00      	nop
 8007c28:	08007c7d 	.word	0x08007c7d
 8007c2c:	08007cd1 	.word	0x08007cd1
 8007c30:	08007cd1 	.word	0x08007cd1
 8007c34:	08007cd1 	.word	0x08007cd1
 8007c38:	08007c8b 	.word	0x08007c8b
 8007c3c:	08007cd1 	.word	0x08007cd1
 8007c40:	08007cd1 	.word	0x08007cd1
 8007c44:	08007cd1 	.word	0x08007cd1
 8007c48:	08007c99 	.word	0x08007c99
 8007c4c:	08007cd1 	.word	0x08007cd1
 8007c50:	08007cd1 	.word	0x08007cd1
 8007c54:	08007cd1 	.word	0x08007cd1
 8007c58:	08007ca7 	.word	0x08007ca7
 8007c5c:	08007cd1 	.word	0x08007cd1
 8007c60:	08007cd1 	.word	0x08007cd1
 8007c64:	08007cd1 	.word	0x08007cd1
 8007c68:	08007cb5 	.word	0x08007cb5
 8007c6c:	08007cd1 	.word	0x08007cd1
 8007c70:	08007cd1 	.word	0x08007cd1
 8007c74:	08007cd1 	.word	0x08007cd1
 8007c78:	08007cc3 	.word	0x08007cc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68b9      	ldr	r1, [r7, #8]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 f9c8 	bl	8008018 <TIM_OC1_SetConfig>
      break;
 8007c88:	e025      	b.n	8007cd6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68b9      	ldr	r1, [r7, #8]
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 fa51 	bl	8008138 <TIM_OC2_SetConfig>
      break;
 8007c96:	e01e      	b.n	8007cd6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68b9      	ldr	r1, [r7, #8]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f000 fad4 	bl	800824c <TIM_OC3_SetConfig>
      break;
 8007ca4:	e017      	b.n	8007cd6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68b9      	ldr	r1, [r7, #8]
 8007cac:	4618      	mov	r0, r3
 8007cae:	f000 fb55 	bl	800835c <TIM_OC4_SetConfig>
      break;
 8007cb2:	e010      	b.n	8007cd6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68b9      	ldr	r1, [r7, #8]
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 fbb8 	bl	8008430 <TIM_OC5_SetConfig>
      break;
 8007cc0:	e009      	b.n	8007cd6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68b9      	ldr	r1, [r7, #8]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 fc15 	bl	80084f8 <TIM_OC6_SetConfig>
      break;
 8007cce:	e002      	b.n	8007cd6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3718      	adds	r7, #24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d101      	bne.n	8007d04 <HAL_TIM_ConfigClockSource+0x1c>
 8007d00:	2302      	movs	r3, #2
 8007d02:	e0dc      	b.n	8007ebe <HAL_TIM_ConfigClockSource+0x1d6>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	4b6a      	ldr	r3, [pc, #424]	@ (8007ec8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007d20:	4013      	ands	r3, r2
 8007d22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a64      	ldr	r2, [pc, #400]	@ (8007ecc <HAL_TIM_ConfigClockSource+0x1e4>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	f000 80a9 	beq.w	8007e92 <HAL_TIM_ConfigClockSource+0x1aa>
 8007d40:	4a62      	ldr	r2, [pc, #392]	@ (8007ecc <HAL_TIM_ConfigClockSource+0x1e4>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	f200 80ae 	bhi.w	8007ea4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d48:	4a61      	ldr	r2, [pc, #388]	@ (8007ed0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	f000 80a1 	beq.w	8007e92 <HAL_TIM_ConfigClockSource+0x1aa>
 8007d50:	4a5f      	ldr	r2, [pc, #380]	@ (8007ed0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	f200 80a6 	bhi.w	8007ea4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d58:	4a5e      	ldr	r2, [pc, #376]	@ (8007ed4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	f000 8099 	beq.w	8007e92 <HAL_TIM_ConfigClockSource+0x1aa>
 8007d60:	4a5c      	ldr	r2, [pc, #368]	@ (8007ed4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	f200 809e 	bhi.w	8007ea4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d68:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007d6c:	f000 8091 	beq.w	8007e92 <HAL_TIM_ConfigClockSource+0x1aa>
 8007d70:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007d74:	f200 8096 	bhi.w	8007ea4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d7c:	f000 8089 	beq.w	8007e92 <HAL_TIM_ConfigClockSource+0x1aa>
 8007d80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d84:	f200 808e 	bhi.w	8007ea4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d8c:	d03e      	beq.n	8007e0c <HAL_TIM_ConfigClockSource+0x124>
 8007d8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d92:	f200 8087 	bhi.w	8007ea4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d9a:	f000 8086 	beq.w	8007eaa <HAL_TIM_ConfigClockSource+0x1c2>
 8007d9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007da2:	d87f      	bhi.n	8007ea4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007da4:	2b70      	cmp	r3, #112	@ 0x70
 8007da6:	d01a      	beq.n	8007dde <HAL_TIM_ConfigClockSource+0xf6>
 8007da8:	2b70      	cmp	r3, #112	@ 0x70
 8007daa:	d87b      	bhi.n	8007ea4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007dac:	2b60      	cmp	r3, #96	@ 0x60
 8007dae:	d050      	beq.n	8007e52 <HAL_TIM_ConfigClockSource+0x16a>
 8007db0:	2b60      	cmp	r3, #96	@ 0x60
 8007db2:	d877      	bhi.n	8007ea4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007db4:	2b50      	cmp	r3, #80	@ 0x50
 8007db6:	d03c      	beq.n	8007e32 <HAL_TIM_ConfigClockSource+0x14a>
 8007db8:	2b50      	cmp	r3, #80	@ 0x50
 8007dba:	d873      	bhi.n	8007ea4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007dbc:	2b40      	cmp	r3, #64	@ 0x40
 8007dbe:	d058      	beq.n	8007e72 <HAL_TIM_ConfigClockSource+0x18a>
 8007dc0:	2b40      	cmp	r3, #64	@ 0x40
 8007dc2:	d86f      	bhi.n	8007ea4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007dc4:	2b30      	cmp	r3, #48	@ 0x30
 8007dc6:	d064      	beq.n	8007e92 <HAL_TIM_ConfigClockSource+0x1aa>
 8007dc8:	2b30      	cmp	r3, #48	@ 0x30
 8007dca:	d86b      	bhi.n	8007ea4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007dcc:	2b20      	cmp	r3, #32
 8007dce:	d060      	beq.n	8007e92 <HAL_TIM_ConfigClockSource+0x1aa>
 8007dd0:	2b20      	cmp	r3, #32
 8007dd2:	d867      	bhi.n	8007ea4 <HAL_TIM_ConfigClockSource+0x1bc>
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d05c      	beq.n	8007e92 <HAL_TIM_ConfigClockSource+0x1aa>
 8007dd8:	2b10      	cmp	r3, #16
 8007dda:	d05a      	beq.n	8007e92 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ddc:	e062      	b.n	8007ea4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007dee:	f000 fc67 	bl	80086c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007e00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	609a      	str	r2, [r3, #8]
      break;
 8007e0a:	e04f      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e1c:	f000 fc50 	bl	80086c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689a      	ldr	r2, [r3, #8]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e2e:	609a      	str	r2, [r3, #8]
      break;
 8007e30:	e03c      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e3e:	461a      	mov	r2, r3
 8007e40:	f000 fbc0 	bl	80085c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2150      	movs	r1, #80	@ 0x50
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 fc1a 	bl	8008684 <TIM_ITRx_SetConfig>
      break;
 8007e50:	e02c      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e5e:	461a      	mov	r2, r3
 8007e60:	f000 fbdf 	bl	8008622 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2160      	movs	r1, #96	@ 0x60
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 fc0a 	bl	8008684 <TIM_ITRx_SetConfig>
      break;
 8007e70:	e01c      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e7e:	461a      	mov	r2, r3
 8007e80:	f000 fba0 	bl	80085c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2140      	movs	r1, #64	@ 0x40
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 fbfa 	bl	8008684 <TIM_ITRx_SetConfig>
      break;
 8007e90:	e00c      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	f000 fbf1 	bl	8008684 <TIM_ITRx_SetConfig>
      break;
 8007ea2:	e003      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ea8:	e000      	b.n	8007eac <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	ffceff88 	.word	0xffceff88
 8007ecc:	00100040 	.word	0x00100040
 8007ed0:	00100030 	.word	0x00100030
 8007ed4:	00100020 	.word	0x00100020

08007ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a43      	ldr	r2, [pc, #268]	@ (8007ff8 <TIM_Base_SetConfig+0x120>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d013      	beq.n	8007f18 <TIM_Base_SetConfig+0x40>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ef6:	d00f      	beq.n	8007f18 <TIM_Base_SetConfig+0x40>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a40      	ldr	r2, [pc, #256]	@ (8007ffc <TIM_Base_SetConfig+0x124>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d00b      	beq.n	8007f18 <TIM_Base_SetConfig+0x40>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a3f      	ldr	r2, [pc, #252]	@ (8008000 <TIM_Base_SetConfig+0x128>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d007      	beq.n	8007f18 <TIM_Base_SetConfig+0x40>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a3e      	ldr	r2, [pc, #248]	@ (8008004 <TIM_Base_SetConfig+0x12c>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d003      	beq.n	8007f18 <TIM_Base_SetConfig+0x40>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a3d      	ldr	r2, [pc, #244]	@ (8008008 <TIM_Base_SetConfig+0x130>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d108      	bne.n	8007f2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a32      	ldr	r2, [pc, #200]	@ (8007ff8 <TIM_Base_SetConfig+0x120>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d01f      	beq.n	8007f72 <TIM_Base_SetConfig+0x9a>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f38:	d01b      	beq.n	8007f72 <TIM_Base_SetConfig+0x9a>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a2f      	ldr	r2, [pc, #188]	@ (8007ffc <TIM_Base_SetConfig+0x124>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d017      	beq.n	8007f72 <TIM_Base_SetConfig+0x9a>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a2e      	ldr	r2, [pc, #184]	@ (8008000 <TIM_Base_SetConfig+0x128>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d013      	beq.n	8007f72 <TIM_Base_SetConfig+0x9a>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a2d      	ldr	r2, [pc, #180]	@ (8008004 <TIM_Base_SetConfig+0x12c>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d00f      	beq.n	8007f72 <TIM_Base_SetConfig+0x9a>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a2c      	ldr	r2, [pc, #176]	@ (8008008 <TIM_Base_SetConfig+0x130>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d00b      	beq.n	8007f72 <TIM_Base_SetConfig+0x9a>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800800c <TIM_Base_SetConfig+0x134>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d007      	beq.n	8007f72 <TIM_Base_SetConfig+0x9a>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a2a      	ldr	r2, [pc, #168]	@ (8008010 <TIM_Base_SetConfig+0x138>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d003      	beq.n	8007f72 <TIM_Base_SetConfig+0x9a>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a29      	ldr	r2, [pc, #164]	@ (8008014 <TIM_Base_SetConfig+0x13c>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d108      	bne.n	8007f84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	689a      	ldr	r2, [r3, #8]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a14      	ldr	r2, [pc, #80]	@ (8007ff8 <TIM_Base_SetConfig+0x120>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d00f      	beq.n	8007fca <TIM_Base_SetConfig+0xf2>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a16      	ldr	r2, [pc, #88]	@ (8008008 <TIM_Base_SetConfig+0x130>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d00b      	beq.n	8007fca <TIM_Base_SetConfig+0xf2>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a15      	ldr	r2, [pc, #84]	@ (800800c <TIM_Base_SetConfig+0x134>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d007      	beq.n	8007fca <TIM_Base_SetConfig+0xf2>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a14      	ldr	r2, [pc, #80]	@ (8008010 <TIM_Base_SetConfig+0x138>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d003      	beq.n	8007fca <TIM_Base_SetConfig+0xf2>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a13      	ldr	r2, [pc, #76]	@ (8008014 <TIM_Base_SetConfig+0x13c>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d103      	bne.n	8007fd2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	691a      	ldr	r2, [r3, #16]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f043 0204 	orr.w	r2, r3, #4
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	601a      	str	r2, [r3, #0]
}
 8007fea:	bf00      	nop
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	40010000 	.word	0x40010000
 8007ffc:	40000400 	.word	0x40000400
 8008000:	40000800 	.word	0x40000800
 8008004:	40000c00 	.word	0x40000c00
 8008008:	40010400 	.word	0x40010400
 800800c:	40014000 	.word	0x40014000
 8008010:	40014400 	.word	0x40014400
 8008014:	40014800 	.word	0x40014800

08008018 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008018:	b480      	push	{r7}
 800801a:	b087      	sub	sp, #28
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a1b      	ldr	r3, [r3, #32]
 800802c:	f023 0201 	bic.w	r2, r3, #1
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	4b37      	ldr	r3, [pc, #220]	@ (8008120 <TIM_OC1_SetConfig+0x108>)
 8008044:	4013      	ands	r3, r2
 8008046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f023 0303 	bic.w	r3, r3, #3
 800804e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	4313      	orrs	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	f023 0302 	bic.w	r3, r3, #2
 8008060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	4313      	orrs	r3, r2
 800806a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a2d      	ldr	r2, [pc, #180]	@ (8008124 <TIM_OC1_SetConfig+0x10c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d00f      	beq.n	8008094 <TIM_OC1_SetConfig+0x7c>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a2c      	ldr	r2, [pc, #176]	@ (8008128 <TIM_OC1_SetConfig+0x110>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d00b      	beq.n	8008094 <TIM_OC1_SetConfig+0x7c>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a2b      	ldr	r2, [pc, #172]	@ (800812c <TIM_OC1_SetConfig+0x114>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d007      	beq.n	8008094 <TIM_OC1_SetConfig+0x7c>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a2a      	ldr	r2, [pc, #168]	@ (8008130 <TIM_OC1_SetConfig+0x118>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d003      	beq.n	8008094 <TIM_OC1_SetConfig+0x7c>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a29      	ldr	r2, [pc, #164]	@ (8008134 <TIM_OC1_SetConfig+0x11c>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d10c      	bne.n	80080ae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f023 0308 	bic.w	r3, r3, #8
 800809a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	f023 0304 	bic.w	r3, r3, #4
 80080ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a1c      	ldr	r2, [pc, #112]	@ (8008124 <TIM_OC1_SetConfig+0x10c>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d00f      	beq.n	80080d6 <TIM_OC1_SetConfig+0xbe>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008128 <TIM_OC1_SetConfig+0x110>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d00b      	beq.n	80080d6 <TIM_OC1_SetConfig+0xbe>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a1a      	ldr	r2, [pc, #104]	@ (800812c <TIM_OC1_SetConfig+0x114>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d007      	beq.n	80080d6 <TIM_OC1_SetConfig+0xbe>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a19      	ldr	r2, [pc, #100]	@ (8008130 <TIM_OC1_SetConfig+0x118>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d003      	beq.n	80080d6 <TIM_OC1_SetConfig+0xbe>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a18      	ldr	r2, [pc, #96]	@ (8008134 <TIM_OC1_SetConfig+0x11c>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d111      	bne.n	80080fa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80080e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	685a      	ldr	r2, [r3, #4]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	621a      	str	r2, [r3, #32]
}
 8008114:	bf00      	nop
 8008116:	371c      	adds	r7, #28
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr
 8008120:	fffeff8f 	.word	0xfffeff8f
 8008124:	40010000 	.word	0x40010000
 8008128:	40010400 	.word	0x40010400
 800812c:	40014000 	.word	0x40014000
 8008130:	40014400 	.word	0x40014400
 8008134:	40014800 	.word	0x40014800

08008138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008138:	b480      	push	{r7}
 800813a:	b087      	sub	sp, #28
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a1b      	ldr	r3, [r3, #32]
 8008146:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a1b      	ldr	r3, [r3, #32]
 800814c:	f023 0210 	bic.w	r2, r3, #16
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	4b34      	ldr	r3, [pc, #208]	@ (8008234 <TIM_OC2_SetConfig+0xfc>)
 8008164:	4013      	ands	r3, r2
 8008166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800816e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	021b      	lsls	r3, r3, #8
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	4313      	orrs	r3, r2
 800817a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	f023 0320 	bic.w	r3, r3, #32
 8008182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	011b      	lsls	r3, r3, #4
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	4313      	orrs	r3, r2
 800818e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a29      	ldr	r2, [pc, #164]	@ (8008238 <TIM_OC2_SetConfig+0x100>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d003      	beq.n	80081a0 <TIM_OC2_SetConfig+0x68>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a28      	ldr	r2, [pc, #160]	@ (800823c <TIM_OC2_SetConfig+0x104>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d10d      	bne.n	80081bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	011b      	lsls	r3, r3, #4
 80081ae:	697a      	ldr	r2, [r7, #20]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a1e      	ldr	r2, [pc, #120]	@ (8008238 <TIM_OC2_SetConfig+0x100>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d00f      	beq.n	80081e4 <TIM_OC2_SetConfig+0xac>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a1d      	ldr	r2, [pc, #116]	@ (800823c <TIM_OC2_SetConfig+0x104>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d00b      	beq.n	80081e4 <TIM_OC2_SetConfig+0xac>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a1c      	ldr	r2, [pc, #112]	@ (8008240 <TIM_OC2_SetConfig+0x108>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d007      	beq.n	80081e4 <TIM_OC2_SetConfig+0xac>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a1b      	ldr	r2, [pc, #108]	@ (8008244 <TIM_OC2_SetConfig+0x10c>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d003      	beq.n	80081e4 <TIM_OC2_SetConfig+0xac>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a1a      	ldr	r2, [pc, #104]	@ (8008248 <TIM_OC2_SetConfig+0x110>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d113      	bne.n	800820c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80081f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	695b      	ldr	r3, [r3, #20]
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	4313      	orrs	r3, r2
 800820a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	685a      	ldr	r2, [r3, #4]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	697a      	ldr	r2, [r7, #20]
 8008224:	621a      	str	r2, [r3, #32]
}
 8008226:	bf00      	nop
 8008228:	371c      	adds	r7, #28
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	feff8fff 	.word	0xfeff8fff
 8008238:	40010000 	.word	0x40010000
 800823c:	40010400 	.word	0x40010400
 8008240:	40014000 	.word	0x40014000
 8008244:	40014400 	.word	0x40014400
 8008248:	40014800 	.word	0x40014800

0800824c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800824c:	b480      	push	{r7}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a1b      	ldr	r3, [r3, #32]
 8008260:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	4b33      	ldr	r3, [pc, #204]	@ (8008344 <TIM_OC3_SetConfig+0xf8>)
 8008278:	4013      	ands	r3, r2
 800827a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f023 0303 	bic.w	r3, r3, #3
 8008282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	4313      	orrs	r3, r2
 800828c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	021b      	lsls	r3, r3, #8
 800829c:	697a      	ldr	r2, [r7, #20]
 800829e:	4313      	orrs	r3, r2
 80082a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a28      	ldr	r2, [pc, #160]	@ (8008348 <TIM_OC3_SetConfig+0xfc>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d003      	beq.n	80082b2 <TIM_OC3_SetConfig+0x66>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a27      	ldr	r2, [pc, #156]	@ (800834c <TIM_OC3_SetConfig+0x100>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d10d      	bne.n	80082ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80082b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	021b      	lsls	r3, r3, #8
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80082cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008348 <TIM_OC3_SetConfig+0xfc>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d00f      	beq.n	80082f6 <TIM_OC3_SetConfig+0xaa>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a1c      	ldr	r2, [pc, #112]	@ (800834c <TIM_OC3_SetConfig+0x100>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d00b      	beq.n	80082f6 <TIM_OC3_SetConfig+0xaa>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a1b      	ldr	r2, [pc, #108]	@ (8008350 <TIM_OC3_SetConfig+0x104>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d007      	beq.n	80082f6 <TIM_OC3_SetConfig+0xaa>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a1a      	ldr	r2, [pc, #104]	@ (8008354 <TIM_OC3_SetConfig+0x108>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d003      	beq.n	80082f6 <TIM_OC3_SetConfig+0xaa>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a19      	ldr	r2, [pc, #100]	@ (8008358 <TIM_OC3_SetConfig+0x10c>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d113      	bne.n	800831e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	011b      	lsls	r3, r3, #4
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	4313      	orrs	r3, r2
 8008310:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	011b      	lsls	r3, r3, #4
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	4313      	orrs	r3, r2
 800831c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	621a      	str	r2, [r3, #32]
}
 8008338:	bf00      	nop
 800833a:	371c      	adds	r7, #28
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	fffeff8f 	.word	0xfffeff8f
 8008348:	40010000 	.word	0x40010000
 800834c:	40010400 	.word	0x40010400
 8008350:	40014000 	.word	0x40014000
 8008354:	40014400 	.word	0x40014400
 8008358:	40014800 	.word	0x40014800

0800835c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800835c:	b480      	push	{r7}
 800835e:	b087      	sub	sp, #28
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a1b      	ldr	r3, [r3, #32]
 8008370:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	4b24      	ldr	r3, [pc, #144]	@ (8008418 <TIM_OC4_SetConfig+0xbc>)
 8008388:	4013      	ands	r3, r2
 800838a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	021b      	lsls	r3, r3, #8
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	4313      	orrs	r3, r2
 800839e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	031b      	lsls	r3, r3, #12
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a19      	ldr	r2, [pc, #100]	@ (800841c <TIM_OC4_SetConfig+0xc0>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d00f      	beq.n	80083dc <TIM_OC4_SetConfig+0x80>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a18      	ldr	r2, [pc, #96]	@ (8008420 <TIM_OC4_SetConfig+0xc4>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d00b      	beq.n	80083dc <TIM_OC4_SetConfig+0x80>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a17      	ldr	r2, [pc, #92]	@ (8008424 <TIM_OC4_SetConfig+0xc8>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d007      	beq.n	80083dc <TIM_OC4_SetConfig+0x80>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a16      	ldr	r2, [pc, #88]	@ (8008428 <TIM_OC4_SetConfig+0xcc>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d003      	beq.n	80083dc <TIM_OC4_SetConfig+0x80>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a15      	ldr	r2, [pc, #84]	@ (800842c <TIM_OC4_SetConfig+0xd0>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d109      	bne.n	80083f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	019b      	lsls	r3, r3, #6
 80083ea:	697a      	ldr	r2, [r7, #20]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	621a      	str	r2, [r3, #32]
}
 800840a:	bf00      	nop
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	feff8fff 	.word	0xfeff8fff
 800841c:	40010000 	.word	0x40010000
 8008420:	40010400 	.word	0x40010400
 8008424:	40014000 	.word	0x40014000
 8008428:	40014400 	.word	0x40014400
 800842c:	40014800 	.word	0x40014800

08008430 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008430:	b480      	push	{r7}
 8008432:	b087      	sub	sp, #28
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a1b      	ldr	r3, [r3, #32]
 8008444:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	4b21      	ldr	r3, [pc, #132]	@ (80084e0 <TIM_OC5_SetConfig+0xb0>)
 800845c:	4013      	ands	r3, r2
 800845e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	4313      	orrs	r3, r2
 8008468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008470:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	041b      	lsls	r3, r3, #16
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	4313      	orrs	r3, r2
 800847c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a18      	ldr	r2, [pc, #96]	@ (80084e4 <TIM_OC5_SetConfig+0xb4>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d00f      	beq.n	80084a6 <TIM_OC5_SetConfig+0x76>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a17      	ldr	r2, [pc, #92]	@ (80084e8 <TIM_OC5_SetConfig+0xb8>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d00b      	beq.n	80084a6 <TIM_OC5_SetConfig+0x76>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a16      	ldr	r2, [pc, #88]	@ (80084ec <TIM_OC5_SetConfig+0xbc>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d007      	beq.n	80084a6 <TIM_OC5_SetConfig+0x76>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a15      	ldr	r2, [pc, #84]	@ (80084f0 <TIM_OC5_SetConfig+0xc0>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d003      	beq.n	80084a6 <TIM_OC5_SetConfig+0x76>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a14      	ldr	r2, [pc, #80]	@ (80084f4 <TIM_OC5_SetConfig+0xc4>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d109      	bne.n	80084ba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	021b      	lsls	r3, r3, #8
 80084b4:	697a      	ldr	r2, [r7, #20]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	685a      	ldr	r2, [r3, #4]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	621a      	str	r2, [r3, #32]
}
 80084d4:	bf00      	nop
 80084d6:	371c      	adds	r7, #28
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	fffeff8f 	.word	0xfffeff8f
 80084e4:	40010000 	.word	0x40010000
 80084e8:	40010400 	.word	0x40010400
 80084ec:	40014000 	.word	0x40014000
 80084f0:	40014400 	.word	0x40014400
 80084f4:	40014800 	.word	0x40014800

080084f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b087      	sub	sp, #28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800851e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	4b22      	ldr	r3, [pc, #136]	@ (80085ac <TIM_OC6_SetConfig+0xb4>)
 8008524:	4013      	ands	r3, r2
 8008526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	021b      	lsls	r3, r3, #8
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	4313      	orrs	r3, r2
 8008532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800853a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	051b      	lsls	r3, r3, #20
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	4313      	orrs	r3, r2
 8008546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a19      	ldr	r2, [pc, #100]	@ (80085b0 <TIM_OC6_SetConfig+0xb8>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d00f      	beq.n	8008570 <TIM_OC6_SetConfig+0x78>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a18      	ldr	r2, [pc, #96]	@ (80085b4 <TIM_OC6_SetConfig+0xbc>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d00b      	beq.n	8008570 <TIM_OC6_SetConfig+0x78>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a17      	ldr	r2, [pc, #92]	@ (80085b8 <TIM_OC6_SetConfig+0xc0>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d007      	beq.n	8008570 <TIM_OC6_SetConfig+0x78>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a16      	ldr	r2, [pc, #88]	@ (80085bc <TIM_OC6_SetConfig+0xc4>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d003      	beq.n	8008570 <TIM_OC6_SetConfig+0x78>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a15      	ldr	r2, [pc, #84]	@ (80085c0 <TIM_OC6_SetConfig+0xc8>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d109      	bne.n	8008584 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008576:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	695b      	ldr	r3, [r3, #20]
 800857c:	029b      	lsls	r3, r3, #10
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	4313      	orrs	r3, r2
 8008582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	685a      	ldr	r2, [r3, #4]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	621a      	str	r2, [r3, #32]
}
 800859e:	bf00      	nop
 80085a0:	371c      	adds	r7, #28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	feff8fff 	.word	0xfeff8fff
 80085b0:	40010000 	.word	0x40010000
 80085b4:	40010400 	.word	0x40010400
 80085b8:	40014000 	.word	0x40014000
 80085bc:	40014400 	.word	0x40014400
 80085c0:	40014800 	.word	0x40014800

080085c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b087      	sub	sp, #28
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6a1b      	ldr	r3, [r3, #32]
 80085d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	f023 0201 	bic.w	r2, r3, #1
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	011b      	lsls	r3, r3, #4
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	f023 030a 	bic.w	r3, r3, #10
 8008600:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	4313      	orrs	r3, r2
 8008608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	697a      	ldr	r2, [r7, #20]
 8008614:	621a      	str	r2, [r3, #32]
}
 8008616:	bf00      	nop
 8008618:	371c      	adds	r7, #28
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008622:	b480      	push	{r7}
 8008624:	b087      	sub	sp, #28
 8008626:	af00      	add	r7, sp, #0
 8008628:	60f8      	str	r0, [r7, #12]
 800862a:	60b9      	str	r1, [r7, #8]
 800862c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6a1b      	ldr	r3, [r3, #32]
 8008638:	f023 0210 	bic.w	r2, r3, #16
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800864c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	031b      	lsls	r3, r3, #12
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	4313      	orrs	r3, r2
 8008656:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800865e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	011b      	lsls	r3, r3, #4
 8008664:	697a      	ldr	r2, [r7, #20]
 8008666:	4313      	orrs	r3, r2
 8008668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	621a      	str	r2, [r3, #32]
}
 8008676:	bf00      	nop
 8008678:	371c      	adds	r7, #28
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
	...

08008684 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	4b09      	ldr	r3, [pc, #36]	@ (80086bc <TIM_ITRx_SetConfig+0x38>)
 8008698:	4013      	ands	r3, r2
 800869a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800869c:	683a      	ldr	r2, [r7, #0]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	f043 0307 	orr.w	r3, r3, #7
 80086a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	609a      	str	r2, [r3, #8]
}
 80086ae:	bf00      	nop
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	ffcfff8f 	.word	0xffcfff8f

080086c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b087      	sub	sp, #28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
 80086cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80086da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	021a      	lsls	r2, r3, #8
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	431a      	orrs	r2, r3
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	609a      	str	r2, [r3, #8]
}
 80086f4:	bf00      	nop
 80086f6:	371c      	adds	r7, #28
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008710:	2b01      	cmp	r3, #1
 8008712:	d101      	bne.n	8008718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008714:	2302      	movs	r3, #2
 8008716:	e06d      	b.n	80087f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2202      	movs	r2, #2
 8008724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a30      	ldr	r2, [pc, #192]	@ (8008800 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d004      	beq.n	800874c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a2f      	ldr	r2, [pc, #188]	@ (8008804 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d108      	bne.n	800875e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008752:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	4313      	orrs	r3, r2
 800875c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008764:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	4313      	orrs	r3, r2
 800876e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a20      	ldr	r2, [pc, #128]	@ (8008800 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d022      	beq.n	80087c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800878a:	d01d      	beq.n	80087c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a1d      	ldr	r2, [pc, #116]	@ (8008808 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d018      	beq.n	80087c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a1c      	ldr	r2, [pc, #112]	@ (800880c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d013      	beq.n	80087c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a1a      	ldr	r2, [pc, #104]	@ (8008810 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d00e      	beq.n	80087c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a15      	ldr	r2, [pc, #84]	@ (8008804 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d009      	beq.n	80087c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a16      	ldr	r2, [pc, #88]	@ (8008814 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d004      	beq.n	80087c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a15      	ldr	r2, [pc, #84]	@ (8008818 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d10c      	bne.n	80087e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68ba      	ldr	r2, [r7, #8]
 80087e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	40010000 	.word	0x40010000
 8008804:	40010400 	.word	0x40010400
 8008808:	40000400 	.word	0x40000400
 800880c:	40000800 	.word	0x40000800
 8008810:	40000c00 	.word	0x40000c00
 8008814:	40001800 	.word	0x40001800
 8008818:	40014000 	.word	0x40014000

0800881c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008826:	2300      	movs	r3, #0
 8008828:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008830:	2b01      	cmp	r3, #1
 8008832:	d101      	bne.n	8008838 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008834:	2302      	movs	r3, #2
 8008836:	e065      	b.n	8008904 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	4313      	orrs	r3, r2
 800884c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	4313      	orrs	r3, r2
 800885a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	4313      	orrs	r3, r2
 8008868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4313      	orrs	r3, r2
 8008876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	4313      	orrs	r3, r2
 8008884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	695b      	ldr	r3, [r3, #20]
 8008890:	4313      	orrs	r3, r2
 8008892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800889e:	4313      	orrs	r3, r2
 80088a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	041b      	lsls	r3, r3, #16
 80088ae:	4313      	orrs	r3, r2
 80088b0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a16      	ldr	r2, [pc, #88]	@ (8008910 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d004      	beq.n	80088c6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a14      	ldr	r2, [pc, #80]	@ (8008914 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d115      	bne.n	80088f2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088d0:	051b      	lsls	r3, r3, #20
 80088d2:	4313      	orrs	r3, r2
 80088d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	69db      	ldr	r3, [r3, #28]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	6a1b      	ldr	r3, [r3, #32]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3714      	adds	r7, #20
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	40010000 	.word	0x40010000
 8008914:	40010400 	.word	0x40010400

08008918 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e042      	b.n	80089b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008930:	2b00      	cmp	r3, #0
 8008932:	d106      	bne.n	8008942 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f7f9 fa4f 	bl	8001de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2224      	movs	r2, #36	@ 0x24
 8008946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f022 0201 	bic.w	r2, r2, #1
 8008958:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800895e:	2b00      	cmp	r3, #0
 8008960:	d002      	beq.n	8008968 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fd90 	bl	8009488 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f825 	bl	80089b8 <UART_SetConfig>
 800896e:	4603      	mov	r3, r0
 8008970:	2b01      	cmp	r3, #1
 8008972:	d101      	bne.n	8008978 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e01b      	b.n	80089b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	685a      	ldr	r2, [r3, #4]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008986:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	689a      	ldr	r2, [r3, #8]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008996:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f042 0201 	orr.w	r2, r2, #1
 80089a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fe0f 	bl	80095cc <UART_CheckIdleState>
 80089ae:	4603      	mov	r3, r0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089bc:	b092      	sub	sp, #72	@ 0x48
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089c2:	2300      	movs	r3, #0
 80089c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	689a      	ldr	r2, [r3, #8]
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	431a      	orrs	r2, r3
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	431a      	orrs	r2, r3
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	69db      	ldr	r3, [r3, #28]
 80089dc:	4313      	orrs	r3, r2
 80089de:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	4bbe      	ldr	r3, [pc, #760]	@ (8008ce0 <UART_SetConfig+0x328>)
 80089e8:	4013      	ands	r3, r2
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	6812      	ldr	r2, [r2, #0]
 80089ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80089f0:	430b      	orrs	r3, r1
 80089f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	68da      	ldr	r2, [r3, #12]
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	430a      	orrs	r2, r1
 8008a08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	699b      	ldr	r3, [r3, #24]
 8008a0e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4ab3      	ldr	r2, [pc, #716]	@ (8008ce4 <UART_SetConfig+0x32c>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d004      	beq.n	8008a24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	6a1b      	ldr	r3, [r3, #32]
 8008a1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a20:	4313      	orrs	r3, r2
 8008a22:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	689a      	ldr	r2, [r3, #8]
 8008a2a:	4baf      	ldr	r3, [pc, #700]	@ (8008ce8 <UART_SetConfig+0x330>)
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	6812      	ldr	r2, [r2, #0]
 8008a32:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a34:	430b      	orrs	r3, r1
 8008a36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3e:	f023 010f 	bic.w	r1, r3, #15
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4aa6      	ldr	r2, [pc, #664]	@ (8008cec <UART_SetConfig+0x334>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d177      	bne.n	8008b48 <UART_SetConfig+0x190>
 8008a58:	4ba5      	ldr	r3, [pc, #660]	@ (8008cf0 <UART_SetConfig+0x338>)
 8008a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a60:	2b28      	cmp	r3, #40	@ 0x28
 8008a62:	d86d      	bhi.n	8008b40 <UART_SetConfig+0x188>
 8008a64:	a201      	add	r2, pc, #4	@ (adr r2, 8008a6c <UART_SetConfig+0xb4>)
 8008a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6a:	bf00      	nop
 8008a6c:	08008b11 	.word	0x08008b11
 8008a70:	08008b41 	.word	0x08008b41
 8008a74:	08008b41 	.word	0x08008b41
 8008a78:	08008b41 	.word	0x08008b41
 8008a7c:	08008b41 	.word	0x08008b41
 8008a80:	08008b41 	.word	0x08008b41
 8008a84:	08008b41 	.word	0x08008b41
 8008a88:	08008b41 	.word	0x08008b41
 8008a8c:	08008b19 	.word	0x08008b19
 8008a90:	08008b41 	.word	0x08008b41
 8008a94:	08008b41 	.word	0x08008b41
 8008a98:	08008b41 	.word	0x08008b41
 8008a9c:	08008b41 	.word	0x08008b41
 8008aa0:	08008b41 	.word	0x08008b41
 8008aa4:	08008b41 	.word	0x08008b41
 8008aa8:	08008b41 	.word	0x08008b41
 8008aac:	08008b21 	.word	0x08008b21
 8008ab0:	08008b41 	.word	0x08008b41
 8008ab4:	08008b41 	.word	0x08008b41
 8008ab8:	08008b41 	.word	0x08008b41
 8008abc:	08008b41 	.word	0x08008b41
 8008ac0:	08008b41 	.word	0x08008b41
 8008ac4:	08008b41 	.word	0x08008b41
 8008ac8:	08008b41 	.word	0x08008b41
 8008acc:	08008b29 	.word	0x08008b29
 8008ad0:	08008b41 	.word	0x08008b41
 8008ad4:	08008b41 	.word	0x08008b41
 8008ad8:	08008b41 	.word	0x08008b41
 8008adc:	08008b41 	.word	0x08008b41
 8008ae0:	08008b41 	.word	0x08008b41
 8008ae4:	08008b41 	.word	0x08008b41
 8008ae8:	08008b41 	.word	0x08008b41
 8008aec:	08008b31 	.word	0x08008b31
 8008af0:	08008b41 	.word	0x08008b41
 8008af4:	08008b41 	.word	0x08008b41
 8008af8:	08008b41 	.word	0x08008b41
 8008afc:	08008b41 	.word	0x08008b41
 8008b00:	08008b41 	.word	0x08008b41
 8008b04:	08008b41 	.word	0x08008b41
 8008b08:	08008b41 	.word	0x08008b41
 8008b0c:	08008b39 	.word	0x08008b39
 8008b10:	2301      	movs	r3, #1
 8008b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b16:	e222      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008b18:	2304      	movs	r3, #4
 8008b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b1e:	e21e      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008b20:	2308      	movs	r3, #8
 8008b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b26:	e21a      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008b28:	2310      	movs	r3, #16
 8008b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b2e:	e216      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008b30:	2320      	movs	r3, #32
 8008b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b36:	e212      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008b38:	2340      	movs	r3, #64	@ 0x40
 8008b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b3e:	e20e      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008b40:	2380      	movs	r3, #128	@ 0x80
 8008b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b46:	e20a      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a69      	ldr	r2, [pc, #420]	@ (8008cf4 <UART_SetConfig+0x33c>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d130      	bne.n	8008bb4 <UART_SetConfig+0x1fc>
 8008b52:	4b67      	ldr	r3, [pc, #412]	@ (8008cf0 <UART_SetConfig+0x338>)
 8008b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b56:	f003 0307 	and.w	r3, r3, #7
 8008b5a:	2b05      	cmp	r3, #5
 8008b5c:	d826      	bhi.n	8008bac <UART_SetConfig+0x1f4>
 8008b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b64 <UART_SetConfig+0x1ac>)
 8008b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b64:	08008b7d 	.word	0x08008b7d
 8008b68:	08008b85 	.word	0x08008b85
 8008b6c:	08008b8d 	.word	0x08008b8d
 8008b70:	08008b95 	.word	0x08008b95
 8008b74:	08008b9d 	.word	0x08008b9d
 8008b78:	08008ba5 	.word	0x08008ba5
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b82:	e1ec      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008b84:	2304      	movs	r3, #4
 8008b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b8a:	e1e8      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008b8c:	2308      	movs	r3, #8
 8008b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b92:	e1e4      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008b94:	2310      	movs	r3, #16
 8008b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b9a:	e1e0      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008b9c:	2320      	movs	r3, #32
 8008b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ba2:	e1dc      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008ba4:	2340      	movs	r3, #64	@ 0x40
 8008ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008baa:	e1d8      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008bac:	2380      	movs	r3, #128	@ 0x80
 8008bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bb2:	e1d4      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a4f      	ldr	r2, [pc, #316]	@ (8008cf8 <UART_SetConfig+0x340>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d130      	bne.n	8008c20 <UART_SetConfig+0x268>
 8008bbe:	4b4c      	ldr	r3, [pc, #304]	@ (8008cf0 <UART_SetConfig+0x338>)
 8008bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bc2:	f003 0307 	and.w	r3, r3, #7
 8008bc6:	2b05      	cmp	r3, #5
 8008bc8:	d826      	bhi.n	8008c18 <UART_SetConfig+0x260>
 8008bca:	a201      	add	r2, pc, #4	@ (adr r2, 8008bd0 <UART_SetConfig+0x218>)
 8008bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd0:	08008be9 	.word	0x08008be9
 8008bd4:	08008bf1 	.word	0x08008bf1
 8008bd8:	08008bf9 	.word	0x08008bf9
 8008bdc:	08008c01 	.word	0x08008c01
 8008be0:	08008c09 	.word	0x08008c09
 8008be4:	08008c11 	.word	0x08008c11
 8008be8:	2300      	movs	r3, #0
 8008bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bee:	e1b6      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008bf0:	2304      	movs	r3, #4
 8008bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bf6:	e1b2      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008bf8:	2308      	movs	r3, #8
 8008bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bfe:	e1ae      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008c00:	2310      	movs	r3, #16
 8008c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c06:	e1aa      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008c08:	2320      	movs	r3, #32
 8008c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c0e:	e1a6      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008c10:	2340      	movs	r3, #64	@ 0x40
 8008c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c16:	e1a2      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008c18:	2380      	movs	r3, #128	@ 0x80
 8008c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c1e:	e19e      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a35      	ldr	r2, [pc, #212]	@ (8008cfc <UART_SetConfig+0x344>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d130      	bne.n	8008c8c <UART_SetConfig+0x2d4>
 8008c2a:	4b31      	ldr	r3, [pc, #196]	@ (8008cf0 <UART_SetConfig+0x338>)
 8008c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c2e:	f003 0307 	and.w	r3, r3, #7
 8008c32:	2b05      	cmp	r3, #5
 8008c34:	d826      	bhi.n	8008c84 <UART_SetConfig+0x2cc>
 8008c36:	a201      	add	r2, pc, #4	@ (adr r2, 8008c3c <UART_SetConfig+0x284>)
 8008c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3c:	08008c55 	.word	0x08008c55
 8008c40:	08008c5d 	.word	0x08008c5d
 8008c44:	08008c65 	.word	0x08008c65
 8008c48:	08008c6d 	.word	0x08008c6d
 8008c4c:	08008c75 	.word	0x08008c75
 8008c50:	08008c7d 	.word	0x08008c7d
 8008c54:	2300      	movs	r3, #0
 8008c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5a:	e180      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008c5c:	2304      	movs	r3, #4
 8008c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c62:	e17c      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008c64:	2308      	movs	r3, #8
 8008c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c6a:	e178      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008c6c:	2310      	movs	r3, #16
 8008c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c72:	e174      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008c74:	2320      	movs	r3, #32
 8008c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c7a:	e170      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008c7c:	2340      	movs	r3, #64	@ 0x40
 8008c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c82:	e16c      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008c84:	2380      	movs	r3, #128	@ 0x80
 8008c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c8a:	e168      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a1b      	ldr	r2, [pc, #108]	@ (8008d00 <UART_SetConfig+0x348>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d142      	bne.n	8008d1c <UART_SetConfig+0x364>
 8008c96:	4b16      	ldr	r3, [pc, #88]	@ (8008cf0 <UART_SetConfig+0x338>)
 8008c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c9a:	f003 0307 	and.w	r3, r3, #7
 8008c9e:	2b05      	cmp	r3, #5
 8008ca0:	d838      	bhi.n	8008d14 <UART_SetConfig+0x35c>
 8008ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ca8 <UART_SetConfig+0x2f0>)
 8008ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca8:	08008cc1 	.word	0x08008cc1
 8008cac:	08008cc9 	.word	0x08008cc9
 8008cb0:	08008cd1 	.word	0x08008cd1
 8008cb4:	08008cd9 	.word	0x08008cd9
 8008cb8:	08008d05 	.word	0x08008d05
 8008cbc:	08008d0d 	.word	0x08008d0d
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cc6:	e14a      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008cc8:	2304      	movs	r3, #4
 8008cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cce:	e146      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008cd0:	2308      	movs	r3, #8
 8008cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd6:	e142      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008cd8:	2310      	movs	r3, #16
 8008cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cde:	e13e      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008ce0:	cfff69f3 	.word	0xcfff69f3
 8008ce4:	58000c00 	.word	0x58000c00
 8008ce8:	11fff4ff 	.word	0x11fff4ff
 8008cec:	40011000 	.word	0x40011000
 8008cf0:	58024400 	.word	0x58024400
 8008cf4:	40004400 	.word	0x40004400
 8008cf8:	40004800 	.word	0x40004800
 8008cfc:	40004c00 	.word	0x40004c00
 8008d00:	40005000 	.word	0x40005000
 8008d04:	2320      	movs	r3, #32
 8008d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d0a:	e128      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008d0c:	2340      	movs	r3, #64	@ 0x40
 8008d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d12:	e124      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008d14:	2380      	movs	r3, #128	@ 0x80
 8008d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d1a:	e120      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4acb      	ldr	r2, [pc, #812]	@ (8009050 <UART_SetConfig+0x698>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d176      	bne.n	8008e14 <UART_SetConfig+0x45c>
 8008d26:	4bcb      	ldr	r3, [pc, #812]	@ (8009054 <UART_SetConfig+0x69c>)
 8008d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d2e:	2b28      	cmp	r3, #40	@ 0x28
 8008d30:	d86c      	bhi.n	8008e0c <UART_SetConfig+0x454>
 8008d32:	a201      	add	r2, pc, #4	@ (adr r2, 8008d38 <UART_SetConfig+0x380>)
 8008d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d38:	08008ddd 	.word	0x08008ddd
 8008d3c:	08008e0d 	.word	0x08008e0d
 8008d40:	08008e0d 	.word	0x08008e0d
 8008d44:	08008e0d 	.word	0x08008e0d
 8008d48:	08008e0d 	.word	0x08008e0d
 8008d4c:	08008e0d 	.word	0x08008e0d
 8008d50:	08008e0d 	.word	0x08008e0d
 8008d54:	08008e0d 	.word	0x08008e0d
 8008d58:	08008de5 	.word	0x08008de5
 8008d5c:	08008e0d 	.word	0x08008e0d
 8008d60:	08008e0d 	.word	0x08008e0d
 8008d64:	08008e0d 	.word	0x08008e0d
 8008d68:	08008e0d 	.word	0x08008e0d
 8008d6c:	08008e0d 	.word	0x08008e0d
 8008d70:	08008e0d 	.word	0x08008e0d
 8008d74:	08008e0d 	.word	0x08008e0d
 8008d78:	08008ded 	.word	0x08008ded
 8008d7c:	08008e0d 	.word	0x08008e0d
 8008d80:	08008e0d 	.word	0x08008e0d
 8008d84:	08008e0d 	.word	0x08008e0d
 8008d88:	08008e0d 	.word	0x08008e0d
 8008d8c:	08008e0d 	.word	0x08008e0d
 8008d90:	08008e0d 	.word	0x08008e0d
 8008d94:	08008e0d 	.word	0x08008e0d
 8008d98:	08008df5 	.word	0x08008df5
 8008d9c:	08008e0d 	.word	0x08008e0d
 8008da0:	08008e0d 	.word	0x08008e0d
 8008da4:	08008e0d 	.word	0x08008e0d
 8008da8:	08008e0d 	.word	0x08008e0d
 8008dac:	08008e0d 	.word	0x08008e0d
 8008db0:	08008e0d 	.word	0x08008e0d
 8008db4:	08008e0d 	.word	0x08008e0d
 8008db8:	08008dfd 	.word	0x08008dfd
 8008dbc:	08008e0d 	.word	0x08008e0d
 8008dc0:	08008e0d 	.word	0x08008e0d
 8008dc4:	08008e0d 	.word	0x08008e0d
 8008dc8:	08008e0d 	.word	0x08008e0d
 8008dcc:	08008e0d 	.word	0x08008e0d
 8008dd0:	08008e0d 	.word	0x08008e0d
 8008dd4:	08008e0d 	.word	0x08008e0d
 8008dd8:	08008e05 	.word	0x08008e05
 8008ddc:	2301      	movs	r3, #1
 8008dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008de2:	e0bc      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008de4:	2304      	movs	r3, #4
 8008de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dea:	e0b8      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008dec:	2308      	movs	r3, #8
 8008dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008df2:	e0b4      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008df4:	2310      	movs	r3, #16
 8008df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dfa:	e0b0      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008dfc:	2320      	movs	r3, #32
 8008dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e02:	e0ac      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008e04:	2340      	movs	r3, #64	@ 0x40
 8008e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0a:	e0a8      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008e0c:	2380      	movs	r3, #128	@ 0x80
 8008e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e12:	e0a4      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a8f      	ldr	r2, [pc, #572]	@ (8009058 <UART_SetConfig+0x6a0>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d130      	bne.n	8008e80 <UART_SetConfig+0x4c8>
 8008e1e:	4b8d      	ldr	r3, [pc, #564]	@ (8009054 <UART_SetConfig+0x69c>)
 8008e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e22:	f003 0307 	and.w	r3, r3, #7
 8008e26:	2b05      	cmp	r3, #5
 8008e28:	d826      	bhi.n	8008e78 <UART_SetConfig+0x4c0>
 8008e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e30 <UART_SetConfig+0x478>)
 8008e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e30:	08008e49 	.word	0x08008e49
 8008e34:	08008e51 	.word	0x08008e51
 8008e38:	08008e59 	.word	0x08008e59
 8008e3c:	08008e61 	.word	0x08008e61
 8008e40:	08008e69 	.word	0x08008e69
 8008e44:	08008e71 	.word	0x08008e71
 8008e48:	2300      	movs	r3, #0
 8008e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e4e:	e086      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008e50:	2304      	movs	r3, #4
 8008e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e56:	e082      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008e58:	2308      	movs	r3, #8
 8008e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e5e:	e07e      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008e60:	2310      	movs	r3, #16
 8008e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e66:	e07a      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008e68:	2320      	movs	r3, #32
 8008e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e6e:	e076      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008e70:	2340      	movs	r3, #64	@ 0x40
 8008e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e76:	e072      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008e78:	2380      	movs	r3, #128	@ 0x80
 8008e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7e:	e06e      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a75      	ldr	r2, [pc, #468]	@ (800905c <UART_SetConfig+0x6a4>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d130      	bne.n	8008eec <UART_SetConfig+0x534>
 8008e8a:	4b72      	ldr	r3, [pc, #456]	@ (8009054 <UART_SetConfig+0x69c>)
 8008e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e8e:	f003 0307 	and.w	r3, r3, #7
 8008e92:	2b05      	cmp	r3, #5
 8008e94:	d826      	bhi.n	8008ee4 <UART_SetConfig+0x52c>
 8008e96:	a201      	add	r2, pc, #4	@ (adr r2, 8008e9c <UART_SetConfig+0x4e4>)
 8008e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9c:	08008eb5 	.word	0x08008eb5
 8008ea0:	08008ebd 	.word	0x08008ebd
 8008ea4:	08008ec5 	.word	0x08008ec5
 8008ea8:	08008ecd 	.word	0x08008ecd
 8008eac:	08008ed5 	.word	0x08008ed5
 8008eb0:	08008edd 	.word	0x08008edd
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eba:	e050      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008ebc:	2304      	movs	r3, #4
 8008ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ec2:	e04c      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008ec4:	2308      	movs	r3, #8
 8008ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eca:	e048      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008ecc:	2310      	movs	r3, #16
 8008ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ed2:	e044      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008ed4:	2320      	movs	r3, #32
 8008ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eda:	e040      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008edc:	2340      	movs	r3, #64	@ 0x40
 8008ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ee2:	e03c      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008ee4:	2380      	movs	r3, #128	@ 0x80
 8008ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eea:	e038      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a5b      	ldr	r2, [pc, #364]	@ (8009060 <UART_SetConfig+0x6a8>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d130      	bne.n	8008f58 <UART_SetConfig+0x5a0>
 8008ef6:	4b57      	ldr	r3, [pc, #348]	@ (8009054 <UART_SetConfig+0x69c>)
 8008ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008efa:	f003 0307 	and.w	r3, r3, #7
 8008efe:	2b05      	cmp	r3, #5
 8008f00:	d826      	bhi.n	8008f50 <UART_SetConfig+0x598>
 8008f02:	a201      	add	r2, pc, #4	@ (adr r2, 8008f08 <UART_SetConfig+0x550>)
 8008f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f08:	08008f21 	.word	0x08008f21
 8008f0c:	08008f29 	.word	0x08008f29
 8008f10:	08008f31 	.word	0x08008f31
 8008f14:	08008f39 	.word	0x08008f39
 8008f18:	08008f41 	.word	0x08008f41
 8008f1c:	08008f49 	.word	0x08008f49
 8008f20:	2302      	movs	r3, #2
 8008f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f26:	e01a      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008f28:	2304      	movs	r3, #4
 8008f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2e:	e016      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008f30:	2308      	movs	r3, #8
 8008f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f36:	e012      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008f38:	2310      	movs	r3, #16
 8008f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f3e:	e00e      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008f40:	2320      	movs	r3, #32
 8008f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f46:	e00a      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008f48:	2340      	movs	r3, #64	@ 0x40
 8008f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4e:	e006      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008f50:	2380      	movs	r3, #128	@ 0x80
 8008f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f56:	e002      	b.n	8008f5e <UART_SetConfig+0x5a6>
 8008f58:	2380      	movs	r3, #128	@ 0x80
 8008f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a3f      	ldr	r2, [pc, #252]	@ (8009060 <UART_SetConfig+0x6a8>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	f040 80f8 	bne.w	800915a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f6a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008f6e:	2b20      	cmp	r3, #32
 8008f70:	dc46      	bgt.n	8009000 <UART_SetConfig+0x648>
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	f2c0 8082 	blt.w	800907c <UART_SetConfig+0x6c4>
 8008f78:	3b02      	subs	r3, #2
 8008f7a:	2b1e      	cmp	r3, #30
 8008f7c:	d87e      	bhi.n	800907c <UART_SetConfig+0x6c4>
 8008f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f84 <UART_SetConfig+0x5cc>)
 8008f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f84:	08009007 	.word	0x08009007
 8008f88:	0800907d 	.word	0x0800907d
 8008f8c:	0800900f 	.word	0x0800900f
 8008f90:	0800907d 	.word	0x0800907d
 8008f94:	0800907d 	.word	0x0800907d
 8008f98:	0800907d 	.word	0x0800907d
 8008f9c:	0800901f 	.word	0x0800901f
 8008fa0:	0800907d 	.word	0x0800907d
 8008fa4:	0800907d 	.word	0x0800907d
 8008fa8:	0800907d 	.word	0x0800907d
 8008fac:	0800907d 	.word	0x0800907d
 8008fb0:	0800907d 	.word	0x0800907d
 8008fb4:	0800907d 	.word	0x0800907d
 8008fb8:	0800907d 	.word	0x0800907d
 8008fbc:	0800902f 	.word	0x0800902f
 8008fc0:	0800907d 	.word	0x0800907d
 8008fc4:	0800907d 	.word	0x0800907d
 8008fc8:	0800907d 	.word	0x0800907d
 8008fcc:	0800907d 	.word	0x0800907d
 8008fd0:	0800907d 	.word	0x0800907d
 8008fd4:	0800907d 	.word	0x0800907d
 8008fd8:	0800907d 	.word	0x0800907d
 8008fdc:	0800907d 	.word	0x0800907d
 8008fe0:	0800907d 	.word	0x0800907d
 8008fe4:	0800907d 	.word	0x0800907d
 8008fe8:	0800907d 	.word	0x0800907d
 8008fec:	0800907d 	.word	0x0800907d
 8008ff0:	0800907d 	.word	0x0800907d
 8008ff4:	0800907d 	.word	0x0800907d
 8008ff8:	0800907d 	.word	0x0800907d
 8008ffc:	0800906f 	.word	0x0800906f
 8009000:	2b40      	cmp	r3, #64	@ 0x40
 8009002:	d037      	beq.n	8009074 <UART_SetConfig+0x6bc>
 8009004:	e03a      	b.n	800907c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009006:	f7fe f87f 	bl	8007108 <HAL_RCCEx_GetD3PCLK1Freq>
 800900a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800900c:	e03c      	b.n	8009088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800900e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009012:	4618      	mov	r0, r3
 8009014:	f7fe f88e 	bl	8007134 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800901a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800901c:	e034      	b.n	8009088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800901e:	f107 0318 	add.w	r3, r7, #24
 8009022:	4618      	mov	r0, r3
 8009024:	f7fe f9da 	bl	80073dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800902c:	e02c      	b.n	8009088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800902e:	4b09      	ldr	r3, [pc, #36]	@ (8009054 <UART_SetConfig+0x69c>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 0320 	and.w	r3, r3, #32
 8009036:	2b00      	cmp	r3, #0
 8009038:	d016      	beq.n	8009068 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800903a:	4b06      	ldr	r3, [pc, #24]	@ (8009054 <UART_SetConfig+0x69c>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	08db      	lsrs	r3, r3, #3
 8009040:	f003 0303 	and.w	r3, r3, #3
 8009044:	4a07      	ldr	r2, [pc, #28]	@ (8009064 <UART_SetConfig+0x6ac>)
 8009046:	fa22 f303 	lsr.w	r3, r2, r3
 800904a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800904c:	e01c      	b.n	8009088 <UART_SetConfig+0x6d0>
 800904e:	bf00      	nop
 8009050:	40011400 	.word	0x40011400
 8009054:	58024400 	.word	0x58024400
 8009058:	40007800 	.word	0x40007800
 800905c:	40007c00 	.word	0x40007c00
 8009060:	58000c00 	.word	0x58000c00
 8009064:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009068:	4b9d      	ldr	r3, [pc, #628]	@ (80092e0 <UART_SetConfig+0x928>)
 800906a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800906c:	e00c      	b.n	8009088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800906e:	4b9d      	ldr	r3, [pc, #628]	@ (80092e4 <UART_SetConfig+0x92c>)
 8009070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009072:	e009      	b.n	8009088 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009074:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800907a:	e005      	b.n	8009088 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800907c:	2300      	movs	r3, #0
 800907e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009086:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800908a:	2b00      	cmp	r3, #0
 800908c:	f000 81de 	beq.w	800944c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009094:	4a94      	ldr	r2, [pc, #592]	@ (80092e8 <UART_SetConfig+0x930>)
 8009096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800909a:	461a      	mov	r2, r3
 800909c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800909e:	fbb3 f3f2 	udiv	r3, r3, r2
 80090a2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	685a      	ldr	r2, [r3, #4]
 80090a8:	4613      	mov	r3, r2
 80090aa:	005b      	lsls	r3, r3, #1
 80090ac:	4413      	add	r3, r2
 80090ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d305      	bcc.n	80090c0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090bc:	429a      	cmp	r2, r3
 80090be:	d903      	bls.n	80090c8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80090c6:	e1c1      	b.n	800944c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ca:	2200      	movs	r2, #0
 80090cc:	60bb      	str	r3, [r7, #8]
 80090ce:	60fa      	str	r2, [r7, #12]
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d4:	4a84      	ldr	r2, [pc, #528]	@ (80092e8 <UART_SetConfig+0x930>)
 80090d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090da:	b29b      	uxth	r3, r3
 80090dc:	2200      	movs	r2, #0
 80090de:	603b      	str	r3, [r7, #0]
 80090e0:	607a      	str	r2, [r7, #4]
 80090e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80090ea:	f7f7 f8f5 	bl	80002d8 <__aeabi_uldivmod>
 80090ee:	4602      	mov	r2, r0
 80090f0:	460b      	mov	r3, r1
 80090f2:	4610      	mov	r0, r2
 80090f4:	4619      	mov	r1, r3
 80090f6:	f04f 0200 	mov.w	r2, #0
 80090fa:	f04f 0300 	mov.w	r3, #0
 80090fe:	020b      	lsls	r3, r1, #8
 8009100:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009104:	0202      	lsls	r2, r0, #8
 8009106:	6979      	ldr	r1, [r7, #20]
 8009108:	6849      	ldr	r1, [r1, #4]
 800910a:	0849      	lsrs	r1, r1, #1
 800910c:	2000      	movs	r0, #0
 800910e:	460c      	mov	r4, r1
 8009110:	4605      	mov	r5, r0
 8009112:	eb12 0804 	adds.w	r8, r2, r4
 8009116:	eb43 0905 	adc.w	r9, r3, r5
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	469a      	mov	sl, r3
 8009122:	4693      	mov	fp, r2
 8009124:	4652      	mov	r2, sl
 8009126:	465b      	mov	r3, fp
 8009128:	4640      	mov	r0, r8
 800912a:	4649      	mov	r1, r9
 800912c:	f7f7 f8d4 	bl	80002d8 <__aeabi_uldivmod>
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	4613      	mov	r3, r2
 8009136:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800913a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800913e:	d308      	bcc.n	8009152 <UART_SetConfig+0x79a>
 8009140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009142:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009146:	d204      	bcs.n	8009152 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800914e:	60da      	str	r2, [r3, #12]
 8009150:	e17c      	b.n	800944c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009158:	e178      	b.n	800944c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	69db      	ldr	r3, [r3, #28]
 800915e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009162:	f040 80c5 	bne.w	80092f0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009166:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800916a:	2b20      	cmp	r3, #32
 800916c:	dc48      	bgt.n	8009200 <UART_SetConfig+0x848>
 800916e:	2b00      	cmp	r3, #0
 8009170:	db7b      	blt.n	800926a <UART_SetConfig+0x8b2>
 8009172:	2b20      	cmp	r3, #32
 8009174:	d879      	bhi.n	800926a <UART_SetConfig+0x8b2>
 8009176:	a201      	add	r2, pc, #4	@ (adr r2, 800917c <UART_SetConfig+0x7c4>)
 8009178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917c:	08009207 	.word	0x08009207
 8009180:	0800920f 	.word	0x0800920f
 8009184:	0800926b 	.word	0x0800926b
 8009188:	0800926b 	.word	0x0800926b
 800918c:	08009217 	.word	0x08009217
 8009190:	0800926b 	.word	0x0800926b
 8009194:	0800926b 	.word	0x0800926b
 8009198:	0800926b 	.word	0x0800926b
 800919c:	08009227 	.word	0x08009227
 80091a0:	0800926b 	.word	0x0800926b
 80091a4:	0800926b 	.word	0x0800926b
 80091a8:	0800926b 	.word	0x0800926b
 80091ac:	0800926b 	.word	0x0800926b
 80091b0:	0800926b 	.word	0x0800926b
 80091b4:	0800926b 	.word	0x0800926b
 80091b8:	0800926b 	.word	0x0800926b
 80091bc:	08009237 	.word	0x08009237
 80091c0:	0800926b 	.word	0x0800926b
 80091c4:	0800926b 	.word	0x0800926b
 80091c8:	0800926b 	.word	0x0800926b
 80091cc:	0800926b 	.word	0x0800926b
 80091d0:	0800926b 	.word	0x0800926b
 80091d4:	0800926b 	.word	0x0800926b
 80091d8:	0800926b 	.word	0x0800926b
 80091dc:	0800926b 	.word	0x0800926b
 80091e0:	0800926b 	.word	0x0800926b
 80091e4:	0800926b 	.word	0x0800926b
 80091e8:	0800926b 	.word	0x0800926b
 80091ec:	0800926b 	.word	0x0800926b
 80091f0:	0800926b 	.word	0x0800926b
 80091f4:	0800926b 	.word	0x0800926b
 80091f8:	0800926b 	.word	0x0800926b
 80091fc:	0800925d 	.word	0x0800925d
 8009200:	2b40      	cmp	r3, #64	@ 0x40
 8009202:	d02e      	beq.n	8009262 <UART_SetConfig+0x8aa>
 8009204:	e031      	b.n	800926a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009206:	f7fc fd49 	bl	8005c9c <HAL_RCC_GetPCLK1Freq>
 800920a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800920c:	e033      	b.n	8009276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800920e:	f7fc fd5b 	bl	8005cc8 <HAL_RCC_GetPCLK2Freq>
 8009212:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009214:	e02f      	b.n	8009276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009216:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800921a:	4618      	mov	r0, r3
 800921c:	f7fd ff8a 	bl	8007134 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009224:	e027      	b.n	8009276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009226:	f107 0318 	add.w	r3, r7, #24
 800922a:	4618      	mov	r0, r3
 800922c:	f7fe f8d6 	bl	80073dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009234:	e01f      	b.n	8009276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009236:	4b2d      	ldr	r3, [pc, #180]	@ (80092ec <UART_SetConfig+0x934>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 0320 	and.w	r3, r3, #32
 800923e:	2b00      	cmp	r3, #0
 8009240:	d009      	beq.n	8009256 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009242:	4b2a      	ldr	r3, [pc, #168]	@ (80092ec <UART_SetConfig+0x934>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	08db      	lsrs	r3, r3, #3
 8009248:	f003 0303 	and.w	r3, r3, #3
 800924c:	4a24      	ldr	r2, [pc, #144]	@ (80092e0 <UART_SetConfig+0x928>)
 800924e:	fa22 f303 	lsr.w	r3, r2, r3
 8009252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009254:	e00f      	b.n	8009276 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009256:	4b22      	ldr	r3, [pc, #136]	@ (80092e0 <UART_SetConfig+0x928>)
 8009258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800925a:	e00c      	b.n	8009276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800925c:	4b21      	ldr	r3, [pc, #132]	@ (80092e4 <UART_SetConfig+0x92c>)
 800925e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009260:	e009      	b.n	8009276 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009268:	e005      	b.n	8009276 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800926a:	2300      	movs	r3, #0
 800926c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009274:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009278:	2b00      	cmp	r3, #0
 800927a:	f000 80e7 	beq.w	800944c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009282:	4a19      	ldr	r2, [pc, #100]	@ (80092e8 <UART_SetConfig+0x930>)
 8009284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009288:	461a      	mov	r2, r3
 800928a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800928c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009290:	005a      	lsls	r2, r3, #1
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	085b      	lsrs	r3, r3, #1
 8009298:	441a      	add	r2, r3
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	fbb2 f3f3 	udiv	r3, r2, r3
 80092a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a6:	2b0f      	cmp	r3, #15
 80092a8:	d916      	bls.n	80092d8 <UART_SetConfig+0x920>
 80092aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092b0:	d212      	bcs.n	80092d8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80092b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	f023 030f 	bic.w	r3, r3, #15
 80092ba:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092be:	085b      	lsrs	r3, r3, #1
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	f003 0307 	and.w	r3, r3, #7
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80092ca:	4313      	orrs	r3, r2
 80092cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80092d4:	60da      	str	r2, [r3, #12]
 80092d6:	e0b9      	b.n	800944c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80092de:	e0b5      	b.n	800944c <UART_SetConfig+0xa94>
 80092e0:	03d09000 	.word	0x03d09000
 80092e4:	003d0900 	.word	0x003d0900
 80092e8:	0800dbf4 	.word	0x0800dbf4
 80092ec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80092f0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80092f4:	2b20      	cmp	r3, #32
 80092f6:	dc49      	bgt.n	800938c <UART_SetConfig+0x9d4>
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	db7c      	blt.n	80093f6 <UART_SetConfig+0xa3e>
 80092fc:	2b20      	cmp	r3, #32
 80092fe:	d87a      	bhi.n	80093f6 <UART_SetConfig+0xa3e>
 8009300:	a201      	add	r2, pc, #4	@ (adr r2, 8009308 <UART_SetConfig+0x950>)
 8009302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009306:	bf00      	nop
 8009308:	08009393 	.word	0x08009393
 800930c:	0800939b 	.word	0x0800939b
 8009310:	080093f7 	.word	0x080093f7
 8009314:	080093f7 	.word	0x080093f7
 8009318:	080093a3 	.word	0x080093a3
 800931c:	080093f7 	.word	0x080093f7
 8009320:	080093f7 	.word	0x080093f7
 8009324:	080093f7 	.word	0x080093f7
 8009328:	080093b3 	.word	0x080093b3
 800932c:	080093f7 	.word	0x080093f7
 8009330:	080093f7 	.word	0x080093f7
 8009334:	080093f7 	.word	0x080093f7
 8009338:	080093f7 	.word	0x080093f7
 800933c:	080093f7 	.word	0x080093f7
 8009340:	080093f7 	.word	0x080093f7
 8009344:	080093f7 	.word	0x080093f7
 8009348:	080093c3 	.word	0x080093c3
 800934c:	080093f7 	.word	0x080093f7
 8009350:	080093f7 	.word	0x080093f7
 8009354:	080093f7 	.word	0x080093f7
 8009358:	080093f7 	.word	0x080093f7
 800935c:	080093f7 	.word	0x080093f7
 8009360:	080093f7 	.word	0x080093f7
 8009364:	080093f7 	.word	0x080093f7
 8009368:	080093f7 	.word	0x080093f7
 800936c:	080093f7 	.word	0x080093f7
 8009370:	080093f7 	.word	0x080093f7
 8009374:	080093f7 	.word	0x080093f7
 8009378:	080093f7 	.word	0x080093f7
 800937c:	080093f7 	.word	0x080093f7
 8009380:	080093f7 	.word	0x080093f7
 8009384:	080093f7 	.word	0x080093f7
 8009388:	080093e9 	.word	0x080093e9
 800938c:	2b40      	cmp	r3, #64	@ 0x40
 800938e:	d02e      	beq.n	80093ee <UART_SetConfig+0xa36>
 8009390:	e031      	b.n	80093f6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009392:	f7fc fc83 	bl	8005c9c <HAL_RCC_GetPCLK1Freq>
 8009396:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009398:	e033      	b.n	8009402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800939a:	f7fc fc95 	bl	8005cc8 <HAL_RCC_GetPCLK2Freq>
 800939e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80093a0:	e02f      	b.n	8009402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7fd fec4 	bl	8007134 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093b0:	e027      	b.n	8009402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093b2:	f107 0318 	add.w	r3, r7, #24
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fe f810 	bl	80073dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093c0:	e01f      	b.n	8009402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093c2:	4b2d      	ldr	r3, [pc, #180]	@ (8009478 <UART_SetConfig+0xac0>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f003 0320 	and.w	r3, r3, #32
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d009      	beq.n	80093e2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093ce:	4b2a      	ldr	r3, [pc, #168]	@ (8009478 <UART_SetConfig+0xac0>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	08db      	lsrs	r3, r3, #3
 80093d4:	f003 0303 	and.w	r3, r3, #3
 80093d8:	4a28      	ldr	r2, [pc, #160]	@ (800947c <UART_SetConfig+0xac4>)
 80093da:	fa22 f303 	lsr.w	r3, r2, r3
 80093de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093e0:	e00f      	b.n	8009402 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80093e2:	4b26      	ldr	r3, [pc, #152]	@ (800947c <UART_SetConfig+0xac4>)
 80093e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093e6:	e00c      	b.n	8009402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093e8:	4b25      	ldr	r3, [pc, #148]	@ (8009480 <UART_SetConfig+0xac8>)
 80093ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ec:	e009      	b.n	8009402 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093f4:	e005      	b.n	8009402 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80093f6:	2300      	movs	r3, #0
 80093f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009400:	bf00      	nop
    }

    if (pclk != 0U)
 8009402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009404:	2b00      	cmp	r3, #0
 8009406:	d021      	beq.n	800944c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800940c:	4a1d      	ldr	r2, [pc, #116]	@ (8009484 <UART_SetConfig+0xacc>)
 800940e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009412:	461a      	mov	r2, r3
 8009414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009416:	fbb3 f2f2 	udiv	r2, r3, r2
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	085b      	lsrs	r3, r3, #1
 8009420:	441a      	add	r2, r3
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	fbb2 f3f3 	udiv	r3, r2, r3
 800942a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800942c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800942e:	2b0f      	cmp	r3, #15
 8009430:	d909      	bls.n	8009446 <UART_SetConfig+0xa8e>
 8009432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009438:	d205      	bcs.n	8009446 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800943a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800943c:	b29a      	uxth	r2, r3
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	60da      	str	r2, [r3, #12]
 8009444:	e002      	b.n	800944c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	2201      	movs	r2, #1
 8009450:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	2201      	movs	r2, #1
 8009458:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	2200      	movs	r2, #0
 8009460:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	2200      	movs	r2, #0
 8009466:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009468:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800946c:	4618      	mov	r0, r3
 800946e:	3748      	adds	r7, #72	@ 0x48
 8009470:	46bd      	mov	sp, r7
 8009472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009476:	bf00      	nop
 8009478:	58024400 	.word	0x58024400
 800947c:	03d09000 	.word	0x03d09000
 8009480:	003d0900 	.word	0x003d0900
 8009484:	0800dbf4 	.word	0x0800dbf4

08009488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009494:	f003 0308 	and.w	r3, r3, #8
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00a      	beq.n	80094b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094b6:	f003 0301 	and.w	r3, r3, #1
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00a      	beq.n	80094d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	430a      	orrs	r2, r1
 80094d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d8:	f003 0302 	and.w	r3, r3, #2
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00a      	beq.n	80094f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	430a      	orrs	r2, r1
 80094f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094fa:	f003 0304 	and.w	r3, r3, #4
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00a      	beq.n	8009518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	430a      	orrs	r2, r1
 8009516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800951c:	f003 0310 	and.w	r3, r3, #16
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00a      	beq.n	800953a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	430a      	orrs	r2, r1
 8009538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800953e:	f003 0320 	and.w	r3, r3, #32
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00a      	beq.n	800955c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	689b      	ldr	r3, [r3, #8]
 800954c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	430a      	orrs	r2, r1
 800955a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009564:	2b00      	cmp	r3, #0
 8009566:	d01a      	beq.n	800959e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	430a      	orrs	r2, r1
 800957c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009582:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009586:	d10a      	bne.n	800959e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	430a      	orrs	r2, r1
 800959c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00a      	beq.n	80095c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	430a      	orrs	r2, r1
 80095be:	605a      	str	r2, [r3, #4]
  }
}
 80095c0:	bf00      	nop
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b098      	sub	sp, #96	@ 0x60
 80095d0:	af02      	add	r7, sp, #8
 80095d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80095dc:	f7f8 fe5e 	bl	800229c <HAL_GetTick>
 80095e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 0308 	and.w	r3, r3, #8
 80095ec:	2b08      	cmp	r3, #8
 80095ee:	d12f      	bne.n	8009650 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80095f4:	9300      	str	r3, [sp, #0]
 80095f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095f8:	2200      	movs	r2, #0
 80095fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f88e 	bl	8009720 <UART_WaitOnFlagUntilTimeout>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d022      	beq.n	8009650 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009612:	e853 3f00 	ldrex	r3, [r3]
 8009616:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800961a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800961e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	461a      	mov	r2, r3
 8009626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009628:	647b      	str	r3, [r7, #68]	@ 0x44
 800962a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800962e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009630:	e841 2300 	strex	r3, r2, [r1]
 8009634:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1e6      	bne.n	800960a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2220      	movs	r2, #32
 8009640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800964c:	2303      	movs	r3, #3
 800964e:	e063      	b.n	8009718 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f003 0304 	and.w	r3, r3, #4
 800965a:	2b04      	cmp	r3, #4
 800965c:	d149      	bne.n	80096f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800965e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009662:	9300      	str	r3, [sp, #0]
 8009664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009666:	2200      	movs	r2, #0
 8009668:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 f857 	bl	8009720 <UART_WaitOnFlagUntilTimeout>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d03c      	beq.n	80096f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009680:	e853 3f00 	ldrex	r3, [r3]
 8009684:	623b      	str	r3, [r7, #32]
   return(result);
 8009686:	6a3b      	ldr	r3, [r7, #32]
 8009688:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800968c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	461a      	mov	r2, r3
 8009694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009696:	633b      	str	r3, [r7, #48]	@ 0x30
 8009698:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800969c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800969e:	e841 2300 	strex	r3, r2, [r1]
 80096a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1e6      	bne.n	8009678 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	3308      	adds	r3, #8
 80096b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	e853 3f00 	ldrex	r3, [r3]
 80096b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f023 0301 	bic.w	r3, r3, #1
 80096c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	3308      	adds	r3, #8
 80096c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096ca:	61fa      	str	r2, [r7, #28]
 80096cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ce:	69b9      	ldr	r1, [r7, #24]
 80096d0:	69fa      	ldr	r2, [r7, #28]
 80096d2:	e841 2300 	strex	r3, r2, [r1]
 80096d6:	617b      	str	r3, [r7, #20]
   return(result);
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1e5      	bne.n	80096aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2220      	movs	r2, #32
 80096e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096ee:	2303      	movs	r3, #3
 80096f0:	e012      	b.n	8009718 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2220      	movs	r2, #32
 80096f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2220      	movs	r2, #32
 80096fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3758      	adds	r7, #88	@ 0x58
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	603b      	str	r3, [r7, #0]
 800972c:	4613      	mov	r3, r2
 800972e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009730:	e04f      	b.n	80097d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009738:	d04b      	beq.n	80097d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800973a:	f7f8 fdaf 	bl	800229c <HAL_GetTick>
 800973e:	4602      	mov	r2, r0
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	1ad3      	subs	r3, r2, r3
 8009744:	69ba      	ldr	r2, [r7, #24]
 8009746:	429a      	cmp	r2, r3
 8009748:	d302      	bcc.n	8009750 <UART_WaitOnFlagUntilTimeout+0x30>
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d101      	bne.n	8009754 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009750:	2303      	movs	r3, #3
 8009752:	e04e      	b.n	80097f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 0304 	and.w	r3, r3, #4
 800975e:	2b00      	cmp	r3, #0
 8009760:	d037      	beq.n	80097d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	2b80      	cmp	r3, #128	@ 0x80
 8009766:	d034      	beq.n	80097d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	2b40      	cmp	r3, #64	@ 0x40
 800976c:	d031      	beq.n	80097d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	69db      	ldr	r3, [r3, #28]
 8009774:	f003 0308 	and.w	r3, r3, #8
 8009778:	2b08      	cmp	r3, #8
 800977a:	d110      	bne.n	800979e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2208      	movs	r2, #8
 8009782:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f000 f839 	bl	80097fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2208      	movs	r2, #8
 800978e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2200      	movs	r2, #0
 8009796:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e029      	b.n	80097f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	69db      	ldr	r3, [r3, #28]
 80097a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80097ac:	d111      	bne.n	80097d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80097b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f000 f81f 	bl	80097fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2220      	movs	r2, #32
 80097c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80097ce:	2303      	movs	r3, #3
 80097d0:	e00f      	b.n	80097f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	69da      	ldr	r2, [r3, #28]
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	4013      	ands	r3, r2
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	429a      	cmp	r2, r3
 80097e0:	bf0c      	ite	eq
 80097e2:	2301      	moveq	r3, #1
 80097e4:	2300      	movne	r3, #0
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	461a      	mov	r2, r3
 80097ea:	79fb      	ldrb	r3, [r7, #7]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d0a0      	beq.n	8009732 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
	...

080097fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b095      	sub	sp, #84	@ 0x54
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800980c:	e853 3f00 	ldrex	r3, [r3]
 8009810:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009814:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009818:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	461a      	mov	r2, r3
 8009820:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009822:	643b      	str	r3, [r7, #64]	@ 0x40
 8009824:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009826:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009828:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800982a:	e841 2300 	strex	r3, r2, [r1]
 800982e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1e6      	bne.n	8009804 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	3308      	adds	r3, #8
 800983c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983e:	6a3b      	ldr	r3, [r7, #32]
 8009840:	e853 3f00 	ldrex	r3, [r3]
 8009844:	61fb      	str	r3, [r7, #28]
   return(result);
 8009846:	69fa      	ldr	r2, [r7, #28]
 8009848:	4b1e      	ldr	r3, [pc, #120]	@ (80098c4 <UART_EndRxTransfer+0xc8>)
 800984a:	4013      	ands	r3, r2
 800984c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	3308      	adds	r3, #8
 8009854:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009856:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009858:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800985c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800985e:	e841 2300 	strex	r3, r2, [r1]
 8009862:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009866:	2b00      	cmp	r3, #0
 8009868:	d1e5      	bne.n	8009836 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800986e:	2b01      	cmp	r3, #1
 8009870:	d118      	bne.n	80098a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	e853 3f00 	ldrex	r3, [r3]
 800987e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	f023 0310 	bic.w	r3, r3, #16
 8009886:	647b      	str	r3, [r7, #68]	@ 0x44
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	461a      	mov	r2, r3
 800988e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009890:	61bb      	str	r3, [r7, #24]
 8009892:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009894:	6979      	ldr	r1, [r7, #20]
 8009896:	69ba      	ldr	r2, [r7, #24]
 8009898:	e841 2300 	strex	r3, r2, [r1]
 800989c:	613b      	str	r3, [r7, #16]
   return(result);
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1e6      	bne.n	8009872 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2220      	movs	r2, #32
 80098a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80098b8:	bf00      	nop
 80098ba:	3754      	adds	r7, #84	@ 0x54
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	effffffe 	.word	0xeffffffe

080098c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d101      	bne.n	80098de <HAL_UARTEx_DisableFifoMode+0x16>
 80098da:	2302      	movs	r3, #2
 80098dc:	e027      	b.n	800992e <HAL_UARTEx_DisableFifoMode+0x66>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2224      	movs	r2, #36	@ 0x24
 80098ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f022 0201 	bic.w	r2, r2, #1
 8009904:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800990c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2220      	movs	r2, #32
 8009920:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800992c:	2300      	movs	r3, #0
}
 800992e:	4618      	mov	r0, r3
 8009930:	3714      	adds	r7, #20
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr

0800993a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b084      	sub	sp, #16
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
 8009942:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800994a:	2b01      	cmp	r3, #1
 800994c:	d101      	bne.n	8009952 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800994e:	2302      	movs	r3, #2
 8009950:	e02d      	b.n	80099ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2201      	movs	r2, #1
 8009956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2224      	movs	r2, #36	@ 0x24
 800995e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f022 0201 	bic.w	r2, r2, #1
 8009978:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	683a      	ldr	r2, [r7, #0]
 800998a:	430a      	orrs	r2, r1
 800998c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f850 	bl	8009a34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2220      	movs	r2, #32
 80099a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099ac:	2300      	movs	r3, #0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b084      	sub	sp, #16
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d101      	bne.n	80099ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80099ca:	2302      	movs	r3, #2
 80099cc:	e02d      	b.n	8009a2a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2224      	movs	r2, #36	@ 0x24
 80099da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f022 0201 	bic.w	r2, r2, #1
 80099f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	683a      	ldr	r2, [r7, #0]
 8009a06:	430a      	orrs	r2, r1
 8009a08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f812 	bl	8009a34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2220      	movs	r2, #32
 8009a1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
	...

08009a34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d108      	bne.n	8009a56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2201      	movs	r2, #1
 8009a48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a54:	e031      	b.n	8009aba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a56:	2310      	movs	r3, #16
 8009a58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a5a:	2310      	movs	r3, #16
 8009a5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	0e5b      	lsrs	r3, r3, #25
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	f003 0307 	and.w	r3, r3, #7
 8009a6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	0f5b      	lsrs	r3, r3, #29
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	f003 0307 	and.w	r3, r3, #7
 8009a7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a7e:	7bbb      	ldrb	r3, [r7, #14]
 8009a80:	7b3a      	ldrb	r2, [r7, #12]
 8009a82:	4911      	ldr	r1, [pc, #68]	@ (8009ac8 <UARTEx_SetNbDataToProcess+0x94>)
 8009a84:	5c8a      	ldrb	r2, [r1, r2]
 8009a86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a8a:	7b3a      	ldrb	r2, [r7, #12]
 8009a8c:	490f      	ldr	r1, [pc, #60]	@ (8009acc <UARTEx_SetNbDataToProcess+0x98>)
 8009a8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a90:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a9c:	7bfb      	ldrb	r3, [r7, #15]
 8009a9e:	7b7a      	ldrb	r2, [r7, #13]
 8009aa0:	4909      	ldr	r1, [pc, #36]	@ (8009ac8 <UARTEx_SetNbDataToProcess+0x94>)
 8009aa2:	5c8a      	ldrb	r2, [r1, r2]
 8009aa4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009aa8:	7b7a      	ldrb	r2, [r7, #13]
 8009aaa:	4908      	ldr	r1, [pc, #32]	@ (8009acc <UARTEx_SetNbDataToProcess+0x98>)
 8009aac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009aae:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009aba:	bf00      	nop
 8009abc:	3714      	adds	r7, #20
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr
 8009ac6:	bf00      	nop
 8009ac8:	0800dc0c 	.word	0x0800dc0c
 8009acc:	0800dc14 	.word	0x0800dc14

08009ad0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ad0:	b084      	sub	sp, #16
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b084      	sub	sp, #16
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	f107 001c 	add.w	r0, r7, #28
 8009ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ae2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d121      	bne.n	8009b2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	68da      	ldr	r2, [r3, #12]
 8009afa:	4b2c      	ldr	r3, [pc, #176]	@ (8009bac <USB_CoreInit+0xdc>)
 8009afc:	4013      	ands	r3, r2
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009b0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d105      	bne.n	8009b22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f001 fafa 	bl	800b11c <USB_CoreReset>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	73fb      	strb	r3, [r7, #15]
 8009b2c:	e01b      	b.n	8009b66 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f001 faee 	bl	800b11c <USB_CoreReset>
 8009b40:	4603      	mov	r3, r0
 8009b42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009b44:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d106      	bne.n	8009b5a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b50:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	639a      	str	r2, [r3, #56]	@ 0x38
 8009b58:	e005      	b.n	8009b66 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b5e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009b66:	7fbb      	ldrb	r3, [r7, #30]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d116      	bne.n	8009b9a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8009bb0 <USB_CoreInit+0xe0>)
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	f043 0206 	orr.w	r2, r3, #6
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	f043 0220 	orr.w	r2, r3, #32
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ba6:	b004      	add	sp, #16
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	ffbdffbf 	.word	0xffbdffbf
 8009bb0:	03ee0000 	.word	0x03ee0000

08009bb4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b087      	sub	sp, #28
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009bc2:	79fb      	ldrb	r3, [r7, #7]
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d165      	bne.n	8009c94 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	4a41      	ldr	r2, [pc, #260]	@ (8009cd0 <USB_SetTurnaroundTime+0x11c>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d906      	bls.n	8009bde <USB_SetTurnaroundTime+0x2a>
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	4a40      	ldr	r2, [pc, #256]	@ (8009cd4 <USB_SetTurnaroundTime+0x120>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d202      	bcs.n	8009bde <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009bd8:	230f      	movs	r3, #15
 8009bda:	617b      	str	r3, [r7, #20]
 8009bdc:	e062      	b.n	8009ca4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	4a3c      	ldr	r2, [pc, #240]	@ (8009cd4 <USB_SetTurnaroundTime+0x120>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d306      	bcc.n	8009bf4 <USB_SetTurnaroundTime+0x40>
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	4a3b      	ldr	r2, [pc, #236]	@ (8009cd8 <USB_SetTurnaroundTime+0x124>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d202      	bcs.n	8009bf4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009bee:	230e      	movs	r3, #14
 8009bf0:	617b      	str	r3, [r7, #20]
 8009bf2:	e057      	b.n	8009ca4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	4a38      	ldr	r2, [pc, #224]	@ (8009cd8 <USB_SetTurnaroundTime+0x124>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d306      	bcc.n	8009c0a <USB_SetTurnaroundTime+0x56>
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	4a37      	ldr	r2, [pc, #220]	@ (8009cdc <USB_SetTurnaroundTime+0x128>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d202      	bcs.n	8009c0a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009c04:	230d      	movs	r3, #13
 8009c06:	617b      	str	r3, [r7, #20]
 8009c08:	e04c      	b.n	8009ca4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	4a33      	ldr	r2, [pc, #204]	@ (8009cdc <USB_SetTurnaroundTime+0x128>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d306      	bcc.n	8009c20 <USB_SetTurnaroundTime+0x6c>
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	4a32      	ldr	r2, [pc, #200]	@ (8009ce0 <USB_SetTurnaroundTime+0x12c>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d802      	bhi.n	8009c20 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009c1a:	230c      	movs	r3, #12
 8009c1c:	617b      	str	r3, [r7, #20]
 8009c1e:	e041      	b.n	8009ca4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	4a2f      	ldr	r2, [pc, #188]	@ (8009ce0 <USB_SetTurnaroundTime+0x12c>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d906      	bls.n	8009c36 <USB_SetTurnaroundTime+0x82>
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	4a2e      	ldr	r2, [pc, #184]	@ (8009ce4 <USB_SetTurnaroundTime+0x130>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d802      	bhi.n	8009c36 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009c30:	230b      	movs	r3, #11
 8009c32:	617b      	str	r3, [r7, #20]
 8009c34:	e036      	b.n	8009ca4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	4a2a      	ldr	r2, [pc, #168]	@ (8009ce4 <USB_SetTurnaroundTime+0x130>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d906      	bls.n	8009c4c <USB_SetTurnaroundTime+0x98>
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	4a29      	ldr	r2, [pc, #164]	@ (8009ce8 <USB_SetTurnaroundTime+0x134>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d802      	bhi.n	8009c4c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009c46:	230a      	movs	r3, #10
 8009c48:	617b      	str	r3, [r7, #20]
 8009c4a:	e02b      	b.n	8009ca4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	4a26      	ldr	r2, [pc, #152]	@ (8009ce8 <USB_SetTurnaroundTime+0x134>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d906      	bls.n	8009c62 <USB_SetTurnaroundTime+0xae>
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	4a25      	ldr	r2, [pc, #148]	@ (8009cec <USB_SetTurnaroundTime+0x138>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d202      	bcs.n	8009c62 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009c5c:	2309      	movs	r3, #9
 8009c5e:	617b      	str	r3, [r7, #20]
 8009c60:	e020      	b.n	8009ca4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	4a21      	ldr	r2, [pc, #132]	@ (8009cec <USB_SetTurnaroundTime+0x138>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d306      	bcc.n	8009c78 <USB_SetTurnaroundTime+0xc4>
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	4a20      	ldr	r2, [pc, #128]	@ (8009cf0 <USB_SetTurnaroundTime+0x13c>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d802      	bhi.n	8009c78 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009c72:	2308      	movs	r3, #8
 8009c74:	617b      	str	r3, [r7, #20]
 8009c76:	e015      	b.n	8009ca4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8009cf0 <USB_SetTurnaroundTime+0x13c>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d906      	bls.n	8009c8e <USB_SetTurnaroundTime+0xda>
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	4a1c      	ldr	r2, [pc, #112]	@ (8009cf4 <USB_SetTurnaroundTime+0x140>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d202      	bcs.n	8009c8e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009c88:	2307      	movs	r3, #7
 8009c8a:	617b      	str	r3, [r7, #20]
 8009c8c:	e00a      	b.n	8009ca4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009c8e:	2306      	movs	r3, #6
 8009c90:	617b      	str	r3, [r7, #20]
 8009c92:	e007      	b.n	8009ca4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009c94:	79fb      	ldrb	r3, [r7, #7]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d102      	bne.n	8009ca0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009c9a:	2309      	movs	r3, #9
 8009c9c:	617b      	str	r3, [r7, #20]
 8009c9e:	e001      	b.n	8009ca4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009ca0:	2309      	movs	r3, #9
 8009ca2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	68da      	ldr	r2, [r3, #12]
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	029b      	lsls	r3, r3, #10
 8009cb8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009cbc:	431a      	orrs	r2, r3
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	371c      	adds	r7, #28
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr
 8009cd0:	00d8acbf 	.word	0x00d8acbf
 8009cd4:	00e4e1c0 	.word	0x00e4e1c0
 8009cd8:	00f42400 	.word	0x00f42400
 8009cdc:	01067380 	.word	0x01067380
 8009ce0:	011a499f 	.word	0x011a499f
 8009ce4:	01312cff 	.word	0x01312cff
 8009ce8:	014ca43f 	.word	0x014ca43f
 8009cec:	016e3600 	.word	0x016e3600
 8009cf0:	01a6ab1f 	.word	0x01a6ab1f
 8009cf4:	01e84800 	.word	0x01e84800

08009cf8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	f043 0201 	orr.w	r2, r3, #1
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	370c      	adds	r7, #12
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b083      	sub	sp, #12
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	f023 0201 	bic.w	r2, r3, #1
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	460b      	mov	r3, r1
 8009d46:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009d58:	78fb      	ldrb	r3, [r7, #3]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d115      	bne.n	8009d8a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009d6a:	200a      	movs	r0, #10
 8009d6c:	f7f8 faa2 	bl	80022b4 <HAL_Delay>
      ms += 10U;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	330a      	adds	r3, #10
 8009d74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f001 f93f 	bl	800affa <USB_GetMode>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d01e      	beq.n	8009dc0 <USB_SetCurrentMode+0x84>
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2bc7      	cmp	r3, #199	@ 0xc7
 8009d86:	d9f0      	bls.n	8009d6a <USB_SetCurrentMode+0x2e>
 8009d88:	e01a      	b.n	8009dc0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009d8a:	78fb      	ldrb	r3, [r7, #3]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d115      	bne.n	8009dbc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009d9c:	200a      	movs	r0, #10
 8009d9e:	f7f8 fa89 	bl	80022b4 <HAL_Delay>
      ms += 10U;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	330a      	adds	r3, #10
 8009da6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f001 f926 	bl	800affa <USB_GetMode>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d005      	beq.n	8009dc0 <USB_SetCurrentMode+0x84>
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2bc7      	cmp	r3, #199	@ 0xc7
 8009db8:	d9f0      	bls.n	8009d9c <USB_SetCurrentMode+0x60>
 8009dba:	e001      	b.n	8009dc0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e005      	b.n	8009dcc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2bc8      	cmp	r3, #200	@ 0xc8
 8009dc4:	d101      	bne.n	8009dca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e000      	b.n	8009dcc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009dd4:	b084      	sub	sp, #16
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b086      	sub	sp, #24
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
 8009dde:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009de2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009dee:	2300      	movs	r3, #0
 8009df0:	613b      	str	r3, [r7, #16]
 8009df2:	e009      	b.n	8009e08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	3340      	adds	r3, #64	@ 0x40
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	4413      	add	r3, r2
 8009dfe:	2200      	movs	r2, #0
 8009e00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	3301      	adds	r3, #1
 8009e06:	613b      	str	r3, [r7, #16]
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	2b0e      	cmp	r3, #14
 8009e0c:	d9f2      	bls.n	8009df4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009e0e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d11c      	bne.n	8009e50 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e24:	f043 0302 	orr.w	r3, r3, #2
 8009e28:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e2e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	601a      	str	r2, [r3, #0]
 8009e4e:	e005      	b.n	8009e5c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e54:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009e62:	461a      	mov	r2, r3
 8009e64:	2300      	movs	r3, #0
 8009e66:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009e68:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d10d      	bne.n	8009e8c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009e70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d104      	bne.n	8009e82 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009e78:	2100      	movs	r1, #0
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f968 	bl	800a150 <USB_SetDevSpeed>
 8009e80:	e008      	b.n	8009e94 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009e82:	2101      	movs	r1, #1
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 f963 	bl	800a150 <USB_SetDevSpeed>
 8009e8a:	e003      	b.n	8009e94 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009e8c:	2103      	movs	r1, #3
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f95e 	bl	800a150 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009e94:	2110      	movs	r1, #16
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 f8fa 	bl	800a090 <USB_FlushTxFifo>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d001      	beq.n	8009ea6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f924 	bl	800a0f4 <USB_FlushRxFifo>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d001      	beq.n	8009eb6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ec8:	461a      	mov	r2, r3
 8009eca:	2300      	movs	r3, #0
 8009ecc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009eda:	2300      	movs	r3, #0
 8009edc:	613b      	str	r3, [r7, #16]
 8009ede:	e043      	b.n	8009f68 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	015a      	lsls	r2, r3, #5
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ef2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ef6:	d118      	bne.n	8009f2a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10a      	bne.n	8009f14 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	015a      	lsls	r2, r3, #5
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	4413      	add	r3, r2
 8009f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009f10:	6013      	str	r3, [r2, #0]
 8009f12:	e013      	b.n	8009f3c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	015a      	lsls	r2, r3, #5
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f20:	461a      	mov	r2, r3
 8009f22:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009f26:	6013      	str	r3, [r2, #0]
 8009f28:	e008      	b.n	8009f3c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	015a      	lsls	r2, r3, #5
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	4413      	add	r3, r2
 8009f32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f36:	461a      	mov	r2, r3
 8009f38:	2300      	movs	r3, #0
 8009f3a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	015a      	lsls	r2, r3, #5
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	4413      	add	r3, r2
 8009f44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f48:	461a      	mov	r2, r3
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	015a      	lsls	r2, r3, #5
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	4413      	add	r3, r2
 8009f56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009f60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	3301      	adds	r3, #1
 8009f66:	613b      	str	r3, [r7, #16]
 8009f68:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d3b5      	bcc.n	8009ee0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f74:	2300      	movs	r3, #0
 8009f76:	613b      	str	r3, [r7, #16]
 8009f78:	e043      	b.n	800a002 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	015a      	lsls	r2, r3, #5
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	4413      	add	r3, r2
 8009f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f90:	d118      	bne.n	8009fc4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10a      	bne.n	8009fae <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	015a      	lsls	r2, r3, #5
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009faa:	6013      	str	r3, [r2, #0]
 8009fac:	e013      	b.n	8009fd6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	015a      	lsls	r2, r3, #5
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fba:	461a      	mov	r2, r3
 8009fbc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009fc0:	6013      	str	r3, [r2, #0]
 8009fc2:	e008      	b.n	8009fd6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	015a      	lsls	r2, r3, #5
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	4413      	add	r3, r2
 8009fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	015a      	lsls	r2, r3, #5
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	4413      	add	r3, r2
 8009fde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	015a      	lsls	r2, r3, #5
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	4413      	add	r3, r2
 8009ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009ffa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	3301      	adds	r3, #1
 800a000:	613b      	str	r3, [r7, #16]
 800a002:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a006:	461a      	mov	r2, r3
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d3b5      	bcc.n	8009f7a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a01c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a020:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a02e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a030:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a034:	2b00      	cmp	r3, #0
 800a036:	d105      	bne.n	800a044 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	699b      	ldr	r3, [r3, #24]
 800a03c:	f043 0210 	orr.w	r2, r3, #16
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	699a      	ldr	r2, [r3, #24]
 800a048:	4b0f      	ldr	r3, [pc, #60]	@ (800a088 <USB_DevInit+0x2b4>)
 800a04a:	4313      	orrs	r3, r2
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a050:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a054:	2b00      	cmp	r3, #0
 800a056:	d005      	beq.n	800a064 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	699b      	ldr	r3, [r3, #24]
 800a05c:	f043 0208 	orr.w	r2, r3, #8
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a064:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d105      	bne.n	800a078 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	699a      	ldr	r2, [r3, #24]
 800a070:	4b06      	ldr	r3, [pc, #24]	@ (800a08c <USB_DevInit+0x2b8>)
 800a072:	4313      	orrs	r3, r2
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a078:	7dfb      	ldrb	r3, [r7, #23]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3718      	adds	r7, #24
 800a07e:	46bd      	mov	sp, r7
 800a080:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a084:	b004      	add	sp, #16
 800a086:	4770      	bx	lr
 800a088:	803c3800 	.word	0x803c3800
 800a08c:	40000004 	.word	0x40000004

0800a090 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a09a:	2300      	movs	r3, #0
 800a09c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a0aa:	d901      	bls.n	800a0b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	e01b      	b.n	800a0e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	691b      	ldr	r3, [r3, #16]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	daf2      	bge.n	800a09e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	019b      	lsls	r3, r3, #6
 800a0c0:	f043 0220 	orr.w	r2, r3, #32
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a0d4:	d901      	bls.n	800a0da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	e006      	b.n	800a0e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	f003 0320 	and.w	r3, r3, #32
 800a0e2:	2b20      	cmp	r3, #32
 800a0e4:	d0f0      	beq.n	800a0c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a0e6:	2300      	movs	r3, #0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3714      	adds	r7, #20
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	3301      	adds	r3, #1
 800a104:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a10c:	d901      	bls.n	800a112 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a10e:	2303      	movs	r3, #3
 800a110:	e018      	b.n	800a144 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	2b00      	cmp	r3, #0
 800a118:	daf2      	bge.n	800a100 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a11a:	2300      	movs	r3, #0
 800a11c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2210      	movs	r2, #16
 800a122:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	3301      	adds	r3, #1
 800a128:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a130:	d901      	bls.n	800a136 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a132:	2303      	movs	r3, #3
 800a134:	e006      	b.n	800a144 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	f003 0310 	and.w	r3, r3, #16
 800a13e:	2b10      	cmp	r3, #16
 800a140:	d0f0      	beq.n	800a124 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3714      	adds	r7, #20
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a150:	b480      	push	{r7}
 800a152:	b085      	sub	sp, #20
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	460b      	mov	r3, r1
 800a15a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	78fb      	ldrb	r3, [r7, #3]
 800a16a:	68f9      	ldr	r1, [r7, #12]
 800a16c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a170:	4313      	orrs	r3, r2
 800a172:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3714      	adds	r7, #20
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr

0800a182 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a182:	b480      	push	{r7}
 800a184:	b087      	sub	sp, #28
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	f003 0306 	and.w	r3, r3, #6
 800a19a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d102      	bne.n	800a1a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	75fb      	strb	r3, [r7, #23]
 800a1a6:	e00a      	b.n	800a1be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	d002      	beq.n	800a1b4 <USB_GetDevSpeed+0x32>
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2b06      	cmp	r3, #6
 800a1b2:	d102      	bne.n	800a1ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	75fb      	strb	r3, [r7, #23]
 800a1b8:	e001      	b.n	800a1be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a1ba:	230f      	movs	r3, #15
 800a1bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a1be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	371c      	adds	r7, #28
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	785b      	ldrb	r3, [r3, #1]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d139      	bne.n	800a25c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1ee:	69da      	ldr	r2, [r3, #28]
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	f003 030f 	and.w	r3, r3, #15
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	68f9      	ldr	r1, [r7, #12]
 800a202:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a206:	4313      	orrs	r3, r2
 800a208:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	015a      	lsls	r2, r3, #5
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	4413      	add	r3, r2
 800a212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d153      	bne.n	800a2c8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	015a      	lsls	r2, r3, #5
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	4413      	add	r3, r2
 800a228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	791b      	ldrb	r3, [r3, #4]
 800a23a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a23c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	059b      	lsls	r3, r3, #22
 800a242:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a244:	431a      	orrs	r2, r3
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	0159      	lsls	r1, r3, #5
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	440b      	add	r3, r1
 800a24e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a252:	4619      	mov	r1, r3
 800a254:	4b20      	ldr	r3, [pc, #128]	@ (800a2d8 <USB_ActivateEndpoint+0x10c>)
 800a256:	4313      	orrs	r3, r2
 800a258:	600b      	str	r3, [r1, #0]
 800a25a:	e035      	b.n	800a2c8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a262:	69da      	ldr	r2, [r3, #28]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	f003 030f 	and.w	r3, r3, #15
 800a26c:	2101      	movs	r1, #1
 800a26e:	fa01 f303 	lsl.w	r3, r1, r3
 800a272:	041b      	lsls	r3, r3, #16
 800a274:	68f9      	ldr	r1, [r7, #12]
 800a276:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a27a:	4313      	orrs	r3, r2
 800a27c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	015a      	lsls	r2, r3, #5
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	4413      	add	r3, r2
 800a286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a290:	2b00      	cmp	r3, #0
 800a292:	d119      	bne.n	800a2c8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	015a      	lsls	r2, r3, #5
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	4413      	add	r3, r2
 800a29c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	791b      	ldrb	r3, [r3, #4]
 800a2ae:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a2b0:	430b      	orrs	r3, r1
 800a2b2:	431a      	orrs	r2, r3
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	0159      	lsls	r1, r3, #5
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	440b      	add	r3, r1
 800a2bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	4b05      	ldr	r3, [pc, #20]	@ (800a2d8 <USB_ActivateEndpoint+0x10c>)
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3714      	adds	r7, #20
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	10008000 	.word	0x10008000

0800a2dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b085      	sub	sp, #20
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	785b      	ldrb	r3, [r3, #1]
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d161      	bne.n	800a3bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	015a      	lsls	r2, r3, #5
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	4413      	add	r3, r2
 800a300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a30a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a30e:	d11f      	bne.n	800a350 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	015a      	lsls	r2, r3, #5
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	4413      	add	r3, r2
 800a318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	68ba      	ldr	r2, [r7, #8]
 800a320:	0151      	lsls	r1, r2, #5
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	440a      	add	r2, r1
 800a326:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a32a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a32e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	015a      	lsls	r2, r3, #5
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	4413      	add	r3, r2
 800a338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68ba      	ldr	r2, [r7, #8]
 800a340:	0151      	lsls	r1, r2, #5
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	440a      	add	r2, r1
 800a346:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a34a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a34e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a356:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	f003 030f 	and.w	r3, r3, #15
 800a360:	2101      	movs	r1, #1
 800a362:	fa01 f303 	lsl.w	r3, r1, r3
 800a366:	b29b      	uxth	r3, r3
 800a368:	43db      	mvns	r3, r3
 800a36a:	68f9      	ldr	r1, [r7, #12]
 800a36c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a370:	4013      	ands	r3, r2
 800a372:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a37a:	69da      	ldr	r2, [r3, #28]
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	f003 030f 	and.w	r3, r3, #15
 800a384:	2101      	movs	r1, #1
 800a386:	fa01 f303 	lsl.w	r3, r1, r3
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	43db      	mvns	r3, r3
 800a38e:	68f9      	ldr	r1, [r7, #12]
 800a390:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a394:	4013      	ands	r3, r2
 800a396:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	015a      	lsls	r2, r3, #5
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	4413      	add	r3, r2
 800a3a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	0159      	lsls	r1, r3, #5
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	440b      	add	r3, r1
 800a3ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	4b35      	ldr	r3, [pc, #212]	@ (800a48c <USB_DeactivateEndpoint+0x1b0>)
 800a3b6:	4013      	ands	r3, r2
 800a3b8:	600b      	str	r3, [r1, #0]
 800a3ba:	e060      	b.n	800a47e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	015a      	lsls	r2, r3, #5
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3d2:	d11f      	bne.n	800a414 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	015a      	lsls	r2, r3, #5
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	4413      	add	r3, r2
 800a3dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	0151      	lsls	r1, r2, #5
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	440a      	add	r2, r1
 800a3ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a3f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	015a      	lsls	r2, r3, #5
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	68ba      	ldr	r2, [r7, #8]
 800a404:	0151      	lsls	r1, r2, #5
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	440a      	add	r2, r1
 800a40a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a40e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a412:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a41a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	f003 030f 	and.w	r3, r3, #15
 800a424:	2101      	movs	r1, #1
 800a426:	fa01 f303 	lsl.w	r3, r1, r3
 800a42a:	041b      	lsls	r3, r3, #16
 800a42c:	43db      	mvns	r3, r3
 800a42e:	68f9      	ldr	r1, [r7, #12]
 800a430:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a434:	4013      	ands	r3, r2
 800a436:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a43e:	69da      	ldr	r2, [r3, #28]
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	f003 030f 	and.w	r3, r3, #15
 800a448:	2101      	movs	r1, #1
 800a44a:	fa01 f303 	lsl.w	r3, r1, r3
 800a44e:	041b      	lsls	r3, r3, #16
 800a450:	43db      	mvns	r3, r3
 800a452:	68f9      	ldr	r1, [r7, #12]
 800a454:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a458:	4013      	ands	r3, r2
 800a45a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	015a      	lsls	r2, r3, #5
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	4413      	add	r3, r2
 800a464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	0159      	lsls	r1, r3, #5
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	440b      	add	r3, r1
 800a472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a476:	4619      	mov	r1, r3
 800a478:	4b05      	ldr	r3, [pc, #20]	@ (800a490 <USB_DeactivateEndpoint+0x1b4>)
 800a47a:	4013      	ands	r3, r2
 800a47c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a47e:	2300      	movs	r3, #0
}
 800a480:	4618      	mov	r0, r3
 800a482:	3714      	adds	r7, #20
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr
 800a48c:	ec337800 	.word	0xec337800
 800a490:	eff37800 	.word	0xeff37800

0800a494 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b08a      	sub	sp, #40	@ 0x28
 800a498:	af02      	add	r7, sp, #8
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	4613      	mov	r3, r2
 800a4a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	785b      	ldrb	r3, [r3, #1]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	f040 8185 	bne.w	800a7c0 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	691b      	ldr	r3, [r3, #16]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d132      	bne.n	800a524 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	015a      	lsls	r2, r3, #5
 800a4c2:	69fb      	ldr	r3, [r7, #28]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4ca:	691a      	ldr	r2, [r3, #16]
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	0159      	lsls	r1, r3, #5
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	440b      	add	r3, r1
 800a4d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4d8:	4619      	mov	r1, r3
 800a4da:	4ba7      	ldr	r3, [pc, #668]	@ (800a778 <USB_EPStartXfer+0x2e4>)
 800a4dc:	4013      	ands	r3, r2
 800a4de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	015a      	lsls	r2, r3, #5
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	69ba      	ldr	r2, [r7, #24]
 800a4f0:	0151      	lsls	r1, r2, #5
 800a4f2:	69fa      	ldr	r2, [r7, #28]
 800a4f4:	440a      	add	r2, r1
 800a4f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a4fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	015a      	lsls	r2, r3, #5
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	4413      	add	r3, r2
 800a508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a50c:	691a      	ldr	r2, [r3, #16]
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	0159      	lsls	r1, r3, #5
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	440b      	add	r3, r1
 800a516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a51a:	4619      	mov	r1, r3
 800a51c:	4b97      	ldr	r3, [pc, #604]	@ (800a77c <USB_EPStartXfer+0x2e8>)
 800a51e:	4013      	ands	r3, r2
 800a520:	610b      	str	r3, [r1, #16]
 800a522:	e097      	b.n	800a654 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	015a      	lsls	r2, r3, #5
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	4413      	add	r3, r2
 800a52c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a530:	691a      	ldr	r2, [r3, #16]
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	0159      	lsls	r1, r3, #5
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	440b      	add	r3, r1
 800a53a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a53e:	4619      	mov	r1, r3
 800a540:	4b8e      	ldr	r3, [pc, #568]	@ (800a77c <USB_EPStartXfer+0x2e8>)
 800a542:	4013      	ands	r3, r2
 800a544:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	015a      	lsls	r2, r3, #5
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	4413      	add	r3, r2
 800a54e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a552:	691a      	ldr	r2, [r3, #16]
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	0159      	lsls	r1, r3, #5
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	440b      	add	r3, r1
 800a55c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a560:	4619      	mov	r1, r3
 800a562:	4b85      	ldr	r3, [pc, #532]	@ (800a778 <USB_EPStartXfer+0x2e4>)
 800a564:	4013      	ands	r3, r2
 800a566:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d11a      	bne.n	800a5a4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	691a      	ldr	r2, [r3, #16]
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	429a      	cmp	r2, r3
 800a578:	d903      	bls.n	800a582 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	689a      	ldr	r2, [r3, #8]
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	015a      	lsls	r2, r3, #5
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	4413      	add	r3, r2
 800a58a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	69ba      	ldr	r2, [r7, #24]
 800a592:	0151      	lsls	r1, r2, #5
 800a594:	69fa      	ldr	r2, [r7, #28]
 800a596:	440a      	add	r2, r1
 800a598:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a59c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a5a0:	6113      	str	r3, [r2, #16]
 800a5a2:	e044      	b.n	800a62e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	691a      	ldr	r2, [r3, #16]
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	1e5a      	subs	r2, r3, #1
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5b8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	015a      	lsls	r2, r3, #5
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5c6:	691a      	ldr	r2, [r3, #16]
 800a5c8:	8afb      	ldrh	r3, [r7, #22]
 800a5ca:	04d9      	lsls	r1, r3, #19
 800a5cc:	4b6c      	ldr	r3, [pc, #432]	@ (800a780 <USB_EPStartXfer+0x2ec>)
 800a5ce:	400b      	ands	r3, r1
 800a5d0:	69b9      	ldr	r1, [r7, #24]
 800a5d2:	0148      	lsls	r0, r1, #5
 800a5d4:	69f9      	ldr	r1, [r7, #28]
 800a5d6:	4401      	add	r1, r0
 800a5d8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	791b      	ldrb	r3, [r3, #4]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d122      	bne.n	800a62e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	015a      	lsls	r2, r3, #5
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5f4:	691b      	ldr	r3, [r3, #16]
 800a5f6:	69ba      	ldr	r2, [r7, #24]
 800a5f8:	0151      	lsls	r1, r2, #5
 800a5fa:	69fa      	ldr	r2, [r7, #28]
 800a5fc:	440a      	add	r2, r1
 800a5fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a602:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a606:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	015a      	lsls	r2, r3, #5
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	4413      	add	r3, r2
 800a610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a614:	691a      	ldr	r2, [r3, #16]
 800a616:	8afb      	ldrh	r3, [r7, #22]
 800a618:	075b      	lsls	r3, r3, #29
 800a61a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a61e:	69b9      	ldr	r1, [r7, #24]
 800a620:	0148      	lsls	r0, r1, #5
 800a622:	69f9      	ldr	r1, [r7, #28]
 800a624:	4401      	add	r1, r0
 800a626:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a62a:	4313      	orrs	r3, r2
 800a62c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	015a      	lsls	r2, r3, #5
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	4413      	add	r3, r2
 800a636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a63a:	691a      	ldr	r2, [r3, #16]
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	691b      	ldr	r3, [r3, #16]
 800a640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a644:	69b9      	ldr	r1, [r7, #24]
 800a646:	0148      	lsls	r0, r1, #5
 800a648:	69f9      	ldr	r1, [r7, #28]
 800a64a:	4401      	add	r1, r0
 800a64c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a650:	4313      	orrs	r3, r2
 800a652:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a654:	79fb      	ldrb	r3, [r7, #7]
 800a656:	2b01      	cmp	r3, #1
 800a658:	d14b      	bne.n	800a6f2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	69db      	ldr	r3, [r3, #28]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d009      	beq.n	800a676 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	015a      	lsls	r2, r3, #5
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	4413      	add	r3, r2
 800a66a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a66e:	461a      	mov	r2, r3
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	69db      	ldr	r3, [r3, #28]
 800a674:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	791b      	ldrb	r3, [r3, #4]
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d128      	bne.n	800a6d0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d110      	bne.n	800a6b0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	015a      	lsls	r2, r3, #5
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	4413      	add	r3, r2
 800a696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	69ba      	ldr	r2, [r7, #24]
 800a69e:	0151      	lsls	r1, r2, #5
 800a6a0:	69fa      	ldr	r2, [r7, #28]
 800a6a2:	440a      	add	r2, r1
 800a6a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a6ac:	6013      	str	r3, [r2, #0]
 800a6ae:	e00f      	b.n	800a6d0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	015a      	lsls	r2, r3, #5
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	4413      	add	r3, r2
 800a6b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	69ba      	ldr	r2, [r7, #24]
 800a6c0:	0151      	lsls	r1, r2, #5
 800a6c2:	69fa      	ldr	r2, [r7, #28]
 800a6c4:	440a      	add	r2, r1
 800a6c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a6ce:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	015a      	lsls	r2, r3, #5
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	69ba      	ldr	r2, [r7, #24]
 800a6e0:	0151      	lsls	r1, r2, #5
 800a6e2:	69fa      	ldr	r2, [r7, #28]
 800a6e4:	440a      	add	r2, r1
 800a6e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6ea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a6ee:	6013      	str	r3, [r2, #0]
 800a6f0:	e169      	b.n	800a9c6 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a6f2:	69bb      	ldr	r3, [r7, #24]
 800a6f4:	015a      	lsls	r2, r3, #5
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	69ba      	ldr	r2, [r7, #24]
 800a702:	0151      	lsls	r1, r2, #5
 800a704:	69fa      	ldr	r2, [r7, #28]
 800a706:	440a      	add	r2, r1
 800a708:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a70c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a710:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	791b      	ldrb	r3, [r3, #4]
 800a716:	2b01      	cmp	r3, #1
 800a718:	d015      	beq.n	800a746 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	691b      	ldr	r3, [r3, #16]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f000 8151 	beq.w	800a9c6 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a72a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	f003 030f 	and.w	r3, r3, #15
 800a734:	2101      	movs	r1, #1
 800a736:	fa01 f303 	lsl.w	r3, r1, r3
 800a73a:	69f9      	ldr	r1, [r7, #28]
 800a73c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a740:	4313      	orrs	r3, r2
 800a742:	634b      	str	r3, [r1, #52]	@ 0x34
 800a744:	e13f      	b.n	800a9c6 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a752:	2b00      	cmp	r3, #0
 800a754:	d116      	bne.n	800a784 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	015a      	lsls	r2, r3, #5
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	4413      	add	r3, r2
 800a75e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	69ba      	ldr	r2, [r7, #24]
 800a766:	0151      	lsls	r1, r2, #5
 800a768:	69fa      	ldr	r2, [r7, #28]
 800a76a:	440a      	add	r2, r1
 800a76c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a770:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a774:	6013      	str	r3, [r2, #0]
 800a776:	e015      	b.n	800a7a4 <USB_EPStartXfer+0x310>
 800a778:	e007ffff 	.word	0xe007ffff
 800a77c:	fff80000 	.word	0xfff80000
 800a780:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	015a      	lsls	r2, r3, #5
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	4413      	add	r3, r2
 800a78c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	69ba      	ldr	r2, [r7, #24]
 800a794:	0151      	lsls	r1, r2, #5
 800a796:	69fa      	ldr	r2, [r7, #28]
 800a798:	440a      	add	r2, r1
 800a79a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a79e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7a2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	68d9      	ldr	r1, [r3, #12]
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	781a      	ldrb	r2, [r3, #0]
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	b298      	uxth	r0, r3
 800a7b2:	79fb      	ldrb	r3, [r7, #7]
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f000 f9b9 	bl	800ab30 <USB_WritePacket>
 800a7be:	e102      	b.n	800a9c6 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	015a      	lsls	r2, r3, #5
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7cc:	691a      	ldr	r2, [r3, #16]
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	0159      	lsls	r1, r3, #5
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	440b      	add	r3, r1
 800a7d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7da:	4619      	mov	r1, r3
 800a7dc:	4b7c      	ldr	r3, [pc, #496]	@ (800a9d0 <USB_EPStartXfer+0x53c>)
 800a7de:	4013      	ands	r3, r2
 800a7e0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	015a      	lsls	r2, r3, #5
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ee:	691a      	ldr	r2, [r3, #16]
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	0159      	lsls	r1, r3, #5
 800a7f4:	69fb      	ldr	r3, [r7, #28]
 800a7f6:	440b      	add	r3, r1
 800a7f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	4b75      	ldr	r3, [pc, #468]	@ (800a9d4 <USB_EPStartXfer+0x540>)
 800a800:	4013      	ands	r3, r2
 800a802:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d12f      	bne.n	800a86a <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	691b      	ldr	r3, [r3, #16]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d003      	beq.n	800a81a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	689a      	ldr	r2, [r3, #8]
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	689a      	ldr	r2, [r3, #8]
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	015a      	lsls	r2, r3, #5
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	4413      	add	r3, r2
 800a82a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a82e:	691a      	ldr	r2, [r3, #16]
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	6a1b      	ldr	r3, [r3, #32]
 800a834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a838:	69b9      	ldr	r1, [r7, #24]
 800a83a:	0148      	lsls	r0, r1, #5
 800a83c:	69f9      	ldr	r1, [r7, #28]
 800a83e:	4401      	add	r1, r0
 800a840:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a844:	4313      	orrs	r3, r2
 800a846:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	015a      	lsls	r2, r3, #5
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	4413      	add	r3, r2
 800a850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	69ba      	ldr	r2, [r7, #24]
 800a858:	0151      	lsls	r1, r2, #5
 800a85a:	69fa      	ldr	r2, [r7, #28]
 800a85c:	440a      	add	r2, r1
 800a85e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a862:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a866:	6113      	str	r3, [r2, #16]
 800a868:	e05f      	b.n	800a92a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d123      	bne.n	800a8ba <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	015a      	lsls	r2, r3, #5
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	4413      	add	r3, r2
 800a87a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a87e:	691a      	ldr	r2, [r3, #16]
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a888:	69b9      	ldr	r1, [r7, #24]
 800a88a:	0148      	lsls	r0, r1, #5
 800a88c:	69f9      	ldr	r1, [r7, #28]
 800a88e:	4401      	add	r1, r0
 800a890:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a894:	4313      	orrs	r3, r2
 800a896:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a898:	69bb      	ldr	r3, [r7, #24]
 800a89a:	015a      	lsls	r2, r3, #5
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	4413      	add	r3, r2
 800a8a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	69ba      	ldr	r2, [r7, #24]
 800a8a8:	0151      	lsls	r1, r2, #5
 800a8aa:	69fa      	ldr	r2, [r7, #28]
 800a8ac:	440a      	add	r2, r1
 800a8ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a8b6:	6113      	str	r3, [r2, #16]
 800a8b8:	e037      	b.n	800a92a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	691a      	ldr	r2, [r3, #16]
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	1e5a      	subs	r2, r3, #1
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ce:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	8afa      	ldrh	r2, [r7, #22]
 800a8d6:	fb03 f202 	mul.w	r2, r3, r2
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a8de:	69bb      	ldr	r3, [r7, #24]
 800a8e0:	015a      	lsls	r2, r3, #5
 800a8e2:	69fb      	ldr	r3, [r7, #28]
 800a8e4:	4413      	add	r3, r2
 800a8e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8ea:	691a      	ldr	r2, [r3, #16]
 800a8ec:	8afb      	ldrh	r3, [r7, #22]
 800a8ee:	04d9      	lsls	r1, r3, #19
 800a8f0:	4b39      	ldr	r3, [pc, #228]	@ (800a9d8 <USB_EPStartXfer+0x544>)
 800a8f2:	400b      	ands	r3, r1
 800a8f4:	69b9      	ldr	r1, [r7, #24]
 800a8f6:	0148      	lsls	r0, r1, #5
 800a8f8:	69f9      	ldr	r1, [r7, #28]
 800a8fa:	4401      	add	r1, r0
 800a8fc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a900:	4313      	orrs	r3, r2
 800a902:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a904:	69bb      	ldr	r3, [r7, #24]
 800a906:	015a      	lsls	r2, r3, #5
 800a908:	69fb      	ldr	r3, [r7, #28]
 800a90a:	4413      	add	r3, r2
 800a90c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a910:	691a      	ldr	r2, [r3, #16]
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	6a1b      	ldr	r3, [r3, #32]
 800a916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a91a:	69b9      	ldr	r1, [r7, #24]
 800a91c:	0148      	lsls	r0, r1, #5
 800a91e:	69f9      	ldr	r1, [r7, #28]
 800a920:	4401      	add	r1, r0
 800a922:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a926:	4313      	orrs	r3, r2
 800a928:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a92a:	79fb      	ldrb	r3, [r7, #7]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d10d      	bne.n	800a94c <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d009      	beq.n	800a94c <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	68d9      	ldr	r1, [r3, #12]
 800a93c:	69bb      	ldr	r3, [r7, #24]
 800a93e:	015a      	lsls	r2, r3, #5
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	4413      	add	r3, r2
 800a944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a948:	460a      	mov	r2, r1
 800a94a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	791b      	ldrb	r3, [r3, #4]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d128      	bne.n	800a9a6 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a960:	2b00      	cmp	r3, #0
 800a962:	d110      	bne.n	800a986 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	015a      	lsls	r2, r3, #5
 800a968:	69fb      	ldr	r3, [r7, #28]
 800a96a:	4413      	add	r3, r2
 800a96c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	69ba      	ldr	r2, [r7, #24]
 800a974:	0151      	lsls	r1, r2, #5
 800a976:	69fa      	ldr	r2, [r7, #28]
 800a978:	440a      	add	r2, r1
 800a97a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a97e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a982:	6013      	str	r3, [r2, #0]
 800a984:	e00f      	b.n	800a9a6 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	015a      	lsls	r2, r3, #5
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	4413      	add	r3, r2
 800a98e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	69ba      	ldr	r2, [r7, #24]
 800a996:	0151      	lsls	r1, r2, #5
 800a998:	69fa      	ldr	r2, [r7, #28]
 800a99a:	440a      	add	r2, r1
 800a99c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a9a4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	015a      	lsls	r2, r3, #5
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	69ba      	ldr	r2, [r7, #24]
 800a9b6:	0151      	lsls	r1, r2, #5
 800a9b8:	69fa      	ldr	r2, [r7, #28]
 800a9ba:	440a      	add	r2, r1
 800a9bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9c0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a9c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3720      	adds	r7, #32
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	fff80000 	.word	0xfff80000
 800a9d4:	e007ffff 	.word	0xe007ffff
 800a9d8:	1ff80000 	.word	0x1ff80000

0800a9dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b087      	sub	sp, #28
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	785b      	ldrb	r3, [r3, #1]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d14a      	bne.n	800aa90 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	015a      	lsls	r2, r3, #5
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	4413      	add	r3, r2
 800aa04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa12:	f040 8086 	bne.w	800ab22 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	015a      	lsls	r2, r3, #5
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	4413      	add	r3, r2
 800aa20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	683a      	ldr	r2, [r7, #0]
 800aa28:	7812      	ldrb	r2, [r2, #0]
 800aa2a:	0151      	lsls	r1, r2, #5
 800aa2c:	693a      	ldr	r2, [r7, #16]
 800aa2e:	440a      	add	r2, r1
 800aa30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa34:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aa38:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	015a      	lsls	r2, r3, #5
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	4413      	add	r3, r2
 800aa44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	7812      	ldrb	r2, [r2, #0]
 800aa4e:	0151      	lsls	r1, r2, #5
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	440a      	add	r2, r1
 800aa54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aa5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	3301      	adds	r3, #1
 800aa62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f242 7210 	movw	r2, #10000	@ 0x2710
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d902      	bls.n	800aa74 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	75fb      	strb	r3, [r7, #23]
          break;
 800aa72:	e056      	b.n	800ab22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	015a      	lsls	r2, r3, #5
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa8c:	d0e7      	beq.n	800aa5e <USB_EPStopXfer+0x82>
 800aa8e:	e048      	b.n	800ab22 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	015a      	lsls	r2, r3, #5
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	4413      	add	r3, r2
 800aa9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aaa4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aaa8:	d13b      	bne.n	800ab22 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	015a      	lsls	r2, r3, #5
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	4413      	add	r3, r2
 800aab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	7812      	ldrb	r2, [r2, #0]
 800aabe:	0151      	lsls	r1, r2, #5
 800aac0:	693a      	ldr	r2, [r7, #16]
 800aac2:	440a      	add	r2, r1
 800aac4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aac8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aacc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	015a      	lsls	r2, r3, #5
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	4413      	add	r3, r2
 800aad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	683a      	ldr	r2, [r7, #0]
 800aae0:	7812      	ldrb	r2, [r2, #0]
 800aae2:	0151      	lsls	r1, r2, #5
 800aae4:	693a      	ldr	r2, [r7, #16]
 800aae6:	440a      	add	r2, r1
 800aae8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aaec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aaf0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f242 7210 	movw	r2, #10000	@ 0x2710
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d902      	bls.n	800ab08 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	75fb      	strb	r3, [r7, #23]
          break;
 800ab06:	e00c      	b.n	800ab22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	015a      	lsls	r2, r3, #5
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	4413      	add	r3, r2
 800ab12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab20:	d0e7      	beq.n	800aaf2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ab22:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	371c      	adds	r7, #28
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b089      	sub	sp, #36	@ 0x24
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	4611      	mov	r1, r2
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	460b      	mov	r3, r1
 800ab40:	71fb      	strb	r3, [r7, #7]
 800ab42:	4613      	mov	r3, r2
 800ab44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ab4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d123      	bne.n	800ab9e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ab56:	88bb      	ldrh	r3, [r7, #4]
 800ab58:	3303      	adds	r3, #3
 800ab5a:	089b      	lsrs	r3, r3, #2
 800ab5c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ab5e:	2300      	movs	r3, #0
 800ab60:	61bb      	str	r3, [r7, #24]
 800ab62:	e018      	b.n	800ab96 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ab64:	79fb      	ldrb	r3, [r7, #7]
 800ab66:	031a      	lsls	r2, r3, #12
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	4413      	add	r3, r2
 800ab6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab70:	461a      	mov	r2, r3
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	3301      	adds	r3, #1
 800ab82:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	3301      	adds	r3, #1
 800ab88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	3301      	adds	r3, #1
 800ab94:	61bb      	str	r3, [r7, #24]
 800ab96:	69ba      	ldr	r2, [r7, #24]
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d3e2      	bcc.n	800ab64 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3724      	adds	r7, #36	@ 0x24
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800abac:	b480      	push	{r7}
 800abae:	b08b      	sub	sp, #44	@ 0x2c
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	4613      	mov	r3, r2
 800abb8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800abc2:	88fb      	ldrh	r3, [r7, #6]
 800abc4:	089b      	lsrs	r3, r3, #2
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800abca:	88fb      	ldrh	r3, [r7, #6]
 800abcc:	f003 0303 	and.w	r3, r3, #3
 800abd0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800abd2:	2300      	movs	r3, #0
 800abd4:	623b      	str	r3, [r7, #32]
 800abd6:	e014      	b.n	800ac02 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abde:	681a      	ldr	r2, [r3, #0]
 800abe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe2:	601a      	str	r2, [r3, #0]
    pDest++;
 800abe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe6:	3301      	adds	r3, #1
 800abe8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800abea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abec:	3301      	adds	r3, #1
 800abee:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800abf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf2:	3301      	adds	r3, #1
 800abf4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800abf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf8:	3301      	adds	r3, #1
 800abfa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800abfc:	6a3b      	ldr	r3, [r7, #32]
 800abfe:	3301      	adds	r3, #1
 800ac00:	623b      	str	r3, [r7, #32]
 800ac02:	6a3a      	ldr	r2, [r7, #32]
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d3e6      	bcc.n	800abd8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ac0a:	8bfb      	ldrh	r3, [r7, #30]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d01e      	beq.n	800ac4e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ac10:	2300      	movs	r3, #0
 800ac12:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	f107 0310 	add.w	r3, r7, #16
 800ac20:	6812      	ldr	r2, [r2, #0]
 800ac22:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ac24:	693a      	ldr	r2, [r7, #16]
 800ac26:	6a3b      	ldr	r3, [r7, #32]
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	00db      	lsls	r3, r3, #3
 800ac2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac30:	b2da      	uxtb	r2, r3
 800ac32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac34:	701a      	strb	r2, [r3, #0]
      i++;
 800ac36:	6a3b      	ldr	r3, [r7, #32]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	623b      	str	r3, [r7, #32]
      pDest++;
 800ac3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac3e:	3301      	adds	r3, #1
 800ac40:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ac42:	8bfb      	ldrh	r3, [r7, #30]
 800ac44:	3b01      	subs	r3, #1
 800ac46:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ac48:	8bfb      	ldrh	r3, [r7, #30]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d1ea      	bne.n	800ac24 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ac4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	372c      	adds	r7, #44	@ 0x2c
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b085      	sub	sp, #20
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	785b      	ldrb	r3, [r3, #1]
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d12c      	bne.n	800acd2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	015a      	lsls	r2, r3, #5
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	4413      	add	r3, r2
 800ac80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	db12      	blt.n	800acb0 <USB_EPSetStall+0x54>
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d00f      	beq.n	800acb0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	015a      	lsls	r2, r3, #5
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	4413      	add	r3, r2
 800ac98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	68ba      	ldr	r2, [r7, #8]
 800aca0:	0151      	lsls	r1, r2, #5
 800aca2:	68fa      	ldr	r2, [r7, #12]
 800aca4:	440a      	add	r2, r1
 800aca6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acaa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800acae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	015a      	lsls	r2, r3, #5
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	4413      	add	r3, r2
 800acb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	68ba      	ldr	r2, [r7, #8]
 800acc0:	0151      	lsls	r1, r2, #5
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	440a      	add	r2, r1
 800acc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800acce:	6013      	str	r3, [r2, #0]
 800acd0:	e02b      	b.n	800ad2a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	015a      	lsls	r2, r3, #5
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	4413      	add	r3, r2
 800acda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	db12      	blt.n	800ad0a <USB_EPSetStall+0xae>
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00f      	beq.n	800ad0a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	015a      	lsls	r2, r3, #5
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	4413      	add	r3, r2
 800acf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68ba      	ldr	r2, [r7, #8]
 800acfa:	0151      	lsls	r1, r2, #5
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	440a      	add	r2, r1
 800ad00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad04:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ad08:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	015a      	lsls	r2, r3, #5
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	4413      	add	r3, r2
 800ad12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	68ba      	ldr	r2, [r7, #8]
 800ad1a:	0151      	lsls	r1, r2, #5
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	440a      	add	r2, r1
 800ad20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ad28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3714      	adds	r7, #20
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	785b      	ldrb	r3, [r3, #1]
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d128      	bne.n	800ada6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	015a      	lsls	r2, r3, #5
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	4413      	add	r3, r2
 800ad5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	68ba      	ldr	r2, [r7, #8]
 800ad64:	0151      	lsls	r1, r2, #5
 800ad66:	68fa      	ldr	r2, [r7, #12]
 800ad68:	440a      	add	r2, r1
 800ad6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ad72:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	791b      	ldrb	r3, [r3, #4]
 800ad78:	2b03      	cmp	r3, #3
 800ad7a:	d003      	beq.n	800ad84 <USB_EPClearStall+0x4c>
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	791b      	ldrb	r3, [r3, #4]
 800ad80:	2b02      	cmp	r3, #2
 800ad82:	d138      	bne.n	800adf6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	015a      	lsls	r2, r3, #5
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	0151      	lsls	r1, r2, #5
 800ad96:	68fa      	ldr	r2, [r7, #12]
 800ad98:	440a      	add	r2, r1
 800ad9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ada2:	6013      	str	r3, [r2, #0]
 800ada4:	e027      	b.n	800adf6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	015a      	lsls	r2, r3, #5
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	4413      	add	r3, r2
 800adae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	68ba      	ldr	r2, [r7, #8]
 800adb6:	0151      	lsls	r1, r2, #5
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	440a      	add	r2, r1
 800adbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adc0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800adc4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	791b      	ldrb	r3, [r3, #4]
 800adca:	2b03      	cmp	r3, #3
 800adcc:	d003      	beq.n	800add6 <USB_EPClearStall+0x9e>
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	791b      	ldrb	r3, [r3, #4]
 800add2:	2b02      	cmp	r3, #2
 800add4:	d10f      	bne.n	800adf6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	015a      	lsls	r2, r3, #5
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	4413      	add	r3, r2
 800adde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68ba      	ldr	r2, [r7, #8]
 800ade6:	0151      	lsls	r1, r2, #5
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	440a      	add	r2, r1
 800adec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800adf4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3714      	adds	r7, #20
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae22:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ae26:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	78fb      	ldrb	r3, [r7, #3]
 800ae32:	011b      	lsls	r3, r3, #4
 800ae34:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ae38:	68f9      	ldr	r1, [r7, #12]
 800ae3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ae42:	2300      	movs	r3, #0
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3714      	adds	r7, #20
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	68fa      	ldr	r2, [r7, #12]
 800ae66:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ae6a:	f023 0303 	bic.w	r3, r3, #3
 800ae6e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae7e:	f023 0302 	bic.w	r3, r3, #2
 800ae82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae84:	2300      	movs	r3, #0
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3714      	adds	r7, #20
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr

0800ae92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae92:	b480      	push	{r7}
 800ae94:	b085      	sub	sp, #20
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	68fa      	ldr	r2, [r7, #12]
 800aea8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aeac:	f023 0303 	bic.w	r3, r3, #3
 800aeb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	68fa      	ldr	r2, [r7, #12]
 800aebc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aec0:	f043 0302 	orr.w	r3, r3, #2
 800aec4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aec6:	2300      	movs	r3, #0
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3714      	adds	r7, #20
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	695b      	ldr	r3, [r3, #20]
 800aee0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	699b      	ldr	r3, [r3, #24]
 800aee6:	68fa      	ldr	r2, [r7, #12]
 800aee8:	4013      	ands	r3, r2
 800aeea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aeec:	68fb      	ldr	r3, [r7, #12]
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3714      	adds	r7, #20
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr

0800aefa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800aefa:	b480      	push	{r7}
 800aefc:	b085      	sub	sp, #20
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af0c:	699b      	ldr	r3, [r3, #24]
 800af0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af16:	69db      	ldr	r3, [r3, #28]
 800af18:	68ba      	ldr	r2, [r7, #8]
 800af1a:	4013      	ands	r3, r2
 800af1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	0c1b      	lsrs	r3, r3, #16
}
 800af22:	4618      	mov	r0, r3
 800af24:	3714      	adds	r7, #20
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr

0800af2e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800af2e:	b480      	push	{r7}
 800af30:	b085      	sub	sp, #20
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af40:	699b      	ldr	r3, [r3, #24]
 800af42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af4a:	69db      	ldr	r3, [r3, #28]
 800af4c:	68ba      	ldr	r2, [r7, #8]
 800af4e:	4013      	ands	r3, r2
 800af50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	b29b      	uxth	r3, r3
}
 800af56:	4618      	mov	r0, r3
 800af58:	3714      	adds	r7, #20
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr

0800af62 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800af62:	b480      	push	{r7}
 800af64:	b085      	sub	sp, #20
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
 800af6a:	460b      	mov	r3, r1
 800af6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800af72:	78fb      	ldrb	r3, [r7, #3]
 800af74:	015a      	lsls	r2, r3, #5
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	4413      	add	r3, r2
 800af7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af88:	695b      	ldr	r3, [r3, #20]
 800af8a:	68ba      	ldr	r2, [r7, #8]
 800af8c:	4013      	ands	r3, r2
 800af8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800af90:	68bb      	ldr	r3, [r7, #8]
}
 800af92:	4618      	mov	r0, r3
 800af94:	3714      	adds	r7, #20
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr

0800af9e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800af9e:	b480      	push	{r7}
 800afa0:	b087      	sub	sp, #28
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
 800afa6:	460b      	mov	r3, r1
 800afa8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afb4:	691b      	ldr	r3, [r3, #16]
 800afb6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afc0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800afc2:	78fb      	ldrb	r3, [r7, #3]
 800afc4:	f003 030f 	and.w	r3, r3, #15
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	fa22 f303 	lsr.w	r3, r2, r3
 800afce:	01db      	lsls	r3, r3, #7
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	693a      	ldr	r2, [r7, #16]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800afd8:	78fb      	ldrb	r3, [r7, #3]
 800afda:	015a      	lsls	r2, r3, #5
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	4413      	add	r3, r2
 800afe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	693a      	ldr	r2, [r7, #16]
 800afe8:	4013      	ands	r3, r2
 800afea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800afec:	68bb      	ldr	r3, [r7, #8]
}
 800afee:	4618      	mov	r0, r3
 800aff0:	371c      	adds	r7, #28
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800affa:	b480      	push	{r7}
 800affc:	b083      	sub	sp, #12
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	695b      	ldr	r3, [r3, #20]
 800b006:	f003 0301 	and.w	r3, r3, #1
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	370c      	adds	r7, #12
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
	...

0800b018 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b032:	4619      	mov	r1, r3
 800b034:	4b09      	ldr	r3, [pc, #36]	@ (800b05c <USB_ActivateSetup+0x44>)
 800b036:	4013      	ands	r3, r2
 800b038:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b04c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b04e:	2300      	movs	r3, #0
}
 800b050:	4618      	mov	r0, r3
 800b052:	3714      	adds	r7, #20
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr
 800b05c:	fffff800 	.word	0xfffff800

0800b060 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b060:	b480      	push	{r7}
 800b062:	b087      	sub	sp, #28
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	460b      	mov	r3, r1
 800b06a:	607a      	str	r2, [r7, #4]
 800b06c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	333c      	adds	r3, #60	@ 0x3c
 800b076:	3304      	adds	r3, #4
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	4a26      	ldr	r2, [pc, #152]	@ (800b118 <USB_EP0_OutStart+0xb8>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d90a      	bls.n	800b09a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b090:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b094:	d101      	bne.n	800b09a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b096:	2300      	movs	r3, #0
 800b098:	e037      	b.n	800b10a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	697a      	ldr	r2, [r7, #20]
 800b0b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b0b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	697a      	ldr	r2, [r7, #20]
 800b0c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0c8:	f043 0318 	orr.w	r3, r3, #24
 800b0cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0d4:	691b      	ldr	r3, [r3, #16]
 800b0d6:	697a      	ldr	r2, [r7, #20]
 800b0d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0dc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b0e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b0e2:	7afb      	ldrb	r3, [r7, #11]
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d10f      	bne.n	800b108 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	697a      	ldr	r2, [r7, #20]
 800b0fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b102:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b106:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	371c      	adds	r7, #28
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	4f54300a 	.word	0x4f54300a

0800b11c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b085      	sub	sp, #20
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b124:	2300      	movs	r3, #0
 800b126:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	3301      	adds	r3, #1
 800b12c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b134:	d901      	bls.n	800b13a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b136:	2303      	movs	r3, #3
 800b138:	e01b      	b.n	800b172 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	691b      	ldr	r3, [r3, #16]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	daf2      	bge.n	800b128 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b142:	2300      	movs	r3, #0
 800b144:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	f043 0201 	orr.w	r2, r3, #1
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	3301      	adds	r3, #1
 800b156:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b15e:	d901      	bls.n	800b164 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b160:	2303      	movs	r3, #3
 800b162:	e006      	b.n	800b172 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	691b      	ldr	r3, [r3, #16]
 800b168:	f003 0301 	and.w	r3, r3, #1
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d0f0      	beq.n	800b152 <USB_CoreReset+0x36>

  return HAL_OK;
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	3714      	adds	r7, #20
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr
	...

0800b180 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	460b      	mov	r3, r1
 800b18a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b18c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b190:	f002 fc88 	bl	800daa4 <USBD_static_malloc>
 800b194:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d109      	bne.n	800b1b0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	32b0      	adds	r2, #176	@ 0xb0
 800b1a6:	2100      	movs	r1, #0
 800b1a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b1ac:	2302      	movs	r3, #2
 800b1ae:	e0d4      	b.n	800b35a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b1b0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f002 fcb8 	bl	800db2c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	32b0      	adds	r2, #176	@ 0xb0
 800b1c6:	68f9      	ldr	r1, [r7, #12]
 800b1c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	32b0      	adds	r2, #176	@ 0xb0
 800b1d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	7c1b      	ldrb	r3, [r3, #16]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d138      	bne.n	800b25a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b1e8:	4b5e      	ldr	r3, [pc, #376]	@ (800b364 <USBD_CDC_Init+0x1e4>)
 800b1ea:	7819      	ldrb	r1, [r3, #0]
 800b1ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1f0:	2202      	movs	r2, #2
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f002 fb33 	bl	800d85e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b1f8:	4b5a      	ldr	r3, [pc, #360]	@ (800b364 <USBD_CDC_Init+0x1e4>)
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	f003 020f 	and.w	r2, r3, #15
 800b200:	6879      	ldr	r1, [r7, #4]
 800b202:	4613      	mov	r3, r2
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	4413      	add	r3, r2
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	440b      	add	r3, r1
 800b20c:	3324      	adds	r3, #36	@ 0x24
 800b20e:	2201      	movs	r2, #1
 800b210:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b212:	4b55      	ldr	r3, [pc, #340]	@ (800b368 <USBD_CDC_Init+0x1e8>)
 800b214:	7819      	ldrb	r1, [r3, #0]
 800b216:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b21a:	2202      	movs	r2, #2
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f002 fb1e 	bl	800d85e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b222:	4b51      	ldr	r3, [pc, #324]	@ (800b368 <USBD_CDC_Init+0x1e8>)
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	f003 020f 	and.w	r2, r3, #15
 800b22a:	6879      	ldr	r1, [r7, #4]
 800b22c:	4613      	mov	r3, r2
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	4413      	add	r3, r2
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	440b      	add	r3, r1
 800b236:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b23a:	2201      	movs	r2, #1
 800b23c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b23e:	4b4b      	ldr	r3, [pc, #300]	@ (800b36c <USBD_CDC_Init+0x1ec>)
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	f003 020f 	and.w	r2, r3, #15
 800b246:	6879      	ldr	r1, [r7, #4]
 800b248:	4613      	mov	r3, r2
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	4413      	add	r3, r2
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	440b      	add	r3, r1
 800b252:	3326      	adds	r3, #38	@ 0x26
 800b254:	2210      	movs	r2, #16
 800b256:	801a      	strh	r2, [r3, #0]
 800b258:	e035      	b.n	800b2c6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b25a:	4b42      	ldr	r3, [pc, #264]	@ (800b364 <USBD_CDC_Init+0x1e4>)
 800b25c:	7819      	ldrb	r1, [r3, #0]
 800b25e:	2340      	movs	r3, #64	@ 0x40
 800b260:	2202      	movs	r2, #2
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f002 fafb 	bl	800d85e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b268:	4b3e      	ldr	r3, [pc, #248]	@ (800b364 <USBD_CDC_Init+0x1e4>)
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	f003 020f 	and.w	r2, r3, #15
 800b270:	6879      	ldr	r1, [r7, #4]
 800b272:	4613      	mov	r3, r2
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	4413      	add	r3, r2
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	440b      	add	r3, r1
 800b27c:	3324      	adds	r3, #36	@ 0x24
 800b27e:	2201      	movs	r2, #1
 800b280:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b282:	4b39      	ldr	r3, [pc, #228]	@ (800b368 <USBD_CDC_Init+0x1e8>)
 800b284:	7819      	ldrb	r1, [r3, #0]
 800b286:	2340      	movs	r3, #64	@ 0x40
 800b288:	2202      	movs	r2, #2
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f002 fae7 	bl	800d85e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b290:	4b35      	ldr	r3, [pc, #212]	@ (800b368 <USBD_CDC_Init+0x1e8>)
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	f003 020f 	and.w	r2, r3, #15
 800b298:	6879      	ldr	r1, [r7, #4]
 800b29a:	4613      	mov	r3, r2
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	4413      	add	r3, r2
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	440b      	add	r3, r1
 800b2a4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b2ac:	4b2f      	ldr	r3, [pc, #188]	@ (800b36c <USBD_CDC_Init+0x1ec>)
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	f003 020f 	and.w	r2, r3, #15
 800b2b4:	6879      	ldr	r1, [r7, #4]
 800b2b6:	4613      	mov	r3, r2
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	4413      	add	r3, r2
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	440b      	add	r3, r1
 800b2c0:	3326      	adds	r3, #38	@ 0x26
 800b2c2:	2210      	movs	r2, #16
 800b2c4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b2c6:	4b29      	ldr	r3, [pc, #164]	@ (800b36c <USBD_CDC_Init+0x1ec>)
 800b2c8:	7819      	ldrb	r1, [r3, #0]
 800b2ca:	2308      	movs	r3, #8
 800b2cc:	2203      	movs	r2, #3
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f002 fac5 	bl	800d85e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b2d4:	4b25      	ldr	r3, [pc, #148]	@ (800b36c <USBD_CDC_Init+0x1ec>)
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	f003 020f 	and.w	r2, r3, #15
 800b2dc:	6879      	ldr	r1, [r7, #4]
 800b2de:	4613      	mov	r3, r2
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4413      	add	r3, r2
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	440b      	add	r3, r1
 800b2e8:	3324      	adds	r3, #36	@ 0x24
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	33b0      	adds	r3, #176	@ 0xb0
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	4413      	add	r3, r2
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2200      	movs	r2, #0
 800b316:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b320:	2b00      	cmp	r3, #0
 800b322:	d101      	bne.n	800b328 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b324:	2302      	movs	r3, #2
 800b326:	e018      	b.n	800b35a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	7c1b      	ldrb	r3, [r3, #16]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10a      	bne.n	800b346 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b330:	4b0d      	ldr	r3, [pc, #52]	@ (800b368 <USBD_CDC_Init+0x1e8>)
 800b332:	7819      	ldrb	r1, [r3, #0]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b33a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f002 fb7c 	bl	800da3c <USBD_LL_PrepareReceive>
 800b344:	e008      	b.n	800b358 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b346:	4b08      	ldr	r3, [pc, #32]	@ (800b368 <USBD_CDC_Init+0x1e8>)
 800b348:	7819      	ldrb	r1, [r3, #0]
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b350:	2340      	movs	r3, #64	@ 0x40
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f002 fb72 	bl	800da3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b358:	2300      	movs	r3, #0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3710      	adds	r7, #16
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	24000097 	.word	0x24000097
 800b368:	24000098 	.word	0x24000098
 800b36c:	24000099 	.word	0x24000099

0800b370 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	460b      	mov	r3, r1
 800b37a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b37c:	4b3a      	ldr	r3, [pc, #232]	@ (800b468 <USBD_CDC_DeInit+0xf8>)
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	4619      	mov	r1, r3
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f002 fa91 	bl	800d8aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b388:	4b37      	ldr	r3, [pc, #220]	@ (800b468 <USBD_CDC_DeInit+0xf8>)
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	f003 020f 	and.w	r2, r3, #15
 800b390:	6879      	ldr	r1, [r7, #4]
 800b392:	4613      	mov	r3, r2
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	4413      	add	r3, r2
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	440b      	add	r3, r1
 800b39c:	3324      	adds	r3, #36	@ 0x24
 800b39e:	2200      	movs	r2, #0
 800b3a0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b3a2:	4b32      	ldr	r3, [pc, #200]	@ (800b46c <USBD_CDC_DeInit+0xfc>)
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f002 fa7e 	bl	800d8aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b3ae:	4b2f      	ldr	r3, [pc, #188]	@ (800b46c <USBD_CDC_DeInit+0xfc>)
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	f003 020f 	and.w	r2, r3, #15
 800b3b6:	6879      	ldr	r1, [r7, #4]
 800b3b8:	4613      	mov	r3, r2
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	4413      	add	r3, r2
 800b3be:	009b      	lsls	r3, r3, #2
 800b3c0:	440b      	add	r3, r1
 800b3c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b3ca:	4b29      	ldr	r3, [pc, #164]	@ (800b470 <USBD_CDC_DeInit+0x100>)
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f002 fa6a 	bl	800d8aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b3d6:	4b26      	ldr	r3, [pc, #152]	@ (800b470 <USBD_CDC_DeInit+0x100>)
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	f003 020f 	and.w	r2, r3, #15
 800b3de:	6879      	ldr	r1, [r7, #4]
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	4413      	add	r3, r2
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	440b      	add	r3, r1
 800b3ea:	3324      	adds	r3, #36	@ 0x24
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b3f0:	4b1f      	ldr	r3, [pc, #124]	@ (800b470 <USBD_CDC_DeInit+0x100>)
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	f003 020f 	and.w	r2, r3, #15
 800b3f8:	6879      	ldr	r1, [r7, #4]
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	4413      	add	r3, r2
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	440b      	add	r3, r1
 800b404:	3326      	adds	r3, #38	@ 0x26
 800b406:	2200      	movs	r2, #0
 800b408:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	32b0      	adds	r2, #176	@ 0xb0
 800b414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d01f      	beq.n	800b45c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	33b0      	adds	r3, #176	@ 0xb0
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	4413      	add	r3, r2
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	32b0      	adds	r2, #176	@ 0xb0
 800b43a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b43e:	4618      	mov	r0, r3
 800b440:	f002 fb3e 	bl	800dac0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	32b0      	adds	r2, #176	@ 0xb0
 800b44e:	2100      	movs	r1, #0
 800b450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2200      	movs	r2, #0
 800b458:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	24000097 	.word	0x24000097
 800b46c:	24000098 	.word	0x24000098
 800b470:	24000099 	.word	0x24000099

0800b474 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b086      	sub	sp, #24
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	32b0      	adds	r2, #176	@ 0xb0
 800b488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b48c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b48e:	2300      	movs	r3, #0
 800b490:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b492:	2300      	movs	r3, #0
 800b494:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b496:	2300      	movs	r3, #0
 800b498:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d101      	bne.n	800b4a4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b4a0:	2303      	movs	r3, #3
 800b4a2:	e0bf      	b.n	800b624 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d050      	beq.n	800b552 <USBD_CDC_Setup+0xde>
 800b4b0:	2b20      	cmp	r3, #32
 800b4b2:	f040 80af 	bne.w	800b614 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	88db      	ldrh	r3, [r3, #6]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d03a      	beq.n	800b534 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	b25b      	sxtb	r3, r3
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	da1b      	bge.n	800b500 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	33b0      	adds	r3, #176	@ 0xb0
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	4413      	add	r3, r2
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	689b      	ldr	r3, [r3, #8]
 800b4da:	683a      	ldr	r2, [r7, #0]
 800b4dc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b4de:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b4e0:	683a      	ldr	r2, [r7, #0]
 800b4e2:	88d2      	ldrh	r2, [r2, #6]
 800b4e4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	88db      	ldrh	r3, [r3, #6]
 800b4ea:	2b07      	cmp	r3, #7
 800b4ec:	bf28      	it	cs
 800b4ee:	2307      	movcs	r3, #7
 800b4f0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	89fa      	ldrh	r2, [r7, #14]
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f001 fd7d 	bl	800cff8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b4fe:	e090      	b.n	800b622 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	785a      	ldrb	r2, [r3, #1]
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	88db      	ldrh	r3, [r3, #6]
 800b50e:	2b3f      	cmp	r3, #63	@ 0x3f
 800b510:	d803      	bhi.n	800b51a <USBD_CDC_Setup+0xa6>
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	88db      	ldrh	r3, [r3, #6]
 800b516:	b2da      	uxtb	r2, r3
 800b518:	e000      	b.n	800b51c <USBD_CDC_Setup+0xa8>
 800b51a:	2240      	movs	r2, #64	@ 0x40
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b522:	6939      	ldr	r1, [r7, #16]
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b52a:	461a      	mov	r2, r3
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f001 fd8f 	bl	800d050 <USBD_CtlPrepareRx>
      break;
 800b532:	e076      	b.n	800b622 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	33b0      	adds	r3, #176	@ 0xb0
 800b53e:	009b      	lsls	r3, r3, #2
 800b540:	4413      	add	r3, r2
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	683a      	ldr	r2, [r7, #0]
 800b548:	7850      	ldrb	r0, [r2, #1]
 800b54a:	2200      	movs	r2, #0
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	4798      	blx	r3
      break;
 800b550:	e067      	b.n	800b622 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	785b      	ldrb	r3, [r3, #1]
 800b556:	2b0b      	cmp	r3, #11
 800b558:	d851      	bhi.n	800b5fe <USBD_CDC_Setup+0x18a>
 800b55a:	a201      	add	r2, pc, #4	@ (adr r2, 800b560 <USBD_CDC_Setup+0xec>)
 800b55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b560:	0800b591 	.word	0x0800b591
 800b564:	0800b60d 	.word	0x0800b60d
 800b568:	0800b5ff 	.word	0x0800b5ff
 800b56c:	0800b5ff 	.word	0x0800b5ff
 800b570:	0800b5ff 	.word	0x0800b5ff
 800b574:	0800b5ff 	.word	0x0800b5ff
 800b578:	0800b5ff 	.word	0x0800b5ff
 800b57c:	0800b5ff 	.word	0x0800b5ff
 800b580:	0800b5ff 	.word	0x0800b5ff
 800b584:	0800b5ff 	.word	0x0800b5ff
 800b588:	0800b5bb 	.word	0x0800b5bb
 800b58c:	0800b5e5 	.word	0x0800b5e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b596:	b2db      	uxtb	r3, r3
 800b598:	2b03      	cmp	r3, #3
 800b59a:	d107      	bne.n	800b5ac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b59c:	f107 030a 	add.w	r3, r7, #10
 800b5a0:	2202      	movs	r2, #2
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f001 fd27 	bl	800cff8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b5aa:	e032      	b.n	800b612 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b5ac:	6839      	ldr	r1, [r7, #0]
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f001 fca5 	bl	800cefe <USBD_CtlError>
            ret = USBD_FAIL;
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	75fb      	strb	r3, [r7, #23]
          break;
 800b5b8:	e02b      	b.n	800b612 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	2b03      	cmp	r3, #3
 800b5c4:	d107      	bne.n	800b5d6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b5c6:	f107 030d 	add.w	r3, r7, #13
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f001 fd12 	bl	800cff8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b5d4:	e01d      	b.n	800b612 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b5d6:	6839      	ldr	r1, [r7, #0]
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f001 fc90 	bl	800cefe <USBD_CtlError>
            ret = USBD_FAIL;
 800b5de:	2303      	movs	r3, #3
 800b5e0:	75fb      	strb	r3, [r7, #23]
          break;
 800b5e2:	e016      	b.n	800b612 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	2b03      	cmp	r3, #3
 800b5ee:	d00f      	beq.n	800b610 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b5f0:	6839      	ldr	r1, [r7, #0]
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f001 fc83 	bl	800cefe <USBD_CtlError>
            ret = USBD_FAIL;
 800b5f8:	2303      	movs	r3, #3
 800b5fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b5fc:	e008      	b.n	800b610 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b5fe:	6839      	ldr	r1, [r7, #0]
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f001 fc7c 	bl	800cefe <USBD_CtlError>
          ret = USBD_FAIL;
 800b606:	2303      	movs	r3, #3
 800b608:	75fb      	strb	r3, [r7, #23]
          break;
 800b60a:	e002      	b.n	800b612 <USBD_CDC_Setup+0x19e>
          break;
 800b60c:	bf00      	nop
 800b60e:	e008      	b.n	800b622 <USBD_CDC_Setup+0x1ae>
          break;
 800b610:	bf00      	nop
      }
      break;
 800b612:	e006      	b.n	800b622 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b614:	6839      	ldr	r1, [r7, #0]
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f001 fc71 	bl	800cefe <USBD_CtlError>
      ret = USBD_FAIL;
 800b61c:	2303      	movs	r3, #3
 800b61e:	75fb      	strb	r3, [r7, #23]
      break;
 800b620:	bf00      	nop
  }

  return (uint8_t)ret;
 800b622:	7dfb      	ldrb	r3, [r7, #23]
}
 800b624:	4618      	mov	r0, r3
 800b626:	3718      	adds	r7, #24
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b084      	sub	sp, #16
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	460b      	mov	r3, r1
 800b636:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b63e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	32b0      	adds	r2, #176	@ 0xb0
 800b64a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d101      	bne.n	800b656 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b652:	2303      	movs	r3, #3
 800b654:	e065      	b.n	800b722 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	32b0      	adds	r2, #176	@ 0xb0
 800b660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b664:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b666:	78fb      	ldrb	r3, [r7, #3]
 800b668:	f003 020f 	and.w	r2, r3, #15
 800b66c:	6879      	ldr	r1, [r7, #4]
 800b66e:	4613      	mov	r3, r2
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	4413      	add	r3, r2
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	440b      	add	r3, r1
 800b678:	3318      	adds	r3, #24
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d02f      	beq.n	800b6e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b680:	78fb      	ldrb	r3, [r7, #3]
 800b682:	f003 020f 	and.w	r2, r3, #15
 800b686:	6879      	ldr	r1, [r7, #4]
 800b688:	4613      	mov	r3, r2
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	4413      	add	r3, r2
 800b68e:	009b      	lsls	r3, r3, #2
 800b690:	440b      	add	r3, r1
 800b692:	3318      	adds	r3, #24
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	78fb      	ldrb	r3, [r7, #3]
 800b698:	f003 010f 	and.w	r1, r3, #15
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	460b      	mov	r3, r1
 800b6a0:	00db      	lsls	r3, r3, #3
 800b6a2:	440b      	add	r3, r1
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4403      	add	r3, r0
 800b6a8:	331c      	adds	r3, #28
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	fbb2 f1f3 	udiv	r1, r2, r3
 800b6b0:	fb01 f303 	mul.w	r3, r1, r3
 800b6b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d112      	bne.n	800b6e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b6ba:	78fb      	ldrb	r3, [r7, #3]
 800b6bc:	f003 020f 	and.w	r2, r3, #15
 800b6c0:	6879      	ldr	r1, [r7, #4]
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	009b      	lsls	r3, r3, #2
 800b6c6:	4413      	add	r3, r2
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	440b      	add	r3, r1
 800b6cc:	3318      	adds	r3, #24
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b6d2:	78f9      	ldrb	r1, [r7, #3]
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f002 f98e 	bl	800d9fa <USBD_LL_Transmit>
 800b6de:	e01f      	b.n	800b720 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	33b0      	adds	r3, #176	@ 0xb0
 800b6f2:	009b      	lsls	r3, r3, #2
 800b6f4:	4413      	add	r3, r2
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d010      	beq.n	800b720 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	33b0      	adds	r3, #176	@ 0xb0
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	4413      	add	r3, r2
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	691b      	ldr	r3, [r3, #16]
 800b710:	68ba      	ldr	r2, [r7, #8]
 800b712:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b716:	68ba      	ldr	r2, [r7, #8]
 800b718:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b71c:	78fa      	ldrb	r2, [r7, #3]
 800b71e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b720:	2300      	movs	r3, #0
}
 800b722:	4618      	mov	r0, r3
 800b724:	3710      	adds	r7, #16
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}

0800b72a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b084      	sub	sp, #16
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
 800b732:	460b      	mov	r3, r1
 800b734:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	32b0      	adds	r2, #176	@ 0xb0
 800b740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b744:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	32b0      	adds	r2, #176	@ 0xb0
 800b750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d101      	bne.n	800b75c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b758:	2303      	movs	r3, #3
 800b75a:	e01a      	b.n	800b792 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b75c:	78fb      	ldrb	r3, [r7, #3]
 800b75e:	4619      	mov	r1, r3
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f002 f98c 	bl	800da7e <USBD_LL_GetRxDataSize>
 800b766:	4602      	mov	r2, r0
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	33b0      	adds	r3, #176	@ 0xb0
 800b778:	009b      	lsls	r3, r3, #2
 800b77a:	4413      	add	r3, r2
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	68db      	ldr	r3, [r3, #12]
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b786:	68fa      	ldr	r2, [r7, #12]
 800b788:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b78c:	4611      	mov	r1, r2
 800b78e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b084      	sub	sp, #16
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	32b0      	adds	r2, #176	@ 0xb0
 800b7ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d101      	bne.n	800b7bc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b7b8:	2303      	movs	r3, #3
 800b7ba:	e024      	b.n	800b806 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	33b0      	adds	r3, #176	@ 0xb0
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	4413      	add	r3, r2
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d019      	beq.n	800b804 <USBD_CDC_EP0_RxReady+0x6a>
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b7d6:	2bff      	cmp	r3, #255	@ 0xff
 800b7d8:	d014      	beq.n	800b804 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	33b0      	adds	r3, #176	@ 0xb0
 800b7e4:	009b      	lsls	r3, r3, #2
 800b7e6:	4413      	add	r3, r2
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b7f2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b7fa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	22ff      	movs	r2, #255	@ 0xff
 800b800:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b804:	2300      	movs	r3, #0
}
 800b806:	4618      	mov	r0, r3
 800b808:	3710      	adds	r7, #16
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
	...

0800b810 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b086      	sub	sp, #24
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b818:	2182      	movs	r1, #130	@ 0x82
 800b81a:	4818      	ldr	r0, [pc, #96]	@ (800b87c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b81c:	f000 fd0f 	bl	800c23e <USBD_GetEpDesc>
 800b820:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b822:	2101      	movs	r1, #1
 800b824:	4815      	ldr	r0, [pc, #84]	@ (800b87c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b826:	f000 fd0a 	bl	800c23e <USBD_GetEpDesc>
 800b82a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b82c:	2181      	movs	r1, #129	@ 0x81
 800b82e:	4813      	ldr	r0, [pc, #76]	@ (800b87c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b830:	f000 fd05 	bl	800c23e <USBD_GetEpDesc>
 800b834:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d002      	beq.n	800b842 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	2210      	movs	r2, #16
 800b840:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d006      	beq.n	800b856 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	2200      	movs	r2, #0
 800b84c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b850:	711a      	strb	r2, [r3, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d006      	beq.n	800b86a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2200      	movs	r2, #0
 800b860:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b864:	711a      	strb	r2, [r3, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2243      	movs	r2, #67	@ 0x43
 800b86e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b870:	4b02      	ldr	r3, [pc, #8]	@ (800b87c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b872:	4618      	mov	r0, r3
 800b874:	3718      	adds	r7, #24
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	24000054 	.word	0x24000054

0800b880 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b086      	sub	sp, #24
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b888:	2182      	movs	r1, #130	@ 0x82
 800b88a:	4818      	ldr	r0, [pc, #96]	@ (800b8ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b88c:	f000 fcd7 	bl	800c23e <USBD_GetEpDesc>
 800b890:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b892:	2101      	movs	r1, #1
 800b894:	4815      	ldr	r0, [pc, #84]	@ (800b8ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b896:	f000 fcd2 	bl	800c23e <USBD_GetEpDesc>
 800b89a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b89c:	2181      	movs	r1, #129	@ 0x81
 800b89e:	4813      	ldr	r0, [pc, #76]	@ (800b8ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b8a0:	f000 fccd 	bl	800c23e <USBD_GetEpDesc>
 800b8a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d002      	beq.n	800b8b2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	2210      	movs	r2, #16
 800b8b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d006      	beq.n	800b8c6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	711a      	strb	r2, [r3, #4]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	f042 0202 	orr.w	r2, r2, #2
 800b8c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d006      	beq.n	800b8da <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	711a      	strb	r2, [r3, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f042 0202 	orr.w	r2, r2, #2
 800b8d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2243      	movs	r2, #67	@ 0x43
 800b8de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b8e0:	4b02      	ldr	r3, [pc, #8]	@ (800b8ec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3718      	adds	r7, #24
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	24000054 	.word	0x24000054

0800b8f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b086      	sub	sp, #24
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b8f8:	2182      	movs	r1, #130	@ 0x82
 800b8fa:	4818      	ldr	r0, [pc, #96]	@ (800b95c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b8fc:	f000 fc9f 	bl	800c23e <USBD_GetEpDesc>
 800b900:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b902:	2101      	movs	r1, #1
 800b904:	4815      	ldr	r0, [pc, #84]	@ (800b95c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b906:	f000 fc9a 	bl	800c23e <USBD_GetEpDesc>
 800b90a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b90c:	2181      	movs	r1, #129	@ 0x81
 800b90e:	4813      	ldr	r0, [pc, #76]	@ (800b95c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b910:	f000 fc95 	bl	800c23e <USBD_GetEpDesc>
 800b914:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d002      	beq.n	800b922 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	2210      	movs	r2, #16
 800b920:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d006      	beq.n	800b936 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	2200      	movs	r2, #0
 800b92c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b930:	711a      	strb	r2, [r3, #4]
 800b932:	2200      	movs	r2, #0
 800b934:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d006      	beq.n	800b94a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2200      	movs	r2, #0
 800b940:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b944:	711a      	strb	r2, [r3, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2243      	movs	r2, #67	@ 0x43
 800b94e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b950:	4b02      	ldr	r3, [pc, #8]	@ (800b95c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b952:	4618      	mov	r0, r3
 800b954:	3718      	adds	r7, #24
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	24000054 	.word	0x24000054

0800b960 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	220a      	movs	r2, #10
 800b96c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b96e:	4b03      	ldr	r3, [pc, #12]	@ (800b97c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b970:	4618      	mov	r0, r3
 800b972:	370c      	adds	r7, #12
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr
 800b97c:	24000010 	.word	0x24000010

0800b980 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b980:	b480      	push	{r7}
 800b982:	b083      	sub	sp, #12
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d101      	bne.n	800b994 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b990:	2303      	movs	r3, #3
 800b992:	e009      	b.n	800b9a8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b99a:	687a      	ldr	r2, [r7, #4]
 800b99c:	33b0      	adds	r3, #176	@ 0xb0
 800b99e:	009b      	lsls	r3, r3, #2
 800b9a0:	4413      	add	r3, r2
 800b9a2:	683a      	ldr	r2, [r7, #0]
 800b9a4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b9a6:	2300      	movs	r3, #0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	370c      	adds	r7, #12
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b087      	sub	sp, #28
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	32b0      	adds	r2, #176	@ 0xb0
 800b9ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9ce:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d101      	bne.n	800b9da <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b9d6:	2303      	movs	r3, #3
 800b9d8:	e008      	b.n	800b9ec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	68ba      	ldr	r2, [r7, #8]
 800b9de:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	371c      	adds	r7, #28
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	32b0      	adds	r2, #176	@ 0xb0
 800ba0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d101      	bne.n	800ba1c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ba18:	2303      	movs	r3, #3
 800ba1a:	e004      	b.n	800ba26 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	683a      	ldr	r2, [r7, #0]
 800ba20:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ba24:	2300      	movs	r3, #0
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3714      	adds	r7, #20
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr
	...

0800ba34 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	32b0      	adds	r2, #176	@ 0xb0
 800ba46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba4a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	32b0      	adds	r2, #176	@ 0xb0
 800ba56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d101      	bne.n	800ba62 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ba5e:	2303      	movs	r3, #3
 800ba60:	e018      	b.n	800ba94 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	7c1b      	ldrb	r3, [r3, #16]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d10a      	bne.n	800ba80 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ba6a:	4b0c      	ldr	r3, [pc, #48]	@ (800ba9c <USBD_CDC_ReceivePacket+0x68>)
 800ba6c:	7819      	ldrb	r1, [r3, #0]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ba74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f001 ffdf 	bl	800da3c <USBD_LL_PrepareReceive>
 800ba7e:	e008      	b.n	800ba92 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ba80:	4b06      	ldr	r3, [pc, #24]	@ (800ba9c <USBD_CDC_ReceivePacket+0x68>)
 800ba82:	7819      	ldrb	r1, [r3, #0]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ba8a:	2340      	movs	r3, #64	@ 0x40
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f001 ffd5 	bl	800da3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ba92:	2300      	movs	r3, #0
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3710      	adds	r7, #16
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}
 800ba9c:	24000098 	.word	0x24000098

0800baa0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b086      	sub	sp, #24
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	60f8      	str	r0, [r7, #12]
 800baa8:	60b9      	str	r1, [r7, #8]
 800baaa:	4613      	mov	r3, r2
 800baac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d101      	bne.n	800bab8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bab4:	2303      	movs	r3, #3
 800bab6:	e01f      	b.n	800baf8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2200      	movs	r2, #0
 800babc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2200      	movs	r2, #0
 800bac4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2200      	movs	r2, #0
 800bacc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d003      	beq.n	800bade <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	68ba      	ldr	r2, [r7, #8]
 800bada:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2201      	movs	r2, #1
 800bae2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	79fa      	ldrb	r2, [r7, #7]
 800baea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800baec:	68f8      	ldr	r0, [r7, #12]
 800baee:	f001 fe4b 	bl	800d788 <USBD_LL_Init>
 800baf2:	4603      	mov	r3, r0
 800baf4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800baf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3718      	adds	r7, #24
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d101      	bne.n	800bb18 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bb14:	2303      	movs	r3, #3
 800bb16:	e025      	b.n	800bb64 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	683a      	ldr	r2, [r7, #0]
 800bb1c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	32ae      	adds	r2, #174	@ 0xae
 800bb2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d00f      	beq.n	800bb54 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	32ae      	adds	r2, #174	@ 0xae
 800bb3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb44:	f107 020e 	add.w	r2, r7, #14
 800bb48:	4610      	mov	r0, r2
 800bb4a:	4798      	blx	r3
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bb5a:	1c5a      	adds	r2, r3, #1
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800bb62:	2300      	movs	r3, #0
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3710      	adds	r7, #16
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f001 fe57 	bl	800d828 <USBD_LL_Start>
 800bb7a:	4603      	mov	r3, r0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3708      	adds	r7, #8
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bb8c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	370c      	adds	r7, #12
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr

0800bb9a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b084      	sub	sp, #16
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
 800bba2:	460b      	mov	r3, r1
 800bba4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bba6:	2300      	movs	r3, #0
 800bba8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d009      	beq.n	800bbc8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	78fa      	ldrb	r2, [r7, #3]
 800bbbe:	4611      	mov	r1, r2
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	4798      	blx	r3
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bbc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3710      	adds	r7, #16
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b084      	sub	sp, #16
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
 800bbda:	460b      	mov	r3, r1
 800bbdc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	78fa      	ldrb	r2, [r7, #3]
 800bbec:	4611      	mov	r1, r2
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	4798      	blx	r3
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d001      	beq.n	800bbfc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bbf8:	2303      	movs	r3, #3
 800bbfa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bbfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3710      	adds	r7, #16
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bc06:	b580      	push	{r7, lr}
 800bc08:	b084      	sub	sp, #16
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
 800bc0e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bc16:	6839      	ldr	r1, [r7, #0]
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f001 f936 	bl	800ce8a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2201      	movs	r2, #1
 800bc22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bc3a:	f003 031f 	and.w	r3, r3, #31
 800bc3e:	2b02      	cmp	r3, #2
 800bc40:	d01a      	beq.n	800bc78 <USBD_LL_SetupStage+0x72>
 800bc42:	2b02      	cmp	r3, #2
 800bc44:	d822      	bhi.n	800bc8c <USBD_LL_SetupStage+0x86>
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d002      	beq.n	800bc50 <USBD_LL_SetupStage+0x4a>
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	d00a      	beq.n	800bc64 <USBD_LL_SetupStage+0x5e>
 800bc4e:	e01d      	b.n	800bc8c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bc56:	4619      	mov	r1, r3
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 fb63 	bl	800c324 <USBD_StdDevReq>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	73fb      	strb	r3, [r7, #15]
      break;
 800bc62:	e020      	b.n	800bca6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f000 fbcb 	bl	800c408 <USBD_StdItfReq>
 800bc72:	4603      	mov	r3, r0
 800bc74:	73fb      	strb	r3, [r7, #15]
      break;
 800bc76:	e016      	b.n	800bca6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bc7e:	4619      	mov	r1, r3
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 fc2d 	bl	800c4e0 <USBD_StdEPReq>
 800bc86:	4603      	mov	r3, r0
 800bc88:	73fb      	strb	r3, [r7, #15]
      break;
 800bc8a:	e00c      	b.n	800bca6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bc92:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	4619      	mov	r1, r3
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f001 fe24 	bl	800d8e8 <USBD_LL_StallEP>
 800bca0:	4603      	mov	r3, r0
 800bca2:	73fb      	strb	r3, [r7, #15]
      break;
 800bca4:	bf00      	nop
  }

  return ret;
 800bca6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3710      	adds	r7, #16
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b086      	sub	sp, #24
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	460b      	mov	r3, r1
 800bcba:	607a      	str	r2, [r7, #4]
 800bcbc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bcc2:	7afb      	ldrb	r3, [r7, #11]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d16e      	bne.n	800bda6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bcce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bcd6:	2b03      	cmp	r3, #3
 800bcd8:	f040 8098 	bne.w	800be0c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	689a      	ldr	r2, [r3, #8]
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	68db      	ldr	r3, [r3, #12]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d913      	bls.n	800bd10 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	689a      	ldr	r2, [r3, #8]
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	1ad2      	subs	r2, r2, r3
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	68da      	ldr	r2, [r3, #12]
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	bf28      	it	cs
 800bd02:	4613      	movcs	r3, r2
 800bd04:	461a      	mov	r2, r3
 800bd06:	6879      	ldr	r1, [r7, #4]
 800bd08:	68f8      	ldr	r0, [r7, #12]
 800bd0a:	f001 f9be 	bl	800d08a <USBD_CtlContinueRx>
 800bd0e:	e07d      	b.n	800be0c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bd16:	f003 031f 	and.w	r3, r3, #31
 800bd1a:	2b02      	cmp	r3, #2
 800bd1c:	d014      	beq.n	800bd48 <USBD_LL_DataOutStage+0x98>
 800bd1e:	2b02      	cmp	r3, #2
 800bd20:	d81d      	bhi.n	800bd5e <USBD_LL_DataOutStage+0xae>
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d002      	beq.n	800bd2c <USBD_LL_DataOutStage+0x7c>
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d003      	beq.n	800bd32 <USBD_LL_DataOutStage+0x82>
 800bd2a:	e018      	b.n	800bd5e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	75bb      	strb	r3, [r7, #22]
            break;
 800bd30:	e018      	b.n	800bd64 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	68f8      	ldr	r0, [r7, #12]
 800bd3e:	f000 fa64 	bl	800c20a <USBD_CoreFindIF>
 800bd42:	4603      	mov	r3, r0
 800bd44:	75bb      	strb	r3, [r7, #22]
            break;
 800bd46:	e00d      	b.n	800bd64 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	4619      	mov	r1, r3
 800bd52:	68f8      	ldr	r0, [r7, #12]
 800bd54:	f000 fa66 	bl	800c224 <USBD_CoreFindEP>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	75bb      	strb	r3, [r7, #22]
            break;
 800bd5c:	e002      	b.n	800bd64 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	75bb      	strb	r3, [r7, #22]
            break;
 800bd62:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bd64:	7dbb      	ldrb	r3, [r7, #22]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d119      	bne.n	800bd9e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd70:	b2db      	uxtb	r3, r3
 800bd72:	2b03      	cmp	r3, #3
 800bd74:	d113      	bne.n	800bd9e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bd76:	7dba      	ldrb	r2, [r7, #22]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	32ae      	adds	r2, #174	@ 0xae
 800bd7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd80:	691b      	ldr	r3, [r3, #16]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d00b      	beq.n	800bd9e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bd86:	7dba      	ldrb	r2, [r7, #22]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bd8e:	7dba      	ldrb	r2, [r7, #22]
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	32ae      	adds	r2, #174	@ 0xae
 800bd94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd98:	691b      	ldr	r3, [r3, #16]
 800bd9a:	68f8      	ldr	r0, [r7, #12]
 800bd9c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bd9e:	68f8      	ldr	r0, [r7, #12]
 800bda0:	f001 f984 	bl	800d0ac <USBD_CtlSendStatus>
 800bda4:	e032      	b.n	800be0c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bda6:	7afb      	ldrb	r3, [r7, #11]
 800bda8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	4619      	mov	r1, r3
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	f000 fa37 	bl	800c224 <USBD_CoreFindEP>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bdba:	7dbb      	ldrb	r3, [r7, #22]
 800bdbc:	2bff      	cmp	r3, #255	@ 0xff
 800bdbe:	d025      	beq.n	800be0c <USBD_LL_DataOutStage+0x15c>
 800bdc0:	7dbb      	ldrb	r3, [r7, #22]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d122      	bne.n	800be0c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	2b03      	cmp	r3, #3
 800bdd0:	d117      	bne.n	800be02 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bdd2:	7dba      	ldrb	r2, [r7, #22]
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	32ae      	adds	r2, #174	@ 0xae
 800bdd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bddc:	699b      	ldr	r3, [r3, #24]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d00f      	beq.n	800be02 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bde2:	7dba      	ldrb	r2, [r7, #22]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bdea:	7dba      	ldrb	r2, [r7, #22]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	32ae      	adds	r2, #174	@ 0xae
 800bdf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdf4:	699b      	ldr	r3, [r3, #24]
 800bdf6:	7afa      	ldrb	r2, [r7, #11]
 800bdf8:	4611      	mov	r1, r2
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	4798      	blx	r3
 800bdfe:	4603      	mov	r3, r0
 800be00:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800be02:	7dfb      	ldrb	r3, [r7, #23]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d001      	beq.n	800be0c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800be08:	7dfb      	ldrb	r3, [r7, #23]
 800be0a:	e000      	b.n	800be0e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800be0c:	2300      	movs	r3, #0
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3718      	adds	r7, #24
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}

0800be16 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800be16:	b580      	push	{r7, lr}
 800be18:	b086      	sub	sp, #24
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	60f8      	str	r0, [r7, #12]
 800be1e:	460b      	mov	r3, r1
 800be20:	607a      	str	r2, [r7, #4]
 800be22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800be24:	7afb      	ldrb	r3, [r7, #11]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d16f      	bne.n	800bf0a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	3314      	adds	r3, #20
 800be2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800be36:	2b02      	cmp	r3, #2
 800be38:	d15a      	bne.n	800bef0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	689a      	ldr	r2, [r3, #8]
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	429a      	cmp	r2, r3
 800be44:	d914      	bls.n	800be70 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	689a      	ldr	r2, [r3, #8]
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	68db      	ldr	r3, [r3, #12]
 800be4e:	1ad2      	subs	r2, r2, r3
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	461a      	mov	r2, r3
 800be5a:	6879      	ldr	r1, [r7, #4]
 800be5c:	68f8      	ldr	r0, [r7, #12]
 800be5e:	f001 f8e6 	bl	800d02e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be62:	2300      	movs	r3, #0
 800be64:	2200      	movs	r2, #0
 800be66:	2100      	movs	r1, #0
 800be68:	68f8      	ldr	r0, [r7, #12]
 800be6a:	f001 fde7 	bl	800da3c <USBD_LL_PrepareReceive>
 800be6e:	e03f      	b.n	800bef0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	68da      	ldr	r2, [r3, #12]
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	689b      	ldr	r3, [r3, #8]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d11c      	bne.n	800beb6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	685a      	ldr	r2, [r3, #4]
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800be84:	429a      	cmp	r2, r3
 800be86:	d316      	bcc.n	800beb6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	685a      	ldr	r2, [r3, #4]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800be92:	429a      	cmp	r2, r3
 800be94:	d20f      	bcs.n	800beb6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800be96:	2200      	movs	r2, #0
 800be98:	2100      	movs	r1, #0
 800be9a:	68f8      	ldr	r0, [r7, #12]
 800be9c:	f001 f8c7 	bl	800d02e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2200      	movs	r2, #0
 800bea4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bea8:	2300      	movs	r3, #0
 800beaa:	2200      	movs	r2, #0
 800beac:	2100      	movs	r1, #0
 800beae:	68f8      	ldr	r0, [r7, #12]
 800beb0:	f001 fdc4 	bl	800da3c <USBD_LL_PrepareReceive>
 800beb4:	e01c      	b.n	800bef0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	2b03      	cmp	r3, #3
 800bec0:	d10f      	bne.n	800bee2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bec8:	68db      	ldr	r3, [r3, #12]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d009      	beq.n	800bee2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2200      	movs	r2, #0
 800bed2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bedc:	68db      	ldr	r3, [r3, #12]
 800bede:	68f8      	ldr	r0, [r7, #12]
 800bee0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bee2:	2180      	movs	r1, #128	@ 0x80
 800bee4:	68f8      	ldr	r0, [r7, #12]
 800bee6:	f001 fcff 	bl	800d8e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800beea:	68f8      	ldr	r0, [r7, #12]
 800beec:	f001 f8f1 	bl	800d0d2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d03a      	beq.n	800bf70 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800befa:	68f8      	ldr	r0, [r7, #12]
 800befc:	f7ff fe42 	bl	800bb84 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2200      	movs	r2, #0
 800bf04:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bf08:	e032      	b.n	800bf70 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bf0a:	7afb      	ldrb	r3, [r7, #11]
 800bf0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	4619      	mov	r1, r3
 800bf14:	68f8      	ldr	r0, [r7, #12]
 800bf16:	f000 f985 	bl	800c224 <USBD_CoreFindEP>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf1e:	7dfb      	ldrb	r3, [r7, #23]
 800bf20:	2bff      	cmp	r3, #255	@ 0xff
 800bf22:	d025      	beq.n	800bf70 <USBD_LL_DataInStage+0x15a>
 800bf24:	7dfb      	ldrb	r3, [r7, #23]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d122      	bne.n	800bf70 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	2b03      	cmp	r3, #3
 800bf34:	d11c      	bne.n	800bf70 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bf36:	7dfa      	ldrb	r2, [r7, #23]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	32ae      	adds	r2, #174	@ 0xae
 800bf3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf40:	695b      	ldr	r3, [r3, #20]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d014      	beq.n	800bf70 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bf46:	7dfa      	ldrb	r2, [r7, #23]
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bf4e:	7dfa      	ldrb	r2, [r7, #23]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	32ae      	adds	r2, #174	@ 0xae
 800bf54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf58:	695b      	ldr	r3, [r3, #20]
 800bf5a:	7afa      	ldrb	r2, [r7, #11]
 800bf5c:	4611      	mov	r1, r2
 800bf5e:	68f8      	ldr	r0, [r7, #12]
 800bf60:	4798      	blx	r3
 800bf62:	4603      	mov	r3, r0
 800bf64:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bf66:	7dbb      	ldrb	r3, [r7, #22]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d001      	beq.n	800bf70 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bf6c:	7dbb      	ldrb	r3, [r7, #22]
 800bf6e:	e000      	b.n	800bf72 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3718      	adds	r7, #24
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b084      	sub	sp, #16
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf82:	2300      	movs	r3, #0
 800bf84:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2201      	movs	r2, #1
 800bf8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2200      	movs	r2, #0
 800bf92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d014      	beq.n	800bfe0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00e      	beq.n	800bfe0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	6852      	ldr	r2, [r2, #4]
 800bfce:	b2d2      	uxtb	r2, r2
 800bfd0:	4611      	mov	r1, r2
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	4798      	blx	r3
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d001      	beq.n	800bfe0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bfdc:	2303      	movs	r3, #3
 800bfde:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bfe0:	2340      	movs	r3, #64	@ 0x40
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f001 fc39 	bl	800d85e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2201      	movs	r2, #1
 800bff0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2240      	movs	r2, #64	@ 0x40
 800bff8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bffc:	2340      	movs	r3, #64	@ 0x40
 800bffe:	2200      	movs	r2, #0
 800c000:	2180      	movs	r1, #128	@ 0x80
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f001 fc2b 	bl	800d85e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2201      	movs	r2, #1
 800c00c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2240      	movs	r2, #64	@ 0x40
 800c012:	621a      	str	r2, [r3, #32]

  return ret;
 800c014:	7bfb      	ldrb	r3, [r7, #15]
}
 800c016:	4618      	mov	r0, r3
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c01e:	b480      	push	{r7}
 800c020:	b083      	sub	sp, #12
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
 800c026:	460b      	mov	r3, r1
 800c028:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	78fa      	ldrb	r2, [r7, #3]
 800c02e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c030:	2300      	movs	r3, #0
}
 800c032:	4618      	mov	r0, r3
 800c034:	370c      	adds	r7, #12
 800c036:	46bd      	mov	sp, r7
 800c038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03c:	4770      	bx	lr

0800c03e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c03e:	b480      	push	{r7}
 800c040:	b083      	sub	sp, #12
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	2b04      	cmp	r3, #4
 800c050:	d006      	beq.n	800c060 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c058:	b2da      	uxtb	r2, r3
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2204      	movs	r2, #4
 800c064:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	370c      	adds	r7, #12
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr

0800c076 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c076:	b480      	push	{r7}
 800c078:	b083      	sub	sp, #12
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c084:	b2db      	uxtb	r3, r3
 800c086:	2b04      	cmp	r3, #4
 800c088:	d106      	bne.n	800c098 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c090:	b2da      	uxtb	r2, r3
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c098:	2300      	movs	r3, #0
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	370c      	adds	r7, #12
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr

0800c0a6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c0a6:	b580      	push	{r7, lr}
 800c0a8:	b082      	sub	sp, #8
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0b4:	b2db      	uxtb	r3, r3
 800c0b6:	2b03      	cmp	r3, #3
 800c0b8:	d110      	bne.n	800c0dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d00b      	beq.n	800c0dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0ca:	69db      	ldr	r3, [r3, #28]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d005      	beq.n	800c0dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0d6:	69db      	ldr	r3, [r3, #28]
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}

0800c0e6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	b082      	sub	sp, #8
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	32ae      	adds	r2, #174	@ 0xae
 800c0fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d101      	bne.n	800c108 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c104:	2303      	movs	r3, #3
 800c106:	e01c      	b.n	800c142 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	2b03      	cmp	r3, #3
 800c112:	d115      	bne.n	800c140 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	32ae      	adds	r2, #174	@ 0xae
 800c11e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c122:	6a1b      	ldr	r3, [r3, #32]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d00b      	beq.n	800c140 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	32ae      	adds	r2, #174	@ 0xae
 800c132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c136:	6a1b      	ldr	r3, [r3, #32]
 800c138:	78fa      	ldrb	r2, [r7, #3]
 800c13a:	4611      	mov	r1, r2
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c140:	2300      	movs	r3, #0
}
 800c142:	4618      	mov	r0, r3
 800c144:	3708      	adds	r7, #8
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}

0800c14a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c14a:	b580      	push	{r7, lr}
 800c14c:	b082      	sub	sp, #8
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
 800c152:	460b      	mov	r3, r1
 800c154:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	32ae      	adds	r2, #174	@ 0xae
 800c160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d101      	bne.n	800c16c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c168:	2303      	movs	r3, #3
 800c16a:	e01c      	b.n	800c1a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c172:	b2db      	uxtb	r3, r3
 800c174:	2b03      	cmp	r3, #3
 800c176:	d115      	bne.n	800c1a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	32ae      	adds	r2, #174	@ 0xae
 800c182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d00b      	beq.n	800c1a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	32ae      	adds	r2, #174	@ 0xae
 800c196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c19a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c19c:	78fa      	ldrb	r2, [r7, #3]
 800c19e:	4611      	mov	r1, r2
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c1a4:	2300      	movs	r3, #0
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3708      	adds	r7, #8
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c1ae:	b480      	push	{r7}
 800c1b0:	b083      	sub	sp, #12
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c1b6:	2300      	movs	r3, #0
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	370c      	adds	r7, #12
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d00e      	beq.n	800c200 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	6852      	ldr	r2, [r2, #4]
 800c1ee:	b2d2      	uxtb	r2, r2
 800c1f0:	4611      	mov	r1, r2
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	4798      	blx	r3
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d001      	beq.n	800c200 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c1fc:	2303      	movs	r3, #3
 800c1fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c200:	7bfb      	ldrb	r3, [r7, #15]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c20a:	b480      	push	{r7}
 800c20c:	b083      	sub	sp, #12
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
 800c212:	460b      	mov	r3, r1
 800c214:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c216:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c218:	4618      	mov	r0, r3
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	460b      	mov	r3, r1
 800c22e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c230:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c232:	4618      	mov	r0, r3
 800c234:	370c      	adds	r7, #12
 800c236:	46bd      	mov	sp, r7
 800c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23c:	4770      	bx	lr

0800c23e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c23e:	b580      	push	{r7, lr}
 800c240:	b086      	sub	sp, #24
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
 800c246:	460b      	mov	r3, r1
 800c248:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c252:	2300      	movs	r3, #0
 800c254:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	885b      	ldrh	r3, [r3, #2]
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	7812      	ldrb	r2, [r2, #0]
 800c260:	4293      	cmp	r3, r2
 800c262:	d91f      	bls.n	800c2a4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c26a:	e013      	b.n	800c294 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c26c:	f107 030a 	add.w	r3, r7, #10
 800c270:	4619      	mov	r1, r3
 800c272:	6978      	ldr	r0, [r7, #20]
 800c274:	f000 f81b 	bl	800c2ae <USBD_GetNextDesc>
 800c278:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	785b      	ldrb	r3, [r3, #1]
 800c27e:	2b05      	cmp	r3, #5
 800c280:	d108      	bne.n	800c294 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	789b      	ldrb	r3, [r3, #2]
 800c28a:	78fa      	ldrb	r2, [r7, #3]
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d008      	beq.n	800c2a2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c290:	2300      	movs	r3, #0
 800c292:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	885b      	ldrh	r3, [r3, #2]
 800c298:	b29a      	uxth	r2, r3
 800c29a:	897b      	ldrh	r3, [r7, #10]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d8e5      	bhi.n	800c26c <USBD_GetEpDesc+0x2e>
 800c2a0:	e000      	b.n	800c2a4 <USBD_GetEpDesc+0x66>
          break;
 800c2a2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c2a4:	693b      	ldr	r3, [r7, #16]
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3718      	adds	r7, #24
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}

0800c2ae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c2ae:	b480      	push	{r7}
 800c2b0:	b085      	sub	sp, #20
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
 800c2b6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	881b      	ldrh	r3, [r3, #0]
 800c2c0:	68fa      	ldr	r2, [r7, #12]
 800c2c2:	7812      	ldrb	r2, [r2, #0]
 800c2c4:	4413      	add	r3, r2
 800c2c6:	b29a      	uxth	r2, r3
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3714      	adds	r7, #20
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e4:	4770      	bx	lr

0800c2e6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c2e6:	b480      	push	{r7}
 800c2e8:	b087      	sub	sp, #28
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c304:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c308:	021b      	lsls	r3, r3, #8
 800c30a:	b21a      	sxth	r2, r3
 800c30c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c310:	4313      	orrs	r3, r2
 800c312:	b21b      	sxth	r3, r3
 800c314:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c316:	89fb      	ldrh	r3, [r7, #14]
}
 800c318:	4618      	mov	r0, r3
 800c31a:	371c      	adds	r7, #28
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr

0800c324 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c32e:	2300      	movs	r3, #0
 800c330:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c33a:	2b40      	cmp	r3, #64	@ 0x40
 800c33c:	d005      	beq.n	800c34a <USBD_StdDevReq+0x26>
 800c33e:	2b40      	cmp	r3, #64	@ 0x40
 800c340:	d857      	bhi.n	800c3f2 <USBD_StdDevReq+0xce>
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00f      	beq.n	800c366 <USBD_StdDevReq+0x42>
 800c346:	2b20      	cmp	r3, #32
 800c348:	d153      	bne.n	800c3f2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	32ae      	adds	r2, #174	@ 0xae
 800c354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c358:	689b      	ldr	r3, [r3, #8]
 800c35a:	6839      	ldr	r1, [r7, #0]
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	4798      	blx	r3
 800c360:	4603      	mov	r3, r0
 800c362:	73fb      	strb	r3, [r7, #15]
      break;
 800c364:	e04a      	b.n	800c3fc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	785b      	ldrb	r3, [r3, #1]
 800c36a:	2b09      	cmp	r3, #9
 800c36c:	d83b      	bhi.n	800c3e6 <USBD_StdDevReq+0xc2>
 800c36e:	a201      	add	r2, pc, #4	@ (adr r2, 800c374 <USBD_StdDevReq+0x50>)
 800c370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c374:	0800c3c9 	.word	0x0800c3c9
 800c378:	0800c3dd 	.word	0x0800c3dd
 800c37c:	0800c3e7 	.word	0x0800c3e7
 800c380:	0800c3d3 	.word	0x0800c3d3
 800c384:	0800c3e7 	.word	0x0800c3e7
 800c388:	0800c3a7 	.word	0x0800c3a7
 800c38c:	0800c39d 	.word	0x0800c39d
 800c390:	0800c3e7 	.word	0x0800c3e7
 800c394:	0800c3bf 	.word	0x0800c3bf
 800c398:	0800c3b1 	.word	0x0800c3b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c39c:	6839      	ldr	r1, [r7, #0]
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 fa3c 	bl	800c81c <USBD_GetDescriptor>
          break;
 800c3a4:	e024      	b.n	800c3f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c3a6:	6839      	ldr	r1, [r7, #0]
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f000 fbcb 	bl	800cb44 <USBD_SetAddress>
          break;
 800c3ae:	e01f      	b.n	800c3f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c3b0:	6839      	ldr	r1, [r7, #0]
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 fc0a 	bl	800cbcc <USBD_SetConfig>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	73fb      	strb	r3, [r7, #15]
          break;
 800c3bc:	e018      	b.n	800c3f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c3be:	6839      	ldr	r1, [r7, #0]
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f000 fcad 	bl	800cd20 <USBD_GetConfig>
          break;
 800c3c6:	e013      	b.n	800c3f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c3c8:	6839      	ldr	r1, [r7, #0]
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 fcde 	bl	800cd8c <USBD_GetStatus>
          break;
 800c3d0:	e00e      	b.n	800c3f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c3d2:	6839      	ldr	r1, [r7, #0]
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f000 fd0d 	bl	800cdf4 <USBD_SetFeature>
          break;
 800c3da:	e009      	b.n	800c3f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c3dc:	6839      	ldr	r1, [r7, #0]
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 fd31 	bl	800ce46 <USBD_ClrFeature>
          break;
 800c3e4:	e004      	b.n	800c3f0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c3e6:	6839      	ldr	r1, [r7, #0]
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 fd88 	bl	800cefe <USBD_CtlError>
          break;
 800c3ee:	bf00      	nop
      }
      break;
 800c3f0:	e004      	b.n	800c3fc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c3f2:	6839      	ldr	r1, [r7, #0]
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f000 fd82 	bl	800cefe <USBD_CtlError>
      break;
 800c3fa:	bf00      	nop
  }

  return ret;
 800c3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3710      	adds	r7, #16
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop

0800c408 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c412:	2300      	movs	r3, #0
 800c414:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c41e:	2b40      	cmp	r3, #64	@ 0x40
 800c420:	d005      	beq.n	800c42e <USBD_StdItfReq+0x26>
 800c422:	2b40      	cmp	r3, #64	@ 0x40
 800c424:	d852      	bhi.n	800c4cc <USBD_StdItfReq+0xc4>
 800c426:	2b00      	cmp	r3, #0
 800c428:	d001      	beq.n	800c42e <USBD_StdItfReq+0x26>
 800c42a:	2b20      	cmp	r3, #32
 800c42c:	d14e      	bne.n	800c4cc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c434:	b2db      	uxtb	r3, r3
 800c436:	3b01      	subs	r3, #1
 800c438:	2b02      	cmp	r3, #2
 800c43a:	d840      	bhi.n	800c4be <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	889b      	ldrh	r3, [r3, #4]
 800c440:	b2db      	uxtb	r3, r3
 800c442:	2b01      	cmp	r3, #1
 800c444:	d836      	bhi.n	800c4b4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	889b      	ldrh	r3, [r3, #4]
 800c44a:	b2db      	uxtb	r3, r3
 800c44c:	4619      	mov	r1, r3
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f7ff fedb 	bl	800c20a <USBD_CoreFindIF>
 800c454:	4603      	mov	r3, r0
 800c456:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c458:	7bbb      	ldrb	r3, [r7, #14]
 800c45a:	2bff      	cmp	r3, #255	@ 0xff
 800c45c:	d01d      	beq.n	800c49a <USBD_StdItfReq+0x92>
 800c45e:	7bbb      	ldrb	r3, [r7, #14]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d11a      	bne.n	800c49a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c464:	7bba      	ldrb	r2, [r7, #14]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	32ae      	adds	r2, #174	@ 0xae
 800c46a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d00f      	beq.n	800c494 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c474:	7bba      	ldrb	r2, [r7, #14]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c47c:	7bba      	ldrb	r2, [r7, #14]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	32ae      	adds	r2, #174	@ 0xae
 800c482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c486:	689b      	ldr	r3, [r3, #8]
 800c488:	6839      	ldr	r1, [r7, #0]
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	4798      	blx	r3
 800c48e:	4603      	mov	r3, r0
 800c490:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c492:	e004      	b.n	800c49e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c494:	2303      	movs	r3, #3
 800c496:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c498:	e001      	b.n	800c49e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c49a:	2303      	movs	r3, #3
 800c49c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	88db      	ldrh	r3, [r3, #6]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d110      	bne.n	800c4c8 <USBD_StdItfReq+0xc0>
 800c4a6:	7bfb      	ldrb	r3, [r7, #15]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d10d      	bne.n	800c4c8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 fdfd 	bl	800d0ac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c4b2:	e009      	b.n	800c4c8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c4b4:	6839      	ldr	r1, [r7, #0]
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 fd21 	bl	800cefe <USBD_CtlError>
          break;
 800c4bc:	e004      	b.n	800c4c8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c4be:	6839      	ldr	r1, [r7, #0]
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f000 fd1c 	bl	800cefe <USBD_CtlError>
          break;
 800c4c6:	e000      	b.n	800c4ca <USBD_StdItfReq+0xc2>
          break;
 800c4c8:	bf00      	nop
      }
      break;
 800c4ca:	e004      	b.n	800c4d6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c4cc:	6839      	ldr	r1, [r7, #0]
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 fd15 	bl	800cefe <USBD_CtlError>
      break;
 800c4d4:	bf00      	nop
  }

  return ret;
 800c4d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3710      	adds	r7, #16
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	889b      	ldrh	r3, [r3, #4]
 800c4f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c4fc:	2b40      	cmp	r3, #64	@ 0x40
 800c4fe:	d007      	beq.n	800c510 <USBD_StdEPReq+0x30>
 800c500:	2b40      	cmp	r3, #64	@ 0x40
 800c502:	f200 817f 	bhi.w	800c804 <USBD_StdEPReq+0x324>
 800c506:	2b00      	cmp	r3, #0
 800c508:	d02a      	beq.n	800c560 <USBD_StdEPReq+0x80>
 800c50a:	2b20      	cmp	r3, #32
 800c50c:	f040 817a 	bne.w	800c804 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c510:	7bbb      	ldrb	r3, [r7, #14]
 800c512:	4619      	mov	r1, r3
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f7ff fe85 	bl	800c224 <USBD_CoreFindEP>
 800c51a:	4603      	mov	r3, r0
 800c51c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c51e:	7b7b      	ldrb	r3, [r7, #13]
 800c520:	2bff      	cmp	r3, #255	@ 0xff
 800c522:	f000 8174 	beq.w	800c80e <USBD_StdEPReq+0x32e>
 800c526:	7b7b      	ldrb	r3, [r7, #13]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	f040 8170 	bne.w	800c80e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c52e:	7b7a      	ldrb	r2, [r7, #13]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c536:	7b7a      	ldrb	r2, [r7, #13]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	32ae      	adds	r2, #174	@ 0xae
 800c53c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c540:	689b      	ldr	r3, [r3, #8]
 800c542:	2b00      	cmp	r3, #0
 800c544:	f000 8163 	beq.w	800c80e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c548:	7b7a      	ldrb	r2, [r7, #13]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	32ae      	adds	r2, #174	@ 0xae
 800c54e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c552:	689b      	ldr	r3, [r3, #8]
 800c554:	6839      	ldr	r1, [r7, #0]
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	4798      	blx	r3
 800c55a:	4603      	mov	r3, r0
 800c55c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c55e:	e156      	b.n	800c80e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	785b      	ldrb	r3, [r3, #1]
 800c564:	2b03      	cmp	r3, #3
 800c566:	d008      	beq.n	800c57a <USBD_StdEPReq+0x9a>
 800c568:	2b03      	cmp	r3, #3
 800c56a:	f300 8145 	bgt.w	800c7f8 <USBD_StdEPReq+0x318>
 800c56e:	2b00      	cmp	r3, #0
 800c570:	f000 809b 	beq.w	800c6aa <USBD_StdEPReq+0x1ca>
 800c574:	2b01      	cmp	r3, #1
 800c576:	d03c      	beq.n	800c5f2 <USBD_StdEPReq+0x112>
 800c578:	e13e      	b.n	800c7f8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c580:	b2db      	uxtb	r3, r3
 800c582:	2b02      	cmp	r3, #2
 800c584:	d002      	beq.n	800c58c <USBD_StdEPReq+0xac>
 800c586:	2b03      	cmp	r3, #3
 800c588:	d016      	beq.n	800c5b8 <USBD_StdEPReq+0xd8>
 800c58a:	e02c      	b.n	800c5e6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c58c:	7bbb      	ldrb	r3, [r7, #14]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d00d      	beq.n	800c5ae <USBD_StdEPReq+0xce>
 800c592:	7bbb      	ldrb	r3, [r7, #14]
 800c594:	2b80      	cmp	r3, #128	@ 0x80
 800c596:	d00a      	beq.n	800c5ae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c598:	7bbb      	ldrb	r3, [r7, #14]
 800c59a:	4619      	mov	r1, r3
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f001 f9a3 	bl	800d8e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5a2:	2180      	movs	r1, #128	@ 0x80
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f001 f99f 	bl	800d8e8 <USBD_LL_StallEP>
 800c5aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c5ac:	e020      	b.n	800c5f0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c5ae:	6839      	ldr	r1, [r7, #0]
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f000 fca4 	bl	800cefe <USBD_CtlError>
              break;
 800c5b6:	e01b      	b.n	800c5f0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	885b      	ldrh	r3, [r3, #2]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d10e      	bne.n	800c5de <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c5c0:	7bbb      	ldrb	r3, [r7, #14]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d00b      	beq.n	800c5de <USBD_StdEPReq+0xfe>
 800c5c6:	7bbb      	ldrb	r3, [r7, #14]
 800c5c8:	2b80      	cmp	r3, #128	@ 0x80
 800c5ca:	d008      	beq.n	800c5de <USBD_StdEPReq+0xfe>
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	88db      	ldrh	r3, [r3, #6]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d104      	bne.n	800c5de <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c5d4:	7bbb      	ldrb	r3, [r7, #14]
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f001 f985 	bl	800d8e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 fd64 	bl	800d0ac <USBD_CtlSendStatus>

              break;
 800c5e4:	e004      	b.n	800c5f0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c5e6:	6839      	ldr	r1, [r7, #0]
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 fc88 	bl	800cefe <USBD_CtlError>
              break;
 800c5ee:	bf00      	nop
          }
          break;
 800c5f0:	e107      	b.n	800c802 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	2b02      	cmp	r3, #2
 800c5fc:	d002      	beq.n	800c604 <USBD_StdEPReq+0x124>
 800c5fe:	2b03      	cmp	r3, #3
 800c600:	d016      	beq.n	800c630 <USBD_StdEPReq+0x150>
 800c602:	e04b      	b.n	800c69c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c604:	7bbb      	ldrb	r3, [r7, #14]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00d      	beq.n	800c626 <USBD_StdEPReq+0x146>
 800c60a:	7bbb      	ldrb	r3, [r7, #14]
 800c60c:	2b80      	cmp	r3, #128	@ 0x80
 800c60e:	d00a      	beq.n	800c626 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c610:	7bbb      	ldrb	r3, [r7, #14]
 800c612:	4619      	mov	r1, r3
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f001 f967 	bl	800d8e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c61a:	2180      	movs	r1, #128	@ 0x80
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f001 f963 	bl	800d8e8 <USBD_LL_StallEP>
 800c622:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c624:	e040      	b.n	800c6a8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c626:	6839      	ldr	r1, [r7, #0]
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 fc68 	bl	800cefe <USBD_CtlError>
              break;
 800c62e:	e03b      	b.n	800c6a8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	885b      	ldrh	r3, [r3, #2]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d136      	bne.n	800c6a6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c638:	7bbb      	ldrb	r3, [r7, #14]
 800c63a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d004      	beq.n	800c64c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c642:	7bbb      	ldrb	r3, [r7, #14]
 800c644:	4619      	mov	r1, r3
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f001 f96d 	bl	800d926 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f000 fd2d 	bl	800d0ac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c652:	7bbb      	ldrb	r3, [r7, #14]
 800c654:	4619      	mov	r1, r3
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f7ff fde4 	bl	800c224 <USBD_CoreFindEP>
 800c65c:	4603      	mov	r3, r0
 800c65e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c660:	7b7b      	ldrb	r3, [r7, #13]
 800c662:	2bff      	cmp	r3, #255	@ 0xff
 800c664:	d01f      	beq.n	800c6a6 <USBD_StdEPReq+0x1c6>
 800c666:	7b7b      	ldrb	r3, [r7, #13]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d11c      	bne.n	800c6a6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c66c:	7b7a      	ldrb	r2, [r7, #13]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c674:	7b7a      	ldrb	r2, [r7, #13]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	32ae      	adds	r2, #174	@ 0xae
 800c67a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d010      	beq.n	800c6a6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c684:	7b7a      	ldrb	r2, [r7, #13]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	32ae      	adds	r2, #174	@ 0xae
 800c68a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c68e:	689b      	ldr	r3, [r3, #8]
 800c690:	6839      	ldr	r1, [r7, #0]
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	4798      	blx	r3
 800c696:	4603      	mov	r3, r0
 800c698:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c69a:	e004      	b.n	800c6a6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c69c:	6839      	ldr	r1, [r7, #0]
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f000 fc2d 	bl	800cefe <USBD_CtlError>
              break;
 800c6a4:	e000      	b.n	800c6a8 <USBD_StdEPReq+0x1c8>
              break;
 800c6a6:	bf00      	nop
          }
          break;
 800c6a8:	e0ab      	b.n	800c802 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	2b02      	cmp	r3, #2
 800c6b4:	d002      	beq.n	800c6bc <USBD_StdEPReq+0x1dc>
 800c6b6:	2b03      	cmp	r3, #3
 800c6b8:	d032      	beq.n	800c720 <USBD_StdEPReq+0x240>
 800c6ba:	e097      	b.n	800c7ec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c6bc:	7bbb      	ldrb	r3, [r7, #14]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d007      	beq.n	800c6d2 <USBD_StdEPReq+0x1f2>
 800c6c2:	7bbb      	ldrb	r3, [r7, #14]
 800c6c4:	2b80      	cmp	r3, #128	@ 0x80
 800c6c6:	d004      	beq.n	800c6d2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c6c8:	6839      	ldr	r1, [r7, #0]
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 fc17 	bl	800cefe <USBD_CtlError>
                break;
 800c6d0:	e091      	b.n	800c7f6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	da0b      	bge.n	800c6f2 <USBD_StdEPReq+0x212>
 800c6da:	7bbb      	ldrb	r3, [r7, #14]
 800c6dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c6e0:	4613      	mov	r3, r2
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	4413      	add	r3, r2
 800c6e6:	009b      	lsls	r3, r3, #2
 800c6e8:	3310      	adds	r3, #16
 800c6ea:	687a      	ldr	r2, [r7, #4]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	3304      	adds	r3, #4
 800c6f0:	e00b      	b.n	800c70a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c6f2:	7bbb      	ldrb	r3, [r7, #14]
 800c6f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6f8:	4613      	mov	r3, r2
 800c6fa:	009b      	lsls	r3, r3, #2
 800c6fc:	4413      	add	r3, r2
 800c6fe:	009b      	lsls	r3, r3, #2
 800c700:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c704:	687a      	ldr	r2, [r7, #4]
 800c706:	4413      	add	r3, r2
 800c708:	3304      	adds	r3, #4
 800c70a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	2200      	movs	r2, #0
 800c710:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	2202      	movs	r2, #2
 800c716:	4619      	mov	r1, r3
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f000 fc6d 	bl	800cff8 <USBD_CtlSendData>
              break;
 800c71e:	e06a      	b.n	800c7f6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c720:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c724:	2b00      	cmp	r3, #0
 800c726:	da11      	bge.n	800c74c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c728:	7bbb      	ldrb	r3, [r7, #14]
 800c72a:	f003 020f 	and.w	r2, r3, #15
 800c72e:	6879      	ldr	r1, [r7, #4]
 800c730:	4613      	mov	r3, r2
 800c732:	009b      	lsls	r3, r3, #2
 800c734:	4413      	add	r3, r2
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	440b      	add	r3, r1
 800c73a:	3324      	adds	r3, #36	@ 0x24
 800c73c:	881b      	ldrh	r3, [r3, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d117      	bne.n	800c772 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c742:	6839      	ldr	r1, [r7, #0]
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f000 fbda 	bl	800cefe <USBD_CtlError>
                  break;
 800c74a:	e054      	b.n	800c7f6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c74c:	7bbb      	ldrb	r3, [r7, #14]
 800c74e:	f003 020f 	and.w	r2, r3, #15
 800c752:	6879      	ldr	r1, [r7, #4]
 800c754:	4613      	mov	r3, r2
 800c756:	009b      	lsls	r3, r3, #2
 800c758:	4413      	add	r3, r2
 800c75a:	009b      	lsls	r3, r3, #2
 800c75c:	440b      	add	r3, r1
 800c75e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c762:	881b      	ldrh	r3, [r3, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d104      	bne.n	800c772 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c768:	6839      	ldr	r1, [r7, #0]
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f000 fbc7 	bl	800cefe <USBD_CtlError>
                  break;
 800c770:	e041      	b.n	800c7f6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c772:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c776:	2b00      	cmp	r3, #0
 800c778:	da0b      	bge.n	800c792 <USBD_StdEPReq+0x2b2>
 800c77a:	7bbb      	ldrb	r3, [r7, #14]
 800c77c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c780:	4613      	mov	r3, r2
 800c782:	009b      	lsls	r3, r3, #2
 800c784:	4413      	add	r3, r2
 800c786:	009b      	lsls	r3, r3, #2
 800c788:	3310      	adds	r3, #16
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	4413      	add	r3, r2
 800c78e:	3304      	adds	r3, #4
 800c790:	e00b      	b.n	800c7aa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c792:	7bbb      	ldrb	r3, [r7, #14]
 800c794:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c798:	4613      	mov	r3, r2
 800c79a:	009b      	lsls	r3, r3, #2
 800c79c:	4413      	add	r3, r2
 800c79e:	009b      	lsls	r3, r3, #2
 800c7a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	4413      	add	r3, r2
 800c7a8:	3304      	adds	r3, #4
 800c7aa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c7ac:	7bbb      	ldrb	r3, [r7, #14]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d002      	beq.n	800c7b8 <USBD_StdEPReq+0x2d8>
 800c7b2:	7bbb      	ldrb	r3, [r7, #14]
 800c7b4:	2b80      	cmp	r3, #128	@ 0x80
 800c7b6:	d103      	bne.n	800c7c0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	601a      	str	r2, [r3, #0]
 800c7be:	e00e      	b.n	800c7de <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c7c0:	7bbb      	ldrb	r3, [r7, #14]
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f001 f8cd 	bl	800d964 <USBD_LL_IsStallEP>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d003      	beq.n	800c7d8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	601a      	str	r2, [r3, #0]
 800c7d6:	e002      	b.n	800c7de <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	2202      	movs	r2, #2
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 fc07 	bl	800cff8 <USBD_CtlSendData>
              break;
 800c7ea:	e004      	b.n	800c7f6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c7ec:	6839      	ldr	r1, [r7, #0]
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 fb85 	bl	800cefe <USBD_CtlError>
              break;
 800c7f4:	bf00      	nop
          }
          break;
 800c7f6:	e004      	b.n	800c802 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c7f8:	6839      	ldr	r1, [r7, #0]
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 fb7f 	bl	800cefe <USBD_CtlError>
          break;
 800c800:	bf00      	nop
      }
      break;
 800c802:	e005      	b.n	800c810 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c804:	6839      	ldr	r1, [r7, #0]
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f000 fb79 	bl	800cefe <USBD_CtlError>
      break;
 800c80c:	e000      	b.n	800c810 <USBD_StdEPReq+0x330>
      break;
 800c80e:	bf00      	nop
  }

  return ret;
 800c810:	7bfb      	ldrb	r3, [r7, #15]
}
 800c812:	4618      	mov	r0, r3
 800c814:	3710      	adds	r7, #16
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}
	...

0800c81c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b084      	sub	sp, #16
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c826:	2300      	movs	r3, #0
 800c828:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c82a:	2300      	movs	r3, #0
 800c82c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c82e:	2300      	movs	r3, #0
 800c830:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	885b      	ldrh	r3, [r3, #2]
 800c836:	0a1b      	lsrs	r3, r3, #8
 800c838:	b29b      	uxth	r3, r3
 800c83a:	3b01      	subs	r3, #1
 800c83c:	2b0e      	cmp	r3, #14
 800c83e:	f200 8152 	bhi.w	800cae6 <USBD_GetDescriptor+0x2ca>
 800c842:	a201      	add	r2, pc, #4	@ (adr r2, 800c848 <USBD_GetDescriptor+0x2c>)
 800c844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c848:	0800c8b9 	.word	0x0800c8b9
 800c84c:	0800c8d1 	.word	0x0800c8d1
 800c850:	0800c911 	.word	0x0800c911
 800c854:	0800cae7 	.word	0x0800cae7
 800c858:	0800cae7 	.word	0x0800cae7
 800c85c:	0800ca87 	.word	0x0800ca87
 800c860:	0800cab3 	.word	0x0800cab3
 800c864:	0800cae7 	.word	0x0800cae7
 800c868:	0800cae7 	.word	0x0800cae7
 800c86c:	0800cae7 	.word	0x0800cae7
 800c870:	0800cae7 	.word	0x0800cae7
 800c874:	0800cae7 	.word	0x0800cae7
 800c878:	0800cae7 	.word	0x0800cae7
 800c87c:	0800cae7 	.word	0x0800cae7
 800c880:	0800c885 	.word	0x0800c885
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c88a:	69db      	ldr	r3, [r3, #28]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d00b      	beq.n	800c8a8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c896:	69db      	ldr	r3, [r3, #28]
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	7c12      	ldrb	r2, [r2, #16]
 800c89c:	f107 0108 	add.w	r1, r7, #8
 800c8a0:	4610      	mov	r0, r2
 800c8a2:	4798      	blx	r3
 800c8a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c8a6:	e126      	b.n	800caf6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c8a8:	6839      	ldr	r1, [r7, #0]
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 fb27 	bl	800cefe <USBD_CtlError>
        err++;
 800c8b0:	7afb      	ldrb	r3, [r7, #11]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	72fb      	strb	r3, [r7, #11]
      break;
 800c8b6:	e11e      	b.n	800caf6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	687a      	ldr	r2, [r7, #4]
 800c8c2:	7c12      	ldrb	r2, [r2, #16]
 800c8c4:	f107 0108 	add.w	r1, r7, #8
 800c8c8:	4610      	mov	r0, r2
 800c8ca:	4798      	blx	r3
 800c8cc:	60f8      	str	r0, [r7, #12]
      break;
 800c8ce:	e112      	b.n	800caf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	7c1b      	ldrb	r3, [r3, #16]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d10d      	bne.n	800c8f4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8e0:	f107 0208 	add.w	r2, r7, #8
 800c8e4:	4610      	mov	r0, r2
 800c8e6:	4798      	blx	r3
 800c8e8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	2202      	movs	r2, #2
 800c8f0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c8f2:	e100      	b.n	800caf6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8fc:	f107 0208 	add.w	r2, r7, #8
 800c900:	4610      	mov	r0, r2
 800c902:	4798      	blx	r3
 800c904:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	3301      	adds	r3, #1
 800c90a:	2202      	movs	r2, #2
 800c90c:	701a      	strb	r2, [r3, #0]
      break;
 800c90e:	e0f2      	b.n	800caf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	885b      	ldrh	r3, [r3, #2]
 800c914:	b2db      	uxtb	r3, r3
 800c916:	2b05      	cmp	r3, #5
 800c918:	f200 80ac 	bhi.w	800ca74 <USBD_GetDescriptor+0x258>
 800c91c:	a201      	add	r2, pc, #4	@ (adr r2, 800c924 <USBD_GetDescriptor+0x108>)
 800c91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c922:	bf00      	nop
 800c924:	0800c93d 	.word	0x0800c93d
 800c928:	0800c971 	.word	0x0800c971
 800c92c:	0800c9a5 	.word	0x0800c9a5
 800c930:	0800c9d9 	.word	0x0800c9d9
 800c934:	0800ca0d 	.word	0x0800ca0d
 800c938:	0800ca41 	.word	0x0800ca41
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d00b      	beq.n	800c960 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	7c12      	ldrb	r2, [r2, #16]
 800c954:	f107 0108 	add.w	r1, r7, #8
 800c958:	4610      	mov	r0, r2
 800c95a:	4798      	blx	r3
 800c95c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c95e:	e091      	b.n	800ca84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c960:	6839      	ldr	r1, [r7, #0]
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f000 facb 	bl	800cefe <USBD_CtlError>
            err++;
 800c968:	7afb      	ldrb	r3, [r7, #11]
 800c96a:	3301      	adds	r3, #1
 800c96c:	72fb      	strb	r3, [r7, #11]
          break;
 800c96e:	e089      	b.n	800ca84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d00b      	beq.n	800c994 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c982:	689b      	ldr	r3, [r3, #8]
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	7c12      	ldrb	r2, [r2, #16]
 800c988:	f107 0108 	add.w	r1, r7, #8
 800c98c:	4610      	mov	r0, r2
 800c98e:	4798      	blx	r3
 800c990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c992:	e077      	b.n	800ca84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c994:	6839      	ldr	r1, [r7, #0]
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f000 fab1 	bl	800cefe <USBD_CtlError>
            err++;
 800c99c:	7afb      	ldrb	r3, [r7, #11]
 800c99e:	3301      	adds	r3, #1
 800c9a0:	72fb      	strb	r3, [r7, #11]
          break;
 800c9a2:	e06f      	b.n	800ca84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9aa:	68db      	ldr	r3, [r3, #12]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d00b      	beq.n	800c9c8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	7c12      	ldrb	r2, [r2, #16]
 800c9bc:	f107 0108 	add.w	r1, r7, #8
 800c9c0:	4610      	mov	r0, r2
 800c9c2:	4798      	blx	r3
 800c9c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9c6:	e05d      	b.n	800ca84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c9c8:	6839      	ldr	r1, [r7, #0]
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 fa97 	bl	800cefe <USBD_CtlError>
            err++;
 800c9d0:	7afb      	ldrb	r3, [r7, #11]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	72fb      	strb	r3, [r7, #11]
          break;
 800c9d6:	e055      	b.n	800ca84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9de:	691b      	ldr	r3, [r3, #16]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d00b      	beq.n	800c9fc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9ea:	691b      	ldr	r3, [r3, #16]
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	7c12      	ldrb	r2, [r2, #16]
 800c9f0:	f107 0108 	add.w	r1, r7, #8
 800c9f4:	4610      	mov	r0, r2
 800c9f6:	4798      	blx	r3
 800c9f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9fa:	e043      	b.n	800ca84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c9fc:	6839      	ldr	r1, [r7, #0]
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 fa7d 	bl	800cefe <USBD_CtlError>
            err++;
 800ca04:	7afb      	ldrb	r3, [r7, #11]
 800ca06:	3301      	adds	r3, #1
 800ca08:	72fb      	strb	r3, [r7, #11]
          break;
 800ca0a:	e03b      	b.n	800ca84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca12:	695b      	ldr	r3, [r3, #20]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d00b      	beq.n	800ca30 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca1e:	695b      	ldr	r3, [r3, #20]
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	7c12      	ldrb	r2, [r2, #16]
 800ca24:	f107 0108 	add.w	r1, r7, #8
 800ca28:	4610      	mov	r0, r2
 800ca2a:	4798      	blx	r3
 800ca2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca2e:	e029      	b.n	800ca84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ca30:	6839      	ldr	r1, [r7, #0]
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 fa63 	bl	800cefe <USBD_CtlError>
            err++;
 800ca38:	7afb      	ldrb	r3, [r7, #11]
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	72fb      	strb	r3, [r7, #11]
          break;
 800ca3e:	e021      	b.n	800ca84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca46:	699b      	ldr	r3, [r3, #24]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d00b      	beq.n	800ca64 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca52:	699b      	ldr	r3, [r3, #24]
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	7c12      	ldrb	r2, [r2, #16]
 800ca58:	f107 0108 	add.w	r1, r7, #8
 800ca5c:	4610      	mov	r0, r2
 800ca5e:	4798      	blx	r3
 800ca60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca62:	e00f      	b.n	800ca84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ca64:	6839      	ldr	r1, [r7, #0]
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f000 fa49 	bl	800cefe <USBD_CtlError>
            err++;
 800ca6c:	7afb      	ldrb	r3, [r7, #11]
 800ca6e:	3301      	adds	r3, #1
 800ca70:	72fb      	strb	r3, [r7, #11]
          break;
 800ca72:	e007      	b.n	800ca84 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ca74:	6839      	ldr	r1, [r7, #0]
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 fa41 	bl	800cefe <USBD_CtlError>
          err++;
 800ca7c:	7afb      	ldrb	r3, [r7, #11]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ca82:	bf00      	nop
      }
      break;
 800ca84:	e037      	b.n	800caf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	7c1b      	ldrb	r3, [r3, #16]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d109      	bne.n	800caa2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca96:	f107 0208 	add.w	r2, r7, #8
 800ca9a:	4610      	mov	r0, r2
 800ca9c:	4798      	blx	r3
 800ca9e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800caa0:	e029      	b.n	800caf6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800caa2:	6839      	ldr	r1, [r7, #0]
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 fa2a 	bl	800cefe <USBD_CtlError>
        err++;
 800caaa:	7afb      	ldrb	r3, [r7, #11]
 800caac:	3301      	adds	r3, #1
 800caae:	72fb      	strb	r3, [r7, #11]
      break;
 800cab0:	e021      	b.n	800caf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	7c1b      	ldrb	r3, [r3, #16]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d10d      	bne.n	800cad6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cac2:	f107 0208 	add.w	r2, r7, #8
 800cac6:	4610      	mov	r0, r2
 800cac8:	4798      	blx	r3
 800caca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	3301      	adds	r3, #1
 800cad0:	2207      	movs	r2, #7
 800cad2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cad4:	e00f      	b.n	800caf6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cad6:	6839      	ldr	r1, [r7, #0]
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 fa10 	bl	800cefe <USBD_CtlError>
        err++;
 800cade:	7afb      	ldrb	r3, [r7, #11]
 800cae0:	3301      	adds	r3, #1
 800cae2:	72fb      	strb	r3, [r7, #11]
      break;
 800cae4:	e007      	b.n	800caf6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cae6:	6839      	ldr	r1, [r7, #0]
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 fa08 	bl	800cefe <USBD_CtlError>
      err++;
 800caee:	7afb      	ldrb	r3, [r7, #11]
 800caf0:	3301      	adds	r3, #1
 800caf2:	72fb      	strb	r3, [r7, #11]
      break;
 800caf4:	bf00      	nop
  }

  if (err != 0U)
 800caf6:	7afb      	ldrb	r3, [r7, #11]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d11e      	bne.n	800cb3a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	88db      	ldrh	r3, [r3, #6]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d016      	beq.n	800cb32 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800cb04:	893b      	ldrh	r3, [r7, #8]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00e      	beq.n	800cb28 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	88da      	ldrh	r2, [r3, #6]
 800cb0e:	893b      	ldrh	r3, [r7, #8]
 800cb10:	4293      	cmp	r3, r2
 800cb12:	bf28      	it	cs
 800cb14:	4613      	movcs	r3, r2
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cb1a:	893b      	ldrh	r3, [r7, #8]
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	68f9      	ldr	r1, [r7, #12]
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 fa69 	bl	800cff8 <USBD_CtlSendData>
 800cb26:	e009      	b.n	800cb3c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cb28:	6839      	ldr	r1, [r7, #0]
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 f9e7 	bl	800cefe <USBD_CtlError>
 800cb30:	e004      	b.n	800cb3c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 faba 	bl	800d0ac <USBD_CtlSendStatus>
 800cb38:	e000      	b.n	800cb3c <USBD_GetDescriptor+0x320>
    return;
 800cb3a:	bf00      	nop
  }
}
 800cb3c:	3710      	adds	r7, #16
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop

0800cb44 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	889b      	ldrh	r3, [r3, #4]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d131      	bne.n	800cbba <USBD_SetAddress+0x76>
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	88db      	ldrh	r3, [r3, #6]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d12d      	bne.n	800cbba <USBD_SetAddress+0x76>
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	885b      	ldrh	r3, [r3, #2]
 800cb62:	2b7f      	cmp	r3, #127	@ 0x7f
 800cb64:	d829      	bhi.n	800cbba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	885b      	ldrh	r3, [r3, #2]
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	2b03      	cmp	r3, #3
 800cb7c:	d104      	bne.n	800cb88 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cb7e:	6839      	ldr	r1, [r7, #0]
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f000 f9bc 	bl	800cefe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb86:	e01d      	b.n	800cbc4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	7bfa      	ldrb	r2, [r7, #15]
 800cb8c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cb90:	7bfb      	ldrb	r3, [r7, #15]
 800cb92:	4619      	mov	r1, r3
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 ff11 	bl	800d9bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f000 fa86 	bl	800d0ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cba0:	7bfb      	ldrb	r3, [r7, #15]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d004      	beq.n	800cbb0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2202      	movs	r2, #2
 800cbaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbae:	e009      	b.n	800cbc4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbb8:	e004      	b.n	800cbc4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cbba:	6839      	ldr	r1, [r7, #0]
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 f99e 	bl	800cefe <USBD_CtlError>
  }
}
 800cbc2:	bf00      	nop
 800cbc4:	bf00      	nop
 800cbc6:	3710      	adds	r7, #16
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b084      	sub	sp, #16
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	885b      	ldrh	r3, [r3, #2]
 800cbde:	b2da      	uxtb	r2, r3
 800cbe0:	4b4e      	ldr	r3, [pc, #312]	@ (800cd1c <USBD_SetConfig+0x150>)
 800cbe2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cbe4:	4b4d      	ldr	r3, [pc, #308]	@ (800cd1c <USBD_SetConfig+0x150>)
 800cbe6:	781b      	ldrb	r3, [r3, #0]
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d905      	bls.n	800cbf8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cbec:	6839      	ldr	r1, [r7, #0]
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f000 f985 	bl	800cefe <USBD_CtlError>
    return USBD_FAIL;
 800cbf4:	2303      	movs	r3, #3
 800cbf6:	e08c      	b.n	800cd12 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	2b02      	cmp	r3, #2
 800cc02:	d002      	beq.n	800cc0a <USBD_SetConfig+0x3e>
 800cc04:	2b03      	cmp	r3, #3
 800cc06:	d029      	beq.n	800cc5c <USBD_SetConfig+0x90>
 800cc08:	e075      	b.n	800ccf6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cc0a:	4b44      	ldr	r3, [pc, #272]	@ (800cd1c <USBD_SetConfig+0x150>)
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d020      	beq.n	800cc54 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cc12:	4b42      	ldr	r3, [pc, #264]	@ (800cd1c <USBD_SetConfig+0x150>)
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	461a      	mov	r2, r3
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cc1c:	4b3f      	ldr	r3, [pc, #252]	@ (800cd1c <USBD_SetConfig+0x150>)
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	4619      	mov	r1, r3
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f7fe ffb9 	bl	800bb9a <USBD_SetClassConfig>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cc2c:	7bfb      	ldrb	r3, [r7, #15]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d008      	beq.n	800cc44 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cc32:	6839      	ldr	r1, [r7, #0]
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 f962 	bl	800cefe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2202      	movs	r2, #2
 800cc3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cc42:	e065      	b.n	800cd10 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 fa31 	bl	800d0ac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2203      	movs	r2, #3
 800cc4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cc52:	e05d      	b.n	800cd10 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f000 fa29 	bl	800d0ac <USBD_CtlSendStatus>
      break;
 800cc5a:	e059      	b.n	800cd10 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cc5c:	4b2f      	ldr	r3, [pc, #188]	@ (800cd1c <USBD_SetConfig+0x150>)
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d112      	bne.n	800cc8a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2202      	movs	r2, #2
 800cc68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cc6c:	4b2b      	ldr	r3, [pc, #172]	@ (800cd1c <USBD_SetConfig+0x150>)
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	461a      	mov	r2, r3
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cc76:	4b29      	ldr	r3, [pc, #164]	@ (800cd1c <USBD_SetConfig+0x150>)
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f7fe ffa8 	bl	800bbd2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 fa12 	bl	800d0ac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cc88:	e042      	b.n	800cd10 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cc8a:	4b24      	ldr	r3, [pc, #144]	@ (800cd1c <USBD_SetConfig+0x150>)
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	461a      	mov	r2, r3
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d02a      	beq.n	800ccee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	4619      	mov	r1, r3
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f7fe ff96 	bl	800bbd2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cca6:	4b1d      	ldr	r3, [pc, #116]	@ (800cd1c <USBD_SetConfig+0x150>)
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	461a      	mov	r2, r3
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ccb0:	4b1a      	ldr	r3, [pc, #104]	@ (800cd1c <USBD_SetConfig+0x150>)
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7fe ff6f 	bl	800bb9a <USBD_SetClassConfig>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ccc0:	7bfb      	ldrb	r3, [r7, #15]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d00f      	beq.n	800cce6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ccc6:	6839      	ldr	r1, [r7, #0]
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f000 f918 	bl	800cefe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	b2db      	uxtb	r3, r3
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f7fe ff7b 	bl	800bbd2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2202      	movs	r2, #2
 800cce0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cce4:	e014      	b.n	800cd10 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 f9e0 	bl	800d0ac <USBD_CtlSendStatus>
      break;
 800ccec:	e010      	b.n	800cd10 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 f9dc 	bl	800d0ac <USBD_CtlSendStatus>
      break;
 800ccf4:	e00c      	b.n	800cd10 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ccf6:	6839      	ldr	r1, [r7, #0]
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f000 f900 	bl	800cefe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ccfe:	4b07      	ldr	r3, [pc, #28]	@ (800cd1c <USBD_SetConfig+0x150>)
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	4619      	mov	r1, r3
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f7fe ff64 	bl	800bbd2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cd0a:	2303      	movs	r3, #3
 800cd0c:	73fb      	strb	r3, [r7, #15]
      break;
 800cd0e:	bf00      	nop
  }

  return ret;
 800cd10:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3710      	adds	r7, #16
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	240006b4 	.word	0x240006b4

0800cd20 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	88db      	ldrh	r3, [r3, #6]
 800cd2e:	2b01      	cmp	r3, #1
 800cd30:	d004      	beq.n	800cd3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cd32:	6839      	ldr	r1, [r7, #0]
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 f8e2 	bl	800cefe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cd3a:	e023      	b.n	800cd84 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	2b02      	cmp	r3, #2
 800cd46:	dc02      	bgt.n	800cd4e <USBD_GetConfig+0x2e>
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	dc03      	bgt.n	800cd54 <USBD_GetConfig+0x34>
 800cd4c:	e015      	b.n	800cd7a <USBD_GetConfig+0x5a>
 800cd4e:	2b03      	cmp	r3, #3
 800cd50:	d00b      	beq.n	800cd6a <USBD_GetConfig+0x4a>
 800cd52:	e012      	b.n	800cd7a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2200      	movs	r2, #0
 800cd58:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	3308      	adds	r3, #8
 800cd5e:	2201      	movs	r2, #1
 800cd60:	4619      	mov	r1, r3
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 f948 	bl	800cff8 <USBD_CtlSendData>
        break;
 800cd68:	e00c      	b.n	800cd84 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	3304      	adds	r3, #4
 800cd6e:	2201      	movs	r2, #1
 800cd70:	4619      	mov	r1, r3
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 f940 	bl	800cff8 <USBD_CtlSendData>
        break;
 800cd78:	e004      	b.n	800cd84 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cd7a:	6839      	ldr	r1, [r7, #0]
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f000 f8be 	bl	800cefe <USBD_CtlError>
        break;
 800cd82:	bf00      	nop
}
 800cd84:	bf00      	nop
 800cd86:	3708      	adds	r7, #8
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}

0800cd8c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b082      	sub	sp, #8
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd9c:	b2db      	uxtb	r3, r3
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	2b02      	cmp	r3, #2
 800cda2:	d81e      	bhi.n	800cde2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	88db      	ldrh	r3, [r3, #6]
 800cda8:	2b02      	cmp	r3, #2
 800cdaa:	d004      	beq.n	800cdb6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cdac:	6839      	ldr	r1, [r7, #0]
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f000 f8a5 	bl	800cefe <USBD_CtlError>
        break;
 800cdb4:	e01a      	b.n	800cdec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2201      	movs	r2, #1
 800cdba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d005      	beq.n	800cdd2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	f043 0202 	orr.w	r2, r3, #2
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	330c      	adds	r3, #12
 800cdd6:	2202      	movs	r2, #2
 800cdd8:	4619      	mov	r1, r3
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f000 f90c 	bl	800cff8 <USBD_CtlSendData>
      break;
 800cde0:	e004      	b.n	800cdec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cde2:	6839      	ldr	r1, [r7, #0]
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f000 f88a 	bl	800cefe <USBD_CtlError>
      break;
 800cdea:	bf00      	nop
  }
}
 800cdec:	bf00      	nop
 800cdee:	3708      	adds	r7, #8
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	885b      	ldrh	r3, [r3, #2]
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d107      	bne.n	800ce16 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2201      	movs	r2, #1
 800ce0a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 f94c 	bl	800d0ac <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ce14:	e013      	b.n	800ce3e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	885b      	ldrh	r3, [r3, #2]
 800ce1a:	2b02      	cmp	r3, #2
 800ce1c:	d10b      	bne.n	800ce36 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	889b      	ldrh	r3, [r3, #4]
 800ce22:	0a1b      	lsrs	r3, r3, #8
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	b2da      	uxtb	r2, r3
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 f93c 	bl	800d0ac <USBD_CtlSendStatus>
}
 800ce34:	e003      	b.n	800ce3e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ce36:	6839      	ldr	r1, [r7, #0]
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 f860 	bl	800cefe <USBD_CtlError>
}
 800ce3e:	bf00      	nop
 800ce40:	3708      	adds	r7, #8
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}

0800ce46 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce46:	b580      	push	{r7, lr}
 800ce48:	b082      	sub	sp, #8
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	6078      	str	r0, [r7, #4]
 800ce4e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	3b01      	subs	r3, #1
 800ce5a:	2b02      	cmp	r3, #2
 800ce5c:	d80b      	bhi.n	800ce76 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	885b      	ldrh	r3, [r3, #2]
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d10c      	bne.n	800ce80 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f000 f91c 	bl	800d0ac <USBD_CtlSendStatus>
      }
      break;
 800ce74:	e004      	b.n	800ce80 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ce76:	6839      	ldr	r1, [r7, #0]
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f000 f840 	bl	800cefe <USBD_CtlError>
      break;
 800ce7e:	e000      	b.n	800ce82 <USBD_ClrFeature+0x3c>
      break;
 800ce80:	bf00      	nop
  }
}
 800ce82:	bf00      	nop
 800ce84:	3708      	adds	r7, #8
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}

0800ce8a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ce8a:	b580      	push	{r7, lr}
 800ce8c:	b084      	sub	sp, #16
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	6078      	str	r0, [r7, #4]
 800ce92:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	781a      	ldrb	r2, [r3, #0]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	3301      	adds	r3, #1
 800cea4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	781a      	ldrb	r2, [r3, #0]
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ceb4:	68f8      	ldr	r0, [r7, #12]
 800ceb6:	f7ff fa16 	bl	800c2e6 <SWAPBYTE>
 800ceba:	4603      	mov	r3, r0
 800cebc:	461a      	mov	r2, r3
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	3301      	adds	r3, #1
 800cec6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	3301      	adds	r3, #1
 800cecc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cece:	68f8      	ldr	r0, [r7, #12]
 800ced0:	f7ff fa09 	bl	800c2e6 <SWAPBYTE>
 800ced4:	4603      	mov	r3, r0
 800ced6:	461a      	mov	r2, r3
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	3301      	adds	r3, #1
 800cee0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	3301      	adds	r3, #1
 800cee6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cee8:	68f8      	ldr	r0, [r7, #12]
 800ceea:	f7ff f9fc 	bl	800c2e6 <SWAPBYTE>
 800ceee:	4603      	mov	r3, r0
 800cef0:	461a      	mov	r2, r3
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	80da      	strh	r2, [r3, #6]
}
 800cef6:	bf00      	nop
 800cef8:	3710      	adds	r7, #16
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b082      	sub	sp, #8
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
 800cf06:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf08:	2180      	movs	r1, #128	@ 0x80
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f000 fcec 	bl	800d8e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cf10:	2100      	movs	r1, #0
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f000 fce8 	bl	800d8e8 <USBD_LL_StallEP>
}
 800cf18:	bf00      	nop
 800cf1a:	3708      	adds	r7, #8
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b086      	sub	sp, #24
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	60f8      	str	r0, [r7, #12]
 800cf28:	60b9      	str	r1, [r7, #8]
 800cf2a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d042      	beq.n	800cfbc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800cf3a:	6938      	ldr	r0, [r7, #16]
 800cf3c:	f000 f842 	bl	800cfc4 <USBD_GetLen>
 800cf40:	4603      	mov	r3, r0
 800cf42:	3301      	adds	r3, #1
 800cf44:	005b      	lsls	r3, r3, #1
 800cf46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf4a:	d808      	bhi.n	800cf5e <USBD_GetString+0x3e>
 800cf4c:	6938      	ldr	r0, [r7, #16]
 800cf4e:	f000 f839 	bl	800cfc4 <USBD_GetLen>
 800cf52:	4603      	mov	r3, r0
 800cf54:	3301      	adds	r3, #1
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	005b      	lsls	r3, r3, #1
 800cf5a:	b29a      	uxth	r2, r3
 800cf5c:	e001      	b.n	800cf62 <USBD_GetString+0x42>
 800cf5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cf66:	7dfb      	ldrb	r3, [r7, #23]
 800cf68:	68ba      	ldr	r2, [r7, #8]
 800cf6a:	4413      	add	r3, r2
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	7812      	ldrb	r2, [r2, #0]
 800cf70:	701a      	strb	r2, [r3, #0]
  idx++;
 800cf72:	7dfb      	ldrb	r3, [r7, #23]
 800cf74:	3301      	adds	r3, #1
 800cf76:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cf78:	7dfb      	ldrb	r3, [r7, #23]
 800cf7a:	68ba      	ldr	r2, [r7, #8]
 800cf7c:	4413      	add	r3, r2
 800cf7e:	2203      	movs	r2, #3
 800cf80:	701a      	strb	r2, [r3, #0]
  idx++;
 800cf82:	7dfb      	ldrb	r3, [r7, #23]
 800cf84:	3301      	adds	r3, #1
 800cf86:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cf88:	e013      	b.n	800cfb2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800cf8a:	7dfb      	ldrb	r3, [r7, #23]
 800cf8c:	68ba      	ldr	r2, [r7, #8]
 800cf8e:	4413      	add	r3, r2
 800cf90:	693a      	ldr	r2, [r7, #16]
 800cf92:	7812      	ldrb	r2, [r2, #0]
 800cf94:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	3301      	adds	r3, #1
 800cf9a:	613b      	str	r3, [r7, #16]
    idx++;
 800cf9c:	7dfb      	ldrb	r3, [r7, #23]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cfa2:	7dfb      	ldrb	r3, [r7, #23]
 800cfa4:	68ba      	ldr	r2, [r7, #8]
 800cfa6:	4413      	add	r3, r2
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	701a      	strb	r2, [r3, #0]
    idx++;
 800cfac:	7dfb      	ldrb	r3, [r7, #23]
 800cfae:	3301      	adds	r3, #1
 800cfb0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d1e7      	bne.n	800cf8a <USBD_GetString+0x6a>
 800cfba:	e000      	b.n	800cfbe <USBD_GetString+0x9e>
    return;
 800cfbc:	bf00      	nop
  }
}
 800cfbe:	3718      	adds	r7, #24
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b085      	sub	sp, #20
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cfd4:	e005      	b.n	800cfe2 <USBD_GetLen+0x1e>
  {
    len++;
 800cfd6:	7bfb      	ldrb	r3, [r7, #15]
 800cfd8:	3301      	adds	r3, #1
 800cfda:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	3301      	adds	r3, #1
 800cfe0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d1f5      	bne.n	800cfd6 <USBD_GetLen+0x12>
  }

  return len;
 800cfea:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3714      	adds	r7, #20
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr

0800cff8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b084      	sub	sp, #16
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	60b9      	str	r1, [r7, #8]
 800d002:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2202      	movs	r2, #2
 800d008:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	68ba      	ldr	r2, [r7, #8]
 800d01c:	2100      	movs	r1, #0
 800d01e:	68f8      	ldr	r0, [r7, #12]
 800d020:	f000 fceb 	bl	800d9fa <USBD_LL_Transmit>

  return USBD_OK;
 800d024:	2300      	movs	r3, #0
}
 800d026:	4618      	mov	r0, r3
 800d028:	3710      	adds	r7, #16
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d02e:	b580      	push	{r7, lr}
 800d030:	b084      	sub	sp, #16
 800d032:	af00      	add	r7, sp, #0
 800d034:	60f8      	str	r0, [r7, #12]
 800d036:	60b9      	str	r1, [r7, #8]
 800d038:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	68ba      	ldr	r2, [r7, #8]
 800d03e:	2100      	movs	r1, #0
 800d040:	68f8      	ldr	r0, [r7, #12]
 800d042:	f000 fcda 	bl	800d9fa <USBD_LL_Transmit>

  return USBD_OK;
 800d046:	2300      	movs	r3, #0
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3710      	adds	r7, #16
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b084      	sub	sp, #16
 800d054:	af00      	add	r7, sp, #0
 800d056:	60f8      	str	r0, [r7, #12]
 800d058:	60b9      	str	r1, [r7, #8]
 800d05a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2203      	movs	r2, #3
 800d060:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	68ba      	ldr	r2, [r7, #8]
 800d078:	2100      	movs	r1, #0
 800d07a:	68f8      	ldr	r0, [r7, #12]
 800d07c:	f000 fcde 	bl	800da3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d080:	2300      	movs	r3, #0
}
 800d082:	4618      	mov	r0, r3
 800d084:	3710      	adds	r7, #16
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}

0800d08a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d08a:	b580      	push	{r7, lr}
 800d08c:	b084      	sub	sp, #16
 800d08e:	af00      	add	r7, sp, #0
 800d090:	60f8      	str	r0, [r7, #12]
 800d092:	60b9      	str	r1, [r7, #8]
 800d094:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	68ba      	ldr	r2, [r7, #8]
 800d09a:	2100      	movs	r1, #0
 800d09c:	68f8      	ldr	r0, [r7, #12]
 800d09e:	f000 fccd 	bl	800da3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d0a2:	2300      	movs	r3, #0
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3710      	adds	r7, #16
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}

0800d0ac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b082      	sub	sp, #8
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2204      	movs	r2, #4
 800d0b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d0bc:	2300      	movs	r3, #0
 800d0be:	2200      	movs	r2, #0
 800d0c0:	2100      	movs	r1, #0
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 fc99 	bl	800d9fa <USBD_LL_Transmit>

  return USBD_OK;
 800d0c8:	2300      	movs	r3, #0
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3708      	adds	r7, #8
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}

0800d0d2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d0d2:	b580      	push	{r7, lr}
 800d0d4:	b082      	sub	sp, #8
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2205      	movs	r2, #5
 800d0de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	2100      	movs	r1, #0
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f000 fca7 	bl	800da3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d0ee:	2300      	movs	r3, #0
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3708      	adds	r7, #8
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	4913      	ldr	r1, [pc, #76]	@ (800d14c <MX_USB_DEVICE_Init+0x54>)
 800d100:	4813      	ldr	r0, [pc, #76]	@ (800d150 <MX_USB_DEVICE_Init+0x58>)
 800d102:	f7fe fccd 	bl	800baa0 <USBD_Init>
 800d106:	4603      	mov	r3, r0
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d001      	beq.n	800d110 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d10c:	f7f4 f9f8 	bl	8001500 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d110:	4910      	ldr	r1, [pc, #64]	@ (800d154 <MX_USB_DEVICE_Init+0x5c>)
 800d112:	480f      	ldr	r0, [pc, #60]	@ (800d150 <MX_USB_DEVICE_Init+0x58>)
 800d114:	f7fe fcf4 	bl	800bb00 <USBD_RegisterClass>
 800d118:	4603      	mov	r3, r0
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d001      	beq.n	800d122 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d11e:	f7f4 f9ef 	bl	8001500 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d122:	490d      	ldr	r1, [pc, #52]	@ (800d158 <MX_USB_DEVICE_Init+0x60>)
 800d124:	480a      	ldr	r0, [pc, #40]	@ (800d150 <MX_USB_DEVICE_Init+0x58>)
 800d126:	f7fe fc2b 	bl	800b980 <USBD_CDC_RegisterInterface>
 800d12a:	4603      	mov	r3, r0
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d001      	beq.n	800d134 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d130:	f7f4 f9e6 	bl	8001500 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d134:	4806      	ldr	r0, [pc, #24]	@ (800d150 <MX_USB_DEVICE_Init+0x58>)
 800d136:	f7fe fd19 	bl	800bb6c <USBD_Start>
 800d13a:	4603      	mov	r3, r0
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d001      	beq.n	800d144 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d140:	f7f4 f9de 	bl	8001500 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800d144:	f7f7 fde0 	bl	8004d08 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d148:	bf00      	nop
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	240000b0 	.word	0x240000b0
 800d150:	240006b8 	.word	0x240006b8
 800d154:	2400001c 	.word	0x2400001c
 800d158:	2400009c 	.word	0x2400009c

0800d15c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d160:	2200      	movs	r2, #0
 800d162:	4905      	ldr	r1, [pc, #20]	@ (800d178 <CDC_Init_FS+0x1c>)
 800d164:	4805      	ldr	r0, [pc, #20]	@ (800d17c <CDC_Init_FS+0x20>)
 800d166:	f7fe fc25 	bl	800b9b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d16a:	4905      	ldr	r1, [pc, #20]	@ (800d180 <CDC_Init_FS+0x24>)
 800d16c:	4803      	ldr	r0, [pc, #12]	@ (800d17c <CDC_Init_FS+0x20>)
 800d16e:	f7fe fc43 	bl	800b9f8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d172:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d174:	4618      	mov	r0, r3
 800d176:	bd80      	pop	{r7, pc}
 800d178:	24001194 	.word	0x24001194
 800d17c:	240006b8 	.word	0x240006b8
 800d180:	24000994 	.word	0x24000994

0800d184 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d184:	b480      	push	{r7}
 800d186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d188:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr

0800d194 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d194:	b480      	push	{r7}
 800d196:	b083      	sub	sp, #12
 800d198:	af00      	add	r7, sp, #0
 800d19a:	4603      	mov	r3, r0
 800d19c:	6039      	str	r1, [r7, #0]
 800d19e:	71fb      	strb	r3, [r7, #7]
 800d1a0:	4613      	mov	r3, r2
 800d1a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d1a4:	79fb      	ldrb	r3, [r7, #7]
 800d1a6:	2b23      	cmp	r3, #35	@ 0x23
 800d1a8:	d84a      	bhi.n	800d240 <CDC_Control_FS+0xac>
 800d1aa:	a201      	add	r2, pc, #4	@ (adr r2, 800d1b0 <CDC_Control_FS+0x1c>)
 800d1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1b0:	0800d241 	.word	0x0800d241
 800d1b4:	0800d241 	.word	0x0800d241
 800d1b8:	0800d241 	.word	0x0800d241
 800d1bc:	0800d241 	.word	0x0800d241
 800d1c0:	0800d241 	.word	0x0800d241
 800d1c4:	0800d241 	.word	0x0800d241
 800d1c8:	0800d241 	.word	0x0800d241
 800d1cc:	0800d241 	.word	0x0800d241
 800d1d0:	0800d241 	.word	0x0800d241
 800d1d4:	0800d241 	.word	0x0800d241
 800d1d8:	0800d241 	.word	0x0800d241
 800d1dc:	0800d241 	.word	0x0800d241
 800d1e0:	0800d241 	.word	0x0800d241
 800d1e4:	0800d241 	.word	0x0800d241
 800d1e8:	0800d241 	.word	0x0800d241
 800d1ec:	0800d241 	.word	0x0800d241
 800d1f0:	0800d241 	.word	0x0800d241
 800d1f4:	0800d241 	.word	0x0800d241
 800d1f8:	0800d241 	.word	0x0800d241
 800d1fc:	0800d241 	.word	0x0800d241
 800d200:	0800d241 	.word	0x0800d241
 800d204:	0800d241 	.word	0x0800d241
 800d208:	0800d241 	.word	0x0800d241
 800d20c:	0800d241 	.word	0x0800d241
 800d210:	0800d241 	.word	0x0800d241
 800d214:	0800d241 	.word	0x0800d241
 800d218:	0800d241 	.word	0x0800d241
 800d21c:	0800d241 	.word	0x0800d241
 800d220:	0800d241 	.word	0x0800d241
 800d224:	0800d241 	.word	0x0800d241
 800d228:	0800d241 	.word	0x0800d241
 800d22c:	0800d241 	.word	0x0800d241
 800d230:	0800d241 	.word	0x0800d241
 800d234:	0800d241 	.word	0x0800d241
 800d238:	0800d241 	.word	0x0800d241
 800d23c:	0800d241 	.word	0x0800d241
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d240:	bf00      	nop
  }

  return (USBD_OK);
 800d242:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d244:	4618      	mov	r0, r3
 800d246:	370c      	adds	r7, #12
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr

0800d250 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b082      	sub	sp, #8
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d25a:	6879      	ldr	r1, [r7, #4]
 800d25c:	4805      	ldr	r0, [pc, #20]	@ (800d274 <CDC_Receive_FS+0x24>)
 800d25e:	f7fe fbcb 	bl	800b9f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d262:	4804      	ldr	r0, [pc, #16]	@ (800d274 <CDC_Receive_FS+0x24>)
 800d264:	f7fe fbe6 	bl	800ba34 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d268:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	3708      	adds	r7, #8
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop
 800d274:	240006b8 	.word	0x240006b8

0800d278 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d278:	b480      	push	{r7}
 800d27a:	b087      	sub	sp, #28
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	4613      	mov	r3, r2
 800d284:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d286:	2300      	movs	r3, #0
 800d288:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d28a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d28e:	4618      	mov	r0, r3
 800d290:	371c      	adds	r7, #28
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr
	...

0800d29c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	6039      	str	r1, [r7, #0]
 800d2a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	2212      	movs	r2, #18
 800d2ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d2ae:	4b03      	ldr	r3, [pc, #12]	@ (800d2bc <USBD_FS_DeviceDescriptor+0x20>)
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	370c      	adds	r7, #12
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ba:	4770      	bx	lr
 800d2bc:	240000d0 	.word	0x240000d0

0800d2c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b083      	sub	sp, #12
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	6039      	str	r1, [r7, #0]
 800d2ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	2204      	movs	r2, #4
 800d2d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d2d2:	4b03      	ldr	r3, [pc, #12]	@ (800d2e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	370c      	adds	r7, #12
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr
 800d2e0:	240000e4 	.word	0x240000e4

0800d2e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	6039      	str	r1, [r7, #0]
 800d2ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d2f0:	79fb      	ldrb	r3, [r7, #7]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d105      	bne.n	800d302 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d2f6:	683a      	ldr	r2, [r7, #0]
 800d2f8:	4907      	ldr	r1, [pc, #28]	@ (800d318 <USBD_FS_ProductStrDescriptor+0x34>)
 800d2fa:	4808      	ldr	r0, [pc, #32]	@ (800d31c <USBD_FS_ProductStrDescriptor+0x38>)
 800d2fc:	f7ff fe10 	bl	800cf20 <USBD_GetString>
 800d300:	e004      	b.n	800d30c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d302:	683a      	ldr	r2, [r7, #0]
 800d304:	4904      	ldr	r1, [pc, #16]	@ (800d318 <USBD_FS_ProductStrDescriptor+0x34>)
 800d306:	4805      	ldr	r0, [pc, #20]	@ (800d31c <USBD_FS_ProductStrDescriptor+0x38>)
 800d308:	f7ff fe0a 	bl	800cf20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d30c:	4b02      	ldr	r3, [pc, #8]	@ (800d318 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3708      	adds	r7, #8
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	24001994 	.word	0x24001994
 800d31c:	0800db9c 	.word	0x0800db9c

0800d320 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b082      	sub	sp, #8
 800d324:	af00      	add	r7, sp, #0
 800d326:	4603      	mov	r3, r0
 800d328:	6039      	str	r1, [r7, #0]
 800d32a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d32c:	683a      	ldr	r2, [r7, #0]
 800d32e:	4904      	ldr	r1, [pc, #16]	@ (800d340 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d330:	4804      	ldr	r0, [pc, #16]	@ (800d344 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d332:	f7ff fdf5 	bl	800cf20 <USBD_GetString>
  return USBD_StrDesc;
 800d336:	4b02      	ldr	r3, [pc, #8]	@ (800d340 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3708      	adds	r7, #8
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	24001994 	.word	0x24001994
 800d344:	0800dbb4 	.word	0x0800dbb4

0800d348 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b082      	sub	sp, #8
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	4603      	mov	r3, r0
 800d350:	6039      	str	r1, [r7, #0]
 800d352:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	221a      	movs	r2, #26
 800d358:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d35a:	f000 f843 	bl	800d3e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d35e:	4b02      	ldr	r3, [pc, #8]	@ (800d368 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d360:	4618      	mov	r0, r3
 800d362:	3708      	adds	r7, #8
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	240000e8 	.word	0x240000e8

0800d36c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
 800d372:	4603      	mov	r3, r0
 800d374:	6039      	str	r1, [r7, #0]
 800d376:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d378:	79fb      	ldrb	r3, [r7, #7]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d105      	bne.n	800d38a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d37e:	683a      	ldr	r2, [r7, #0]
 800d380:	4907      	ldr	r1, [pc, #28]	@ (800d3a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d382:	4808      	ldr	r0, [pc, #32]	@ (800d3a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d384:	f7ff fdcc 	bl	800cf20 <USBD_GetString>
 800d388:	e004      	b.n	800d394 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d38a:	683a      	ldr	r2, [r7, #0]
 800d38c:	4904      	ldr	r1, [pc, #16]	@ (800d3a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d38e:	4805      	ldr	r0, [pc, #20]	@ (800d3a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d390:	f7ff fdc6 	bl	800cf20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d394:	4b02      	ldr	r3, [pc, #8]	@ (800d3a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d396:	4618      	mov	r0, r3
 800d398:	3708      	adds	r7, #8
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	24001994 	.word	0x24001994
 800d3a4:	0800dbc8 	.word	0x0800dbc8

0800d3a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	6039      	str	r1, [r7, #0]
 800d3b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d3b4:	79fb      	ldrb	r3, [r7, #7]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d105      	bne.n	800d3c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d3ba:	683a      	ldr	r2, [r7, #0]
 800d3bc:	4907      	ldr	r1, [pc, #28]	@ (800d3dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d3be:	4808      	ldr	r0, [pc, #32]	@ (800d3e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d3c0:	f7ff fdae 	bl	800cf20 <USBD_GetString>
 800d3c4:	e004      	b.n	800d3d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d3c6:	683a      	ldr	r2, [r7, #0]
 800d3c8:	4904      	ldr	r1, [pc, #16]	@ (800d3dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d3ca:	4805      	ldr	r0, [pc, #20]	@ (800d3e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d3cc:	f7ff fda8 	bl	800cf20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3d0:	4b02      	ldr	r3, [pc, #8]	@ (800d3dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3708      	adds	r7, #8
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	24001994 	.word	0x24001994
 800d3e0:	0800dbd4 	.word	0x0800dbd4

0800d3e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b084      	sub	sp, #16
 800d3e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d3ea:	4b0f      	ldr	r3, [pc, #60]	@ (800d428 <Get_SerialNum+0x44>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d3f0:	4b0e      	ldr	r3, [pc, #56]	@ (800d42c <Get_SerialNum+0x48>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d3f6:	4b0e      	ldr	r3, [pc, #56]	@ (800d430 <Get_SerialNum+0x4c>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d3fc:	68fa      	ldr	r2, [r7, #12]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	4413      	add	r3, r2
 800d402:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d009      	beq.n	800d41e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d40a:	2208      	movs	r2, #8
 800d40c:	4909      	ldr	r1, [pc, #36]	@ (800d434 <Get_SerialNum+0x50>)
 800d40e:	68f8      	ldr	r0, [r7, #12]
 800d410:	f000 f814 	bl	800d43c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d414:	2204      	movs	r2, #4
 800d416:	4908      	ldr	r1, [pc, #32]	@ (800d438 <Get_SerialNum+0x54>)
 800d418:	68b8      	ldr	r0, [r7, #8]
 800d41a:	f000 f80f 	bl	800d43c <IntToUnicode>
  }
}
 800d41e:	bf00      	nop
 800d420:	3710      	adds	r7, #16
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	1ff1e800 	.word	0x1ff1e800
 800d42c:	1ff1e804 	.word	0x1ff1e804
 800d430:	1ff1e808 	.word	0x1ff1e808
 800d434:	240000ea 	.word	0x240000ea
 800d438:	240000fa 	.word	0x240000fa

0800d43c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b087      	sub	sp, #28
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	4613      	mov	r3, r2
 800d448:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d44a:	2300      	movs	r3, #0
 800d44c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d44e:	2300      	movs	r3, #0
 800d450:	75fb      	strb	r3, [r7, #23]
 800d452:	e027      	b.n	800d4a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	0f1b      	lsrs	r3, r3, #28
 800d458:	2b09      	cmp	r3, #9
 800d45a:	d80b      	bhi.n	800d474 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	0f1b      	lsrs	r3, r3, #28
 800d460:	b2da      	uxtb	r2, r3
 800d462:	7dfb      	ldrb	r3, [r7, #23]
 800d464:	005b      	lsls	r3, r3, #1
 800d466:	4619      	mov	r1, r3
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	440b      	add	r3, r1
 800d46c:	3230      	adds	r2, #48	@ 0x30
 800d46e:	b2d2      	uxtb	r2, r2
 800d470:	701a      	strb	r2, [r3, #0]
 800d472:	e00a      	b.n	800d48a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	0f1b      	lsrs	r3, r3, #28
 800d478:	b2da      	uxtb	r2, r3
 800d47a:	7dfb      	ldrb	r3, [r7, #23]
 800d47c:	005b      	lsls	r3, r3, #1
 800d47e:	4619      	mov	r1, r3
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	440b      	add	r3, r1
 800d484:	3237      	adds	r2, #55	@ 0x37
 800d486:	b2d2      	uxtb	r2, r2
 800d488:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	011b      	lsls	r3, r3, #4
 800d48e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d490:	7dfb      	ldrb	r3, [r7, #23]
 800d492:	005b      	lsls	r3, r3, #1
 800d494:	3301      	adds	r3, #1
 800d496:	68ba      	ldr	r2, [r7, #8]
 800d498:	4413      	add	r3, r2
 800d49a:	2200      	movs	r2, #0
 800d49c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d49e:	7dfb      	ldrb	r3, [r7, #23]
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	75fb      	strb	r3, [r7, #23]
 800d4a4:	7dfa      	ldrb	r2, [r7, #23]
 800d4a6:	79fb      	ldrb	r3, [r7, #7]
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	d3d3      	bcc.n	800d454 <IntToUnicode+0x18>
  }
}
 800d4ac:	bf00      	nop
 800d4ae:	bf00      	nop
 800d4b0:	371c      	adds	r7, #28
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b8:	4770      	bx	lr
	...

0800d4bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b0ba      	sub	sp, #232	@ 0xe8
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	601a      	str	r2, [r3, #0]
 800d4cc:	605a      	str	r2, [r3, #4]
 800d4ce:	609a      	str	r2, [r3, #8]
 800d4d0:	60da      	str	r2, [r3, #12]
 800d4d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d4d4:	f107 0310 	add.w	r3, r7, #16
 800d4d8:	22c0      	movs	r2, #192	@ 0xc0
 800d4da:	2100      	movs	r1, #0
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f000 fb25 	bl	800db2c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	4a2c      	ldr	r2, [pc, #176]	@ (800d598 <HAL_PCD_MspInit+0xdc>)
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	d151      	bne.n	800d590 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d4ec:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800d4f0:	f04f 0300 	mov.w	r3, #0
 800d4f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800d4f8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d4fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d500:	f107 0310 	add.w	r3, r7, #16
 800d504:	4618      	mov	r0, r3
 800d506:	f7f8 fbf5 	bl	8005cf4 <HAL_RCCEx_PeriphCLKConfig>
 800d50a:	4603      	mov	r3, r0
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d001      	beq.n	800d514 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800d510:	f7f3 fff6 	bl	8001500 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800d514:	f7f7 fbf8 	bl	8004d08 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d518:	4b20      	ldr	r3, [pc, #128]	@ (800d59c <HAL_PCD_MspInit+0xe0>)
 800d51a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d51e:	4a1f      	ldr	r2, [pc, #124]	@ (800d59c <HAL_PCD_MspInit+0xe0>)
 800d520:	f043 0301 	orr.w	r3, r3, #1
 800d524:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d528:	4b1c      	ldr	r3, [pc, #112]	@ (800d59c <HAL_PCD_MspInit+0xe0>)
 800d52a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d52e:	f003 0301 	and.w	r3, r3, #1
 800d532:	60fb      	str	r3, [r7, #12]
 800d534:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_D__MCU_Pin|USB_D__MCUA12_Pin;
 800d536:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d53a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d53e:	2302      	movs	r3, #2
 800d540:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d544:	2300      	movs	r3, #0
 800d546:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d54a:	2300      	movs	r3, #0
 800d54c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800d550:	230a      	movs	r3, #10
 800d552:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d556:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800d55a:	4619      	mov	r1, r3
 800d55c:	4810      	ldr	r0, [pc, #64]	@ (800d5a0 <HAL_PCD_MspInit+0xe4>)
 800d55e:	f7f5 f861 	bl	8002624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d562:	4b0e      	ldr	r3, [pc, #56]	@ (800d59c <HAL_PCD_MspInit+0xe0>)
 800d564:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d568:	4a0c      	ldr	r2, [pc, #48]	@ (800d59c <HAL_PCD_MspInit+0xe0>)
 800d56a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d56e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800d572:	4b0a      	ldr	r3, [pc, #40]	@ (800d59c <HAL_PCD_MspInit+0xe0>)
 800d574:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d578:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d57c:	60bb      	str	r3, [r7, #8]
 800d57e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d580:	2200      	movs	r2, #0
 800d582:	2100      	movs	r1, #0
 800d584:	2065      	movs	r0, #101	@ 0x65
 800d586:	f7f4 ffa0 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d58a:	2065      	movs	r0, #101	@ 0x65
 800d58c:	f7f4 ffb7 	bl	80024fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d590:	bf00      	nop
 800d592:	37e8      	adds	r7, #232	@ 0xe8
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}
 800d598:	40080000 	.word	0x40080000
 800d59c:	58024400 	.word	0x58024400
 800d5a0:	58020000 	.word	0x58020000

0800d5a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b082      	sub	sp, #8
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	4610      	mov	r0, r2
 800d5bc:	f7fe fb23 	bl	800bc06 <USBD_LL_SetupStage>
}
 800d5c0:	bf00      	nop
 800d5c2:	3708      	adds	r7, #8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	460b      	mov	r3, r1
 800d5d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d5da:	78fa      	ldrb	r2, [r7, #3]
 800d5dc:	6879      	ldr	r1, [r7, #4]
 800d5de:	4613      	mov	r3, r2
 800d5e0:	00db      	lsls	r3, r3, #3
 800d5e2:	4413      	add	r3, r2
 800d5e4:	009b      	lsls	r3, r3, #2
 800d5e6:	440b      	add	r3, r1
 800d5e8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	78fb      	ldrb	r3, [r7, #3]
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	f7fe fb5d 	bl	800bcb0 <USBD_LL_DataOutStage>
}
 800d5f6:	bf00      	nop
 800d5f8:	3708      	adds	r7, #8
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5fe:	b580      	push	{r7, lr}
 800d600:	b082      	sub	sp, #8
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
 800d606:	460b      	mov	r3, r1
 800d608:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d610:	78fa      	ldrb	r2, [r7, #3]
 800d612:	6879      	ldr	r1, [r7, #4]
 800d614:	4613      	mov	r3, r2
 800d616:	00db      	lsls	r3, r3, #3
 800d618:	4413      	add	r3, r2
 800d61a:	009b      	lsls	r3, r3, #2
 800d61c:	440b      	add	r3, r1
 800d61e:	3320      	adds	r3, #32
 800d620:	681a      	ldr	r2, [r3, #0]
 800d622:	78fb      	ldrb	r3, [r7, #3]
 800d624:	4619      	mov	r1, r3
 800d626:	f7fe fbf6 	bl	800be16 <USBD_LL_DataInStage>
}
 800d62a:	bf00      	nop
 800d62c:	3708      	adds	r7, #8
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}

0800d632 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d632:	b580      	push	{r7, lr}
 800d634:	b082      	sub	sp, #8
 800d636:	af00      	add	r7, sp, #0
 800d638:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d640:	4618      	mov	r0, r3
 800d642:	f7fe fd30 	bl	800c0a6 <USBD_LL_SOF>
}
 800d646:	bf00      	nop
 800d648:	3708      	adds	r7, #8
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}

0800d64e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d64e:	b580      	push	{r7, lr}
 800d650:	b084      	sub	sp, #16
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d656:	2301      	movs	r3, #1
 800d658:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	79db      	ldrb	r3, [r3, #7]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d102      	bne.n	800d668 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d662:	2300      	movs	r3, #0
 800d664:	73fb      	strb	r3, [r7, #15]
 800d666:	e008      	b.n	800d67a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	79db      	ldrb	r3, [r3, #7]
 800d66c:	2b02      	cmp	r3, #2
 800d66e:	d102      	bne.n	800d676 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d670:	2301      	movs	r3, #1
 800d672:	73fb      	strb	r3, [r7, #15]
 800d674:	e001      	b.n	800d67a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d676:	f7f3 ff43 	bl	8001500 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d680:	7bfa      	ldrb	r2, [r7, #15]
 800d682:	4611      	mov	r1, r2
 800d684:	4618      	mov	r0, r3
 800d686:	f7fe fcca 	bl	800c01e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d690:	4618      	mov	r0, r3
 800d692:	f7fe fc72 	bl	800bf7a <USBD_LL_Reset>
}
 800d696:	bf00      	nop
 800d698:	3710      	adds	r7, #16
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}
	...

0800d6a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fe fcc5 	bl	800c03e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	687a      	ldr	r2, [r7, #4]
 800d6c0:	6812      	ldr	r2, [r2, #0]
 800d6c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d6c6:	f043 0301 	orr.w	r3, r3, #1
 800d6ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	7adb      	ldrb	r3, [r3, #11]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d005      	beq.n	800d6e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6d4:	4b04      	ldr	r3, [pc, #16]	@ (800d6e8 <HAL_PCD_SuspendCallback+0x48>)
 800d6d6:	691b      	ldr	r3, [r3, #16]
 800d6d8:	4a03      	ldr	r2, [pc, #12]	@ (800d6e8 <HAL_PCD_SuspendCallback+0x48>)
 800d6da:	f043 0306 	orr.w	r3, r3, #6
 800d6de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d6e0:	bf00      	nop
 800d6e2:	3708      	adds	r7, #8
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}
 800d6e8:	e000ed00 	.word	0xe000ed00

0800d6ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b082      	sub	sp, #8
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f7fe fcbb 	bl	800c076 <USBD_LL_Resume>
}
 800d700:	bf00      	nop
 800d702:	3708      	adds	r7, #8
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	460b      	mov	r3, r1
 800d712:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d71a:	78fa      	ldrb	r2, [r7, #3]
 800d71c:	4611      	mov	r1, r2
 800d71e:	4618      	mov	r0, r3
 800d720:	f7fe fd13 	bl	800c14a <USBD_LL_IsoOUTIncomplete>
}
 800d724:	bf00      	nop
 800d726:	3708      	adds	r7, #8
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b082      	sub	sp, #8
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	460b      	mov	r3, r1
 800d736:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d73e:	78fa      	ldrb	r2, [r7, #3]
 800d740:	4611      	mov	r1, r2
 800d742:	4618      	mov	r0, r3
 800d744:	f7fe fccf 	bl	800c0e6 <USBD_LL_IsoINIncomplete>
}
 800d748:	bf00      	nop
 800d74a:	3708      	adds	r7, #8
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d75e:	4618      	mov	r0, r3
 800d760:	f7fe fd25 	bl	800c1ae <USBD_LL_DevConnected>
}
 800d764:	bf00      	nop
 800d766:	3708      	adds	r7, #8
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b082      	sub	sp, #8
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7fe fd22 	bl	800c1c4 <USBD_LL_DevDisconnected>
}
 800d780:	bf00      	nop
 800d782:	3708      	adds	r7, #8
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d13e      	bne.n	800d816 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d798:	4a21      	ldr	r2, [pc, #132]	@ (800d820 <USBD_LL_Init+0x98>)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	4a1f      	ldr	r2, [pc, #124]	@ (800d820 <USBD_LL_Init+0x98>)
 800d7a4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d7a8:	4b1d      	ldr	r3, [pc, #116]	@ (800d820 <USBD_LL_Init+0x98>)
 800d7aa:	4a1e      	ldr	r2, [pc, #120]	@ (800d824 <USBD_LL_Init+0x9c>)
 800d7ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800d7ae:	4b1c      	ldr	r3, [pc, #112]	@ (800d820 <USBD_LL_Init+0x98>)
 800d7b0:	2209      	movs	r2, #9
 800d7b2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d7b4:	4b1a      	ldr	r3, [pc, #104]	@ (800d820 <USBD_LL_Init+0x98>)
 800d7b6:	2202      	movs	r2, #2
 800d7b8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d7ba:	4b19      	ldr	r3, [pc, #100]	@ (800d820 <USBD_LL_Init+0x98>)
 800d7bc:	2200      	movs	r2, #0
 800d7be:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d7c0:	4b17      	ldr	r3, [pc, #92]	@ (800d820 <USBD_LL_Init+0x98>)
 800d7c2:	2202      	movs	r2, #2
 800d7c4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d7c6:	4b16      	ldr	r3, [pc, #88]	@ (800d820 <USBD_LL_Init+0x98>)
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d7cc:	4b14      	ldr	r3, [pc, #80]	@ (800d820 <USBD_LL_Init+0x98>)
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d7d2:	4b13      	ldr	r3, [pc, #76]	@ (800d820 <USBD_LL_Init+0x98>)
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d7d8:	4b11      	ldr	r3, [pc, #68]	@ (800d820 <USBD_LL_Init+0x98>)
 800d7da:	2200      	movs	r2, #0
 800d7dc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d7de:	4b10      	ldr	r3, [pc, #64]	@ (800d820 <USBD_LL_Init+0x98>)
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d7e4:	4b0e      	ldr	r3, [pc, #56]	@ (800d820 <USBD_LL_Init+0x98>)
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d7ea:	480d      	ldr	r0, [pc, #52]	@ (800d820 <USBD_LL_Init+0x98>)
 800d7ec:	f7f5 ffb2 	bl	8003754 <HAL_PCD_Init>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d001      	beq.n	800d7fa <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800d7f6:	f7f3 fe83 	bl	8001500 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d7fa:	2180      	movs	r1, #128	@ 0x80
 800d7fc:	4808      	ldr	r0, [pc, #32]	@ (800d820 <USBD_LL_Init+0x98>)
 800d7fe:	f7f7 fa08 	bl	8004c12 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d802:	2240      	movs	r2, #64	@ 0x40
 800d804:	2100      	movs	r1, #0
 800d806:	4806      	ldr	r0, [pc, #24]	@ (800d820 <USBD_LL_Init+0x98>)
 800d808:	f7f7 f9bc 	bl	8004b84 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d80c:	2280      	movs	r2, #128	@ 0x80
 800d80e:	2101      	movs	r1, #1
 800d810:	4803      	ldr	r0, [pc, #12]	@ (800d820 <USBD_LL_Init+0x98>)
 800d812:	f7f7 f9b7 	bl	8004b84 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800d816:	2300      	movs	r3, #0
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3708      	adds	r7, #8
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	24001b94 	.word	0x24001b94
 800d824:	40080000 	.word	0x40080000

0800d828 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d830:	2300      	movs	r3, #0
 800d832:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d834:	2300      	movs	r3, #0
 800d836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d83e:	4618      	mov	r0, r3
 800d840:	f7f6 f894 	bl	800396c <HAL_PCD_Start>
 800d844:	4603      	mov	r3, r0
 800d846:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d848:	7bfb      	ldrb	r3, [r7, #15]
 800d84a:	4618      	mov	r0, r3
 800d84c:	f000 f942 	bl	800dad4 <USBD_Get_USB_Status>
 800d850:	4603      	mov	r3, r0
 800d852:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d854:	7bbb      	ldrb	r3, [r7, #14]
}
 800d856:	4618      	mov	r0, r3
 800d858:	3710      	adds	r7, #16
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}

0800d85e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d85e:	b580      	push	{r7, lr}
 800d860:	b084      	sub	sp, #16
 800d862:	af00      	add	r7, sp, #0
 800d864:	6078      	str	r0, [r7, #4]
 800d866:	4608      	mov	r0, r1
 800d868:	4611      	mov	r1, r2
 800d86a:	461a      	mov	r2, r3
 800d86c:	4603      	mov	r3, r0
 800d86e:	70fb      	strb	r3, [r7, #3]
 800d870:	460b      	mov	r3, r1
 800d872:	70bb      	strb	r3, [r7, #2]
 800d874:	4613      	mov	r3, r2
 800d876:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d878:	2300      	movs	r3, #0
 800d87a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d87c:	2300      	movs	r3, #0
 800d87e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d886:	78bb      	ldrb	r3, [r7, #2]
 800d888:	883a      	ldrh	r2, [r7, #0]
 800d88a:	78f9      	ldrb	r1, [r7, #3]
 800d88c:	f7f6 fd95 	bl	80043ba <HAL_PCD_EP_Open>
 800d890:	4603      	mov	r3, r0
 800d892:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d894:	7bfb      	ldrb	r3, [r7, #15]
 800d896:	4618      	mov	r0, r3
 800d898:	f000 f91c 	bl	800dad4 <USBD_Get_USB_Status>
 800d89c:	4603      	mov	r3, r0
 800d89e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8aa:	b580      	push	{r7, lr}
 800d8ac:	b084      	sub	sp, #16
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8c4:	78fa      	ldrb	r2, [r7, #3]
 800d8c6:	4611      	mov	r1, r2
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f7f6 fde0 	bl	800448e <HAL_PCD_EP_Close>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8d2:	7bfb      	ldrb	r3, [r7, #15]
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f000 f8fd 	bl	800dad4 <USBD_Get_USB_Status>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8de:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3710      	adds	r7, #16
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d902:	78fa      	ldrb	r2, [r7, #3]
 800d904:	4611      	mov	r1, r2
 800d906:	4618      	mov	r0, r3
 800d908:	f7f6 fe98 	bl	800463c <HAL_PCD_EP_SetStall>
 800d90c:	4603      	mov	r3, r0
 800d90e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d910:	7bfb      	ldrb	r3, [r7, #15]
 800d912:	4618      	mov	r0, r3
 800d914:	f000 f8de 	bl	800dad4 <USBD_Get_USB_Status>
 800d918:	4603      	mov	r3, r0
 800d91a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d91c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3710      	adds	r7, #16
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}

0800d926 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d926:	b580      	push	{r7, lr}
 800d928:	b084      	sub	sp, #16
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	6078      	str	r0, [r7, #4]
 800d92e:	460b      	mov	r3, r1
 800d930:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d932:	2300      	movs	r3, #0
 800d934:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d936:	2300      	movs	r3, #0
 800d938:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d940:	78fa      	ldrb	r2, [r7, #3]
 800d942:	4611      	mov	r1, r2
 800d944:	4618      	mov	r0, r3
 800d946:	f7f6 fedc 	bl	8004702 <HAL_PCD_EP_ClrStall>
 800d94a:	4603      	mov	r3, r0
 800d94c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d94e:	7bfb      	ldrb	r3, [r7, #15]
 800d950:	4618      	mov	r0, r3
 800d952:	f000 f8bf 	bl	800dad4 <USBD_Get_USB_Status>
 800d956:	4603      	mov	r3, r0
 800d958:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d95a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	3710      	adds	r7, #16
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d964:	b480      	push	{r7}
 800d966:	b085      	sub	sp, #20
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	460b      	mov	r3, r1
 800d96e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d976:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d978:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	da0b      	bge.n	800d998 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d980:	78fb      	ldrb	r3, [r7, #3]
 800d982:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d986:	68f9      	ldr	r1, [r7, #12]
 800d988:	4613      	mov	r3, r2
 800d98a:	00db      	lsls	r3, r3, #3
 800d98c:	4413      	add	r3, r2
 800d98e:	009b      	lsls	r3, r3, #2
 800d990:	440b      	add	r3, r1
 800d992:	3316      	adds	r3, #22
 800d994:	781b      	ldrb	r3, [r3, #0]
 800d996:	e00b      	b.n	800d9b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d998:	78fb      	ldrb	r3, [r7, #3]
 800d99a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d99e:	68f9      	ldr	r1, [r7, #12]
 800d9a0:	4613      	mov	r3, r2
 800d9a2:	00db      	lsls	r3, r3, #3
 800d9a4:	4413      	add	r3, r2
 800d9a6:	009b      	lsls	r3, r3, #2
 800d9a8:	440b      	add	r3, r1
 800d9aa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d9ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3714      	adds	r7, #20
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ba:	4770      	bx	lr

0800d9bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b084      	sub	sp, #16
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d9d6:	78fa      	ldrb	r2, [r7, #3]
 800d9d8:	4611      	mov	r1, r2
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f7f6 fcc9 	bl	8004372 <HAL_PCD_SetAddress>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9e4:	7bfb      	ldrb	r3, [r7, #15]
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f000 f874 	bl	800dad4 <USBD_Get_USB_Status>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3710      	adds	r7, #16
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}

0800d9fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d9fa:	b580      	push	{r7, lr}
 800d9fc:	b086      	sub	sp, #24
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	60f8      	str	r0, [r7, #12]
 800da02:	607a      	str	r2, [r7, #4]
 800da04:	603b      	str	r3, [r7, #0]
 800da06:	460b      	mov	r3, r1
 800da08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da0a:	2300      	movs	r3, #0
 800da0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da0e:	2300      	movs	r3, #0
 800da10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800da18:	7af9      	ldrb	r1, [r7, #11]
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	687a      	ldr	r2, [r7, #4]
 800da1e:	f7f6 fdd3 	bl	80045c8 <HAL_PCD_EP_Transmit>
 800da22:	4603      	mov	r3, r0
 800da24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da26:	7dfb      	ldrb	r3, [r7, #23]
 800da28:	4618      	mov	r0, r3
 800da2a:	f000 f853 	bl	800dad4 <USBD_Get_USB_Status>
 800da2e:	4603      	mov	r3, r0
 800da30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da32:	7dbb      	ldrb	r3, [r7, #22]
}
 800da34:	4618      	mov	r0, r3
 800da36:	3718      	adds	r7, #24
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b086      	sub	sp, #24
 800da40:	af00      	add	r7, sp, #0
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	607a      	str	r2, [r7, #4]
 800da46:	603b      	str	r3, [r7, #0]
 800da48:	460b      	mov	r3, r1
 800da4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da4c:	2300      	movs	r3, #0
 800da4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da50:	2300      	movs	r3, #0
 800da52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800da5a:	7af9      	ldrb	r1, [r7, #11]
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	f7f6 fd5f 	bl	8004522 <HAL_PCD_EP_Receive>
 800da64:	4603      	mov	r3, r0
 800da66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da68:	7dfb      	ldrb	r3, [r7, #23]
 800da6a:	4618      	mov	r0, r3
 800da6c:	f000 f832 	bl	800dad4 <USBD_Get_USB_Status>
 800da70:	4603      	mov	r3, r0
 800da72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da74:	7dbb      	ldrb	r3, [r7, #22]
}
 800da76:	4618      	mov	r0, r3
 800da78:	3718      	adds	r7, #24
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}

0800da7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da7e:	b580      	push	{r7, lr}
 800da80:	b082      	sub	sp, #8
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
 800da86:	460b      	mov	r3, r1
 800da88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da90:	78fa      	ldrb	r2, [r7, #3]
 800da92:	4611      	mov	r1, r2
 800da94:	4618      	mov	r0, r3
 800da96:	f7f6 fd7f 	bl	8004598 <HAL_PCD_EP_GetRxCount>
 800da9a:	4603      	mov	r3, r0
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3708      	adds	r7, #8
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800daa4:	b480      	push	{r7}
 800daa6:	b083      	sub	sp, #12
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800daac:	4b03      	ldr	r3, [pc, #12]	@ (800dabc <USBD_static_malloc+0x18>)
}
 800daae:	4618      	mov	r0, r3
 800dab0:	370c      	adds	r7, #12
 800dab2:	46bd      	mov	sp, r7
 800dab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab8:	4770      	bx	lr
 800daba:	bf00      	nop
 800dabc:	24002078 	.word	0x24002078

0800dac0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b083      	sub	sp, #12
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800dac8:	bf00      	nop
 800daca:	370c      	adds	r7, #12
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr

0800dad4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dad4:	b480      	push	{r7}
 800dad6:	b085      	sub	sp, #20
 800dad8:	af00      	add	r7, sp, #0
 800dada:	4603      	mov	r3, r0
 800dadc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dade:	2300      	movs	r3, #0
 800dae0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dae2:	79fb      	ldrb	r3, [r7, #7]
 800dae4:	2b03      	cmp	r3, #3
 800dae6:	d817      	bhi.n	800db18 <USBD_Get_USB_Status+0x44>
 800dae8:	a201      	add	r2, pc, #4	@ (adr r2, 800daf0 <USBD_Get_USB_Status+0x1c>)
 800daea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daee:	bf00      	nop
 800daf0:	0800db01 	.word	0x0800db01
 800daf4:	0800db07 	.word	0x0800db07
 800daf8:	0800db0d 	.word	0x0800db0d
 800dafc:	0800db13 	.word	0x0800db13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800db00:	2300      	movs	r3, #0
 800db02:	73fb      	strb	r3, [r7, #15]
    break;
 800db04:	e00b      	b.n	800db1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db06:	2303      	movs	r3, #3
 800db08:	73fb      	strb	r3, [r7, #15]
    break;
 800db0a:	e008      	b.n	800db1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db0c:	2301      	movs	r3, #1
 800db0e:	73fb      	strb	r3, [r7, #15]
    break;
 800db10:	e005      	b.n	800db1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db12:	2303      	movs	r3, #3
 800db14:	73fb      	strb	r3, [r7, #15]
    break;
 800db16:	e002      	b.n	800db1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800db18:	2303      	movs	r3, #3
 800db1a:	73fb      	strb	r3, [r7, #15]
    break;
 800db1c:	bf00      	nop
  }
  return usb_status;
 800db1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db20:	4618      	mov	r0, r3
 800db22:	3714      	adds	r7, #20
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr

0800db2c <memset>:
 800db2c:	4402      	add	r2, r0
 800db2e:	4603      	mov	r3, r0
 800db30:	4293      	cmp	r3, r2
 800db32:	d100      	bne.n	800db36 <memset+0xa>
 800db34:	4770      	bx	lr
 800db36:	f803 1b01 	strb.w	r1, [r3], #1
 800db3a:	e7f9      	b.n	800db30 <memset+0x4>

0800db3c <__libc_init_array>:
 800db3c:	b570      	push	{r4, r5, r6, lr}
 800db3e:	4d0d      	ldr	r5, [pc, #52]	@ (800db74 <__libc_init_array+0x38>)
 800db40:	4c0d      	ldr	r4, [pc, #52]	@ (800db78 <__libc_init_array+0x3c>)
 800db42:	1b64      	subs	r4, r4, r5
 800db44:	10a4      	asrs	r4, r4, #2
 800db46:	2600      	movs	r6, #0
 800db48:	42a6      	cmp	r6, r4
 800db4a:	d109      	bne.n	800db60 <__libc_init_array+0x24>
 800db4c:	4d0b      	ldr	r5, [pc, #44]	@ (800db7c <__libc_init_array+0x40>)
 800db4e:	4c0c      	ldr	r4, [pc, #48]	@ (800db80 <__libc_init_array+0x44>)
 800db50:	f000 f818 	bl	800db84 <_init>
 800db54:	1b64      	subs	r4, r4, r5
 800db56:	10a4      	asrs	r4, r4, #2
 800db58:	2600      	movs	r6, #0
 800db5a:	42a6      	cmp	r6, r4
 800db5c:	d105      	bne.n	800db6a <__libc_init_array+0x2e>
 800db5e:	bd70      	pop	{r4, r5, r6, pc}
 800db60:	f855 3b04 	ldr.w	r3, [r5], #4
 800db64:	4798      	blx	r3
 800db66:	3601      	adds	r6, #1
 800db68:	e7ee      	b.n	800db48 <__libc_init_array+0xc>
 800db6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800db6e:	4798      	blx	r3
 800db70:	3601      	adds	r6, #1
 800db72:	e7f2      	b.n	800db5a <__libc_init_array+0x1e>
 800db74:	0800dc24 	.word	0x0800dc24
 800db78:	0800dc24 	.word	0x0800dc24
 800db7c:	0800dc24 	.word	0x0800dc24
 800db80:	0800dc28 	.word	0x0800dc28

0800db84 <_init>:
 800db84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db86:	bf00      	nop
 800db88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db8a:	bc08      	pop	{r3}
 800db8c:	469e      	mov	lr, r3
 800db8e:	4770      	bx	lr

0800db90 <_fini>:
 800db90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db92:	bf00      	nop
 800db94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db96:	bc08      	pop	{r3}
 800db98:	469e      	mov	lr, r3
 800db9a:	4770      	bx	lr
