
NucleoTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075ec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011d0  080077bc  080077bc  000087bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800898c  0800898c  0000a19c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800898c  0800898c  0000998c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008994  08008994  0000a19c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008994  08008994  00009994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008998  08008998  00009998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800899c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000005c  080089f8  0000a05c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000fc  08008a98  0000a0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000d6c  2000019c  08008b38  0000a19c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000f08  08008b38  0000af08  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000a19c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b90f  00000000  00000000  0000a1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003519  00000000  00000000  00025adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001710  00000000  00000000  00028ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001203  00000000  00000000  0002a708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000290c4  00000000  00000000  0002b90b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001cc7d  00000000  00000000  000549cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fac6b  00000000  00000000  0007164c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0016c2b7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006834  00000000  00000000  0016c2fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000080  00000000  00000000  00172b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000019c 	.word	0x2000019c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080077a4 	.word	0x080077a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001a0 	.word	0x200001a0
 800020c:	080077a4 	.word	0x080077a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <customInit>:
uint8_t controlMode = 0;			// ControlMode selection. 0: Off, 1: Position, 2: Speed
uint8_t ledSelect = 0;				// Just iteratively toggles 3 different LEDs
int16_t prevRPM = 0;
uint8_t slowdown = 0;				// Set true if control mode is switched from speed, slows down calmly (maybe)

void customInit(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	//HAL_UART_Receive_IT(&huart2, tempData, 1);
	__HAL_TIM_SET_COUNTER(&htim4, BASE);				// Encoder starts in middle and above/below middle is positive/negative speed
 80005e0:	4b0e      	ldr	r3, [pc, #56]	@ (800061c <customInit+0x40>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80005e8:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);		// User encoder
 80005ea:	213c      	movs	r1, #60	@ 0x3c
 80005ec:	480b      	ldr	r0, [pc, #44]	@ (800061c <customInit+0x40>)
 80005ee:	f004 fe7f 	bl	80052f0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);		// Motor encoder
 80005f2:	213c      	movs	r1, #60	@ 0x3c
 80005f4:	480a      	ldr	r0, [pc, #40]	@ (8000620 <customInit+0x44>)
 80005f6:	f004 fe7b 	bl	80052f0 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Init(&htim3);							// Pulse output
 80005fa:	480a      	ldr	r0, [pc, #40]	@ (8000624 <customInit+0x48>)
 80005fc:	f004 fd70 	bl	80050e0 <HAL_TIM_PWM_Init>
	//__HAL_RCC_TIM3_CLK_ENABLE();
	//HAL_TIM_Base_Start(&htim3);
	oledCheck();
 8000600:	f000 f9d8 	bl	80009b4 <oledCheck>
	timer = HAL_GetTick();
 8000604:	f001 fd0e 	bl	8002024 <HAL_GetTick>
 8000608:	4603      	mov	r3, r0
 800060a:	4a07      	ldr	r2, [pc, #28]	@ (8000628 <customInit+0x4c>)
 800060c:	6013      	str	r3, [r2, #0]
	btnTimer = HAL_GetTick();
 800060e:	f001 fd09 	bl	8002024 <HAL_GetTick>
 8000612:	4603      	mov	r3, r0
 8000614:	4a05      	ldr	r2, [pc, #20]	@ (800062c <customInit+0x50>)
 8000616:	6013      	str	r3, [r2, #0]
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	200003f4 	.word	0x200003f4
 8000620:	2000035c 	.word	0x2000035c
 8000624:	200003a8 	.word	0x200003a8
 8000628:	200001bc 	.word	0x200001bc
 800062c:	200001c0 	.word	0x200001c0

08000630 <customLoop>:

void customLoop(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	@ 0x28
 8000634:	af02      	add	r7, sp, #8

			tempData[0] = 'c';		// Change tempData from \n
			bufIdx = 0;
		}*/

		if (HAL_GetTick()-timer > 500) {
 8000636:	f001 fcf5 	bl	8002024 <HAL_GetTick>
 800063a:	4602      	mov	r2, r0
 800063c:	4b82      	ldr	r3, [pc, #520]	@ (8000848 <customLoop+0x218>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000646:	d9f6      	bls.n	8000636 <customLoop+0x6>
				HAL_GPIO_TogglePin(GPIOB,LD3_Pin);
				ledSelect = 0;
				break;
			}
			*/
			int32_t encoder_count = __HAL_TIM_GET_COUNTER(&htim4);
 8000648:	4b80      	ldr	r3, [pc, #512]	@ (800084c <customLoop+0x21c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800064e:	61bb      	str	r3, [r7, #24]
			int32_t motorEncoder_count = __HAL_TIM_GET_COUNTER(&htim1);
 8000650:	4b7f      	ldr	r3, [pc, #508]	@ (8000850 <customLoop+0x220>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000656:	617b      	str	r3, [r7, #20]
			if (oledStatus) {
 8000658:	4b7e      	ldr	r3, [pc, #504]	@ (8000854 <customLoop+0x224>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d006      	beq.n	800066e <customLoop+0x3e>
				ssd1306_Fill(Black);
 8000660:	2000      	movs	r0, #0
 8000662:	f001 fa9f 	bl	8001ba4 <ssd1306_Fill>
				ssd1306_SetCursor(2, 0);
 8000666:	2100      	movs	r1, #0
 8000668:	2002      	movs	r0, #2
 800066a:	f001 fbe5 	bl	8001e38 <ssd1306_SetCursor>
			}
			//HAL_GPIO_WritePin(GPIOB,LD1_Pin, GPIO_PIN_SET);
			switch (controlMode) {
 800066e:	4b7a      	ldr	r3, [pc, #488]	@ (8000858 <customLoop+0x228>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b02      	cmp	r3, #2
 8000674:	d022      	beq.n	80006bc <customLoop+0x8c>
 8000676:	2b02      	cmp	r3, #2
 8000678:	f300 80df 	bgt.w	800083a <customLoop+0x20a>
 800067c:	2b00      	cmp	r3, #0
 800067e:	f000 80d9 	beq.w	8000834 <customLoop+0x204>
 8000682:	2b01      	cmp	r3, #1
 8000684:	f040 80d9 	bne.w	800083a <customLoop+0x20a>
			case 0:
				break;
			case 1:		// Position mode
				if (prevRPM == 0 && HAL_GPIO_ReadPin(SigIn1_GPIO_Port, SigIn1_Pin) == GPIO_PIN_RESET) {
 8000688:	4b74      	ldr	r3, [pc, #464]	@ (800085c <customLoop+0x22c>)
 800068a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d110      	bne.n	80006b4 <customLoop+0x84>
 8000692:	2101      	movs	r1, #1
 8000694:	4872      	ldr	r0, [pc, #456]	@ (8000860 <customLoop+0x230>)
 8000696:	f002 fb01 	bl	8002c9c <HAL_GPIO_ReadPin>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d109      	bne.n	80006b4 <customLoop+0x84>
					HAL_GPIO_WritePin(SigIn1_GPIO_Port, SigIn1_Pin, GPIO_PIN_SET);		// Disable motor
 80006a0:	2201      	movs	r2, #1
 80006a2:	2101      	movs	r1, #1
 80006a4:	486e      	ldr	r0, [pc, #440]	@ (8000860 <customLoop+0x230>)
 80006a6:	f002 fb11 	bl	8002ccc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB,LD1_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2101      	movs	r1, #1
 80006ae:	486d      	ldr	r0, [pc, #436]	@ (8000864 <customLoop+0x234>)
 80006b0:	f002 fb0c 	bl	8002ccc <HAL_GPIO_WritePin>
				}
				setMotorSpeed(0);
 80006b4:	2000      	movs	r0, #0
 80006b6:	f000 f8e3 	bl	8000880 <setMotorSpeed>
				break;
 80006ba:	e0be      	b.n	800083a <customLoop+0x20a>
			case 2:		// Speed mode
				if (HAL_GPIO_ReadPin(SigIn1_GPIO_Port, SigIn1_Pin) == GPIO_PIN_SET) {
 80006bc:	2101      	movs	r1, #1
 80006be:	4868      	ldr	r0, [pc, #416]	@ (8000860 <customLoop+0x230>)
 80006c0:	f002 faec 	bl	8002c9c <HAL_GPIO_ReadPin>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d109      	bne.n	80006de <customLoop+0xae>
					HAL_GPIO_WritePin(SigIn1_GPIO_Port, SigIn1_Pin, GPIO_PIN_RESET);	// Enable motor
 80006ca:	2200      	movs	r2, #0
 80006cc:	2101      	movs	r1, #1
 80006ce:	4864      	ldr	r0, [pc, #400]	@ (8000860 <customLoop+0x230>)
 80006d0:	f002 fafc 	bl	8002ccc <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB,LD1_Pin, GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2101      	movs	r1, #1
 80006d8:	4862      	ldr	r0, [pc, #392]	@ (8000864 <customLoop+0x234>)
 80006da:	f002 faf7 	bl	8002ccc <HAL_GPIO_WritePin>
				}

				int16_t rpm = (int16_t)(encoder_count - BASE);
 80006de:	69bb      	ldr	r3, [r7, #24]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	83fb      	strh	r3, [r7, #30]
				if (rpm < -RPMLIMIT) {
 80006ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006ee:	4a5e      	ldr	r2, [pc, #376]	@ (8000868 <customLoop+0x238>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	da08      	bge.n	8000706 <customLoop+0xd6>
					__HAL_TIM_SET_COUNTER(&htim4, BASE-RPMLIMIT);
 80006f4:	4b55      	ldr	r3, [pc, #340]	@ (800084c <customLoop+0x21c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f247 4248 	movw	r2, #29768	@ 0x7448
 80006fc:	625a      	str	r2, [r3, #36]	@ 0x24
					rpm = -RPMLIMIT;
 80006fe:	f24f 4348 	movw	r3, #62536	@ 0xf448
 8000702:	83fb      	strh	r3, [r7, #30]
 8000704:	e00d      	b.n	8000722 <customLoop+0xf2>
				} else if (rpm > RPMLIMIT) {
 8000706:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800070a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800070e:	4293      	cmp	r3, r2
 8000710:	dd07      	ble.n	8000722 <customLoop+0xf2>
					__HAL_TIM_SET_COUNTER(&htim4, BASE+RPMLIMIT);
 8000712:	4b4e      	ldr	r3, [pc, #312]	@ (800084c <customLoop+0x21c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f648 32b8 	movw	r2, #35768	@ 0x8bb8
 800071a:	625a      	str	r2, [r3, #36]	@ 0x24
					rpm = RPMLIMIT;
 800071c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000720:	83fb      	strh	r3, [r7, #30]
				}
				if (HAL_GPIO_ReadPin(SigOut1_GPIO_Port, SigOut1_Pin) == GPIO_PIN_RESET) {	// Check if motor ready
 8000722:	2101      	movs	r1, #1
 8000724:	4851      	ldr	r0, [pc, #324]	@ (800086c <customLoop+0x23c>)
 8000726:	f002 fab9 	bl	8002c9c <HAL_GPIO_ReadPin>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d10a      	bne.n	8000746 <customLoop+0x116>
					HAL_GPIO_WritePin(GPIOB,LD2_Pin, GPIO_PIN_SET);
 8000730:	2201      	movs	r2, #1
 8000732:	2180      	movs	r1, #128	@ 0x80
 8000734:	484b      	ldr	r0, [pc, #300]	@ (8000864 <customLoop+0x234>)
 8000736:	f002 fac9 	bl	8002ccc <HAL_GPIO_WritePin>
					setMotorSpeed(rpm);
 800073a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f89e 	bl	8000880 <setMotorSpeed>
 8000744:	e007      	b.n	8000756 <customLoop+0x126>
				} else {
					HAL_GPIO_WritePin(GPIOB,LD2_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2180      	movs	r1, #128	@ 0x80
 800074a:	4846      	ldr	r0, [pc, #280]	@ (8000864 <customLoop+0x234>)
 800074c:	f002 fabe 	bl	8002ccc <HAL_GPIO_WritePin>
					setMotorSpeed(0);
 8000750:	2000      	movs	r0, #0
 8000752:	f000 f895 	bl	8000880 <setMotorSpeed>
				}

				if (oledStatus) {
 8000756:	4b3f      	ldr	r3, [pc, #252]	@ (8000854 <customLoop+0x224>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d06c      	beq.n	8000838 <customLoop+0x208>
					int len = snprintf(NULL, 0, "Speed[rpm]:");
 800075e:	4a44      	ldr	r2, [pc, #272]	@ (8000870 <customLoop+0x240>)
 8000760:	2100      	movs	r1, #0
 8000762:	2000      	movs	r0, #0
 8000764:	f006 fc18 	bl	8006f98 <sniprintf>
 8000768:	6138      	str	r0, [r7, #16]
					char *line1 = malloc(len + 1);
 800076a:	693b      	ldr	r3, [r7, #16]
 800076c:	3301      	adds	r3, #1
 800076e:	4618      	mov	r0, r3
 8000770:	f006 fb54 	bl	8006e1c <malloc>
 8000774:	4603      	mov	r3, r0
 8000776:	60fb      	str	r3, [r7, #12]
					snprintf(line1, len + 1, "Speed[rpm]:");
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	3301      	adds	r3, #1
 800077c:	4a3c      	ldr	r2, [pc, #240]	@ (8000870 <customLoop+0x240>)
 800077e:	4619      	mov	r1, r3
 8000780:	68f8      	ldr	r0, [r7, #12]
 8000782:	f006 fc09 	bl	8006f98 <sniprintf>
					ssd1306_WriteString(line1, Font_11x18, White);
 8000786:	4b3b      	ldr	r3, [pc, #236]	@ (8000874 <customLoop+0x244>)
 8000788:	2201      	movs	r2, #1
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800078e:	68f8      	ldr	r0, [r7, #12]
 8000790:	f001 fb2c 	bl	8001dec <ssd1306_WriteString>
					free(line1);
 8000794:	68f8      	ldr	r0, [r7, #12]
 8000796:	f006 fb49 	bl	8006e2c <free>

					ssd1306_SetCursor(2, 20);
 800079a:	2114      	movs	r1, #20
 800079c:	2002      	movs	r0, #2
 800079e:	f001 fb4b 	bl	8001e38 <ssd1306_SetCursor>
					len = snprintf(NULL, 0, "%d",rpm);
 80007a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80007a6:	4a34      	ldr	r2, [pc, #208]	@ (8000878 <customLoop+0x248>)
 80007a8:	2100      	movs	r1, #0
 80007aa:	2000      	movs	r0, #0
 80007ac:	f006 fbf4 	bl	8006f98 <sniprintf>
 80007b0:	6138      	str	r0, [r7, #16]
					char *line2 = malloc(len + 1);
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	3301      	adds	r3, #1
 80007b6:	4618      	mov	r0, r3
 80007b8:	f006 fb30 	bl	8006e1c <malloc>
 80007bc:	4603      	mov	r3, r0
 80007be:	60bb      	str	r3, [r7, #8]
					snprintf(line2, len + 1, "%d",rpm);
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4619      	mov	r1, r3
 80007c6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80007ca:	4a2b      	ldr	r2, [pc, #172]	@ (8000878 <customLoop+0x248>)
 80007cc:	68b8      	ldr	r0, [r7, #8]
 80007ce:	f006 fbe3 	bl	8006f98 <sniprintf>
					ssd1306_WriteString(line2, Font_11x18, White);
 80007d2:	4b28      	ldr	r3, [pc, #160]	@ (8000874 <customLoop+0x244>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	9200      	str	r2, [sp, #0]
 80007d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007da:	68b8      	ldr	r0, [r7, #8]
 80007dc:	f001 fb06 	bl	8001dec <ssd1306_WriteString>
					free(line2);
 80007e0:	68b8      	ldr	r0, [r7, #8]
 80007e2:	f006 fb23 	bl	8006e2c <free>

					ssd1306_SetCursor(2, 40);
 80007e6:	2128      	movs	r1, #40	@ 0x28
 80007e8:	2002      	movs	r0, #2
 80007ea:	f001 fb25 	bl	8001e38 <ssd1306_SetCursor>
					len = snprintf(NULL, 0, "Pos: %ld",motorEncoder_count);
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	4a22      	ldr	r2, [pc, #136]	@ (800087c <customLoop+0x24c>)
 80007f2:	2100      	movs	r1, #0
 80007f4:	2000      	movs	r0, #0
 80007f6:	f006 fbcf 	bl	8006f98 <sniprintf>
 80007fa:	6138      	str	r0, [r7, #16]
					char *line3 = malloc(len + 1);
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	3301      	adds	r3, #1
 8000800:	4618      	mov	r0, r3
 8000802:	f006 fb0b 	bl	8006e1c <malloc>
 8000806:	4603      	mov	r3, r0
 8000808:	607b      	str	r3, [r7, #4]
					snprintf(line3, len + 1, "Pos: %ld",motorEncoder_count);
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	3301      	adds	r3, #1
 800080e:	4619      	mov	r1, r3
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	4a1a      	ldr	r2, [pc, #104]	@ (800087c <customLoop+0x24c>)
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f006 fbbf 	bl	8006f98 <sniprintf>
					ssd1306_WriteString(line3, Font_11x18, White);
 800081a:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <customLoop+0x244>)
 800081c:	2201      	movs	r2, #1
 800081e:	9200      	str	r2, [sp, #0]
 8000820:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f001 fae2 	bl	8001dec <ssd1306_WriteString>
					free(line3);
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f006 faff 	bl	8006e2c <free>

					ssd1306_UpdateScreen();
 800082e:	f001 f9d1 	bl	8001bd4 <ssd1306_UpdateScreen>
				}

				break;
 8000832:	e001      	b.n	8000838 <customLoop+0x208>
				break;
 8000834:	bf00      	nop
 8000836:	e000      	b.n	800083a <customLoop+0x20a>
				break;
 8000838:	bf00      	nop
			}
			timer = HAL_GetTick();
 800083a:	f001 fbf3 	bl	8002024 <HAL_GetTick>
 800083e:	4603      	mov	r3, r0
 8000840:	4a01      	ldr	r2, [pc, #4]	@ (8000848 <customLoop+0x218>)
 8000842:	6013      	str	r3, [r2, #0]
		if (HAL_GetTick()-timer > 500) {
 8000844:	e6f7      	b.n	8000636 <customLoop+0x6>
 8000846:	bf00      	nop
 8000848:	200001bc 	.word	0x200001bc
 800084c:	200003f4 	.word	0x200003f4
 8000850:	2000035c 	.word	0x2000035c
 8000854:	200001b8 	.word	0x200001b8
 8000858:	200001c4 	.word	0x200001c4
 800085c:	200001c6 	.word	0x200001c6
 8000860:	40021800 	.word	0x40021800
 8000864:	40020400 	.word	0x40020400
 8000868:	fffff448 	.word	0xfffff448
 800086c:	40020c00 	.word	0x40020c00
 8000870:	080077bc 	.word	0x080077bc
 8000874:	0800854c 	.word	0x0800854c
 8000878:	080077c8 	.word	0x080077c8
 800087c:	080077cc 	.word	0x080077cc

08000880 <setMotorSpeed>:
		}
	}
}

void setMotorSpeed(int16_t rpm) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	80fb      	strh	r3, [r7, #6]
	int32_t ARR;
	int16_t rpmChange = rpm-prevRPM;
 800088a:	88fa      	ldrh	r2, [r7, #6]
 800088c:	4b43      	ldr	r3, [pc, #268]	@ (800099c <setMotorSpeed+0x11c>)
 800088e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000892:	b29b      	uxth	r3, r3
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	b29b      	uxth	r3, r3
 8000898:	817b      	strh	r3, [r7, #10]
	if (abs(rpmChange) > 10) {				// Gradual speed change
 800089a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	bfb8      	it	lt
 80008a2:	425b      	neglt	r3, r3
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	2b0a      	cmp	r3, #10
 80008a8:	d916      	bls.n	80008d8 <setMotorSpeed+0x58>
		if (rpmChange > 0) {
 80008aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	dd07      	ble.n	80008c2 <setMotorSpeed+0x42>
			rpm = prevRPM + 10;
 80008b2:	4b3a      	ldr	r3, [pc, #232]	@ (800099c <setMotorSpeed+0x11c>)
 80008b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	330a      	adds	r3, #10
 80008bc:	b29b      	uxth	r3, r3
 80008be:	80fb      	strh	r3, [r7, #6]
 80008c0:	e00a      	b.n	80008d8 <setMotorSpeed+0x58>
		} else if (rpmChange < 0) {
 80008c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	da06      	bge.n	80008d8 <setMotorSpeed+0x58>
			rpm = prevRPM - 10;
 80008ca:	4b34      	ldr	r3, [pc, #208]	@ (800099c <setMotorSpeed+0x11c>)
 80008cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	3b0a      	subs	r3, #10
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	80fb      	strh	r3, [r7, #6]
		}
	}
	prevRPM = rpm;
 80008d8:	4a30      	ldr	r2, [pc, #192]	@ (800099c <setMotorSpeed+0x11c>)
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	8013      	strh	r3, [r2, #0]

	if (rpm == 0) {
 80008de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d10a      	bne.n	80008fc <setMotorSpeed+0x7c>
		HAL_GPIO_WritePin(GPIOB,LD3_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008ec:	482c      	ldr	r0, [pc, #176]	@ (80009a0 <setMotorSpeed+0x120>)
 80008ee:	f002 f9ed 	bl	8002ccc <HAL_GPIO_WritePin>
		HAL_TIM_OC_Stop(&htim3, TIM_CHANNEL_1);
 80008f2:	2100      	movs	r1, #0
 80008f4:	482b      	ldr	r0, [pc, #172]	@ (80009a4 <setMotorSpeed+0x124>)
 80008f6:	f004 fb73 	bl	8004fe0 <HAL_TIM_OC_Stop>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,ARR/2);
		HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
		//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
	}

}
 80008fa:	e04b      	b.n	8000994 <setMotorSpeed+0x114>
		HAL_GPIO_WritePin(GPIOB,LD3_Pin, GPIO_PIN_SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000902:	4827      	ldr	r0, [pc, #156]	@ (80009a0 <setMotorSpeed+0x120>)
 8000904:	f002 f9e2 	bl	8002ccc <HAL_GPIO_WritePin>
		if (rpm < 0) {
 8000908:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800090c:	2b00      	cmp	r3, #0
 800090e:	da09      	bge.n	8000924 <setMotorSpeed+0xa4>
			rpm = - rpm;
 8000910:	88fb      	ldrh	r3, [r7, #6]
 8000912:	425b      	negs	r3, r3
 8000914:	b29b      	uxth	r3, r3
 8000916:	80fb      	strh	r3, [r7, #6]
			HAL_GPIO_WritePin(Dir_GPIO_Port, Dir_Pin, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	2104      	movs	r1, #4
 800091c:	4822      	ldr	r0, [pc, #136]	@ (80009a8 <setMotorSpeed+0x128>)
 800091e:	f002 f9d5 	bl	8002ccc <HAL_GPIO_WritePin>
 8000922:	e004      	b.n	800092e <setMotorSpeed+0xae>
			HAL_GPIO_WritePin(Dir_GPIO_Port, Dir_Pin, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	2104      	movs	r1, #4
 8000928:	481f      	ldr	r0, [pc, #124]	@ (80009a8 <setMotorSpeed+0x128>)
 800092a:	f002 f9cf 	bl	8002ccc <HAL_GPIO_WritePin>
		ARR = 42000000/((rpm*25)/3);
 800092e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000932:	4613      	mov	r3, r2
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	4413      	add	r3, r2
 8000938:	009a      	lsls	r2, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	4a1b      	ldr	r2, [pc, #108]	@ (80009ac <setMotorSpeed+0x12c>)
 800093e:	fb82 1203 	smull	r1, r2, r2, r3
 8000942:	17db      	asrs	r3, r3, #31
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	4a1a      	ldr	r2, [pc, #104]	@ (80009b0 <setMotorSpeed+0x130>)
 8000948:	fb92 f3f3 	sdiv	r3, r2, r3
 800094c:	60fb      	str	r3, [r7, #12]
		if (ARR > 65535) {			// Max ARR (min speed)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000954:	db03      	blt.n	800095e <setMotorSpeed+0xde>
			ARR = 65535;
 8000956:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	e006      	b.n	800096c <setMotorSpeed+0xec>
		} else if (ARR < 1680) {	// Min ARR (max speed)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	f5b3 6fd2 	cmp.w	r3, #1680	@ 0x690
 8000964:	da02      	bge.n	800096c <setMotorSpeed+0xec>
			ARR = 1680;
 8000966:	f44f 63d2 	mov.w	r3, #1680	@ 0x690
 800096a:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim3, ARR);
 800096c:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <setMotorSpeed+0x124>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	68fa      	ldr	r2, [r7, #12]
 8000972:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4a0b      	ldr	r2, [pc, #44]	@ (80009a4 <setMotorSpeed+0x124>)
 8000978:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,ARR/2);
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	2b00      	cmp	r3, #0
 800097e:	da00      	bge.n	8000982 <setMotorSpeed+0x102>
 8000980:	3301      	adds	r3, #1
 8000982:	105b      	asrs	r3, r3, #1
 8000984:	461a      	mov	r2, r3
 8000986:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <setMotorSpeed+0x124>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 800098c:	2100      	movs	r1, #0
 800098e:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <setMotorSpeed+0x124>)
 8000990:	f004 fa2c 	bl	8004dec <HAL_TIM_OC_Start>
}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200001c6 	.word	0x200001c6
 80009a0:	40020400 	.word	0x40020400
 80009a4:	200003a8 	.word	0x200003a8
 80009a8:	40021400 	.word	0x40021400
 80009ac:	55555556 	.word	0x55555556
 80009b0:	0280de80 	.word	0x0280de80

080009b4 <oledCheck>:
		if (++bufIdx >= 256) bufIdx = 0;
		HAL_UART_Receive_IT(&huart2, tempData, 1);
	}
}*/

void oledCheck(void) {		// To check if an oled is present
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af02      	add	r7, sp, #8
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 10) == HAL_OK) {
 80009ba:	230a      	movs	r3, #10
 80009bc:	2201      	movs	r2, #1
 80009be:	2178      	movs	r1, #120	@ 0x78
 80009c0:	4813      	ldr	r0, [pc, #76]	@ (8000a10 <oledCheck+0x5c>)
 80009c2:	f002 fb65 	bl	8003090 <HAL_I2C_IsDeviceReady>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d11b      	bne.n	8000a04 <oledCheck+0x50>
		if (!oledStatus) {	// Initializes if oled has been offline
 80009cc:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <oledCheck+0x60>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d113      	bne.n	80009fc <oledCheck+0x48>
			HAL_Delay(200);
 80009d4:	20c8      	movs	r0, #200	@ 0xc8
 80009d6:	f001 fb31 	bl	800203c <HAL_Delay>
			ssd1306_Init();
 80009da:	f001 f879 	bl	8001ad0 <ssd1306_Init>
			ssd1306_Fill(White);
 80009de:	2001      	movs	r0, #1
 80009e0:	f001 f8e0 	bl	8001ba4 <ssd1306_Fill>
			ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
 80009e4:	2300      	movs	r3, #0
 80009e6:	9301      	str	r3, [sp, #4]
 80009e8:	2340      	movs	r3, #64	@ 0x40
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2380      	movs	r3, #128	@ 0x80
 80009ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000a18 <oledCheck+0x64>)
 80009f0:	2100      	movs	r1, #0
 80009f2:	2000      	movs	r0, #0
 80009f4:	f001 fa38 	bl	8001e68 <ssd1306_DrawBitmap>
			ssd1306_UpdateScreen();
 80009f8:	f001 f8ec 	bl	8001bd4 <ssd1306_UpdateScreen>
		}
		oledStatus = 1;
 80009fc:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <oledCheck+0x60>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	701a      	strb	r2, [r3, #0]
	} else {
		oledStatus = 0;
	}
}
 8000a02:	e002      	b.n	8000a0a <oledCheck+0x56>
		oledStatus = 0;
 8000a04:	4b03      	ldr	r3, [pc, #12]	@ (8000a14 <oledCheck+0x60>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	701a      	strb	r2, [r3, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000308 	.word	0x20000308
 8000a14:	200001b8 	.word	0x200001b8
 8000a18:	08008558 	.word	0x08008558

08000a1c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_3) // Check if it's the button
 8000a26:	88fb      	ldrh	r3, [r7, #6]
 8000a28:	2b08      	cmp	r3, #8
 8000a2a:	d122      	bne.n	8000a72 <HAL_GPIO_EXTI_Callback+0x56>
    {
    	if (HAL_GetTick() - btnTimer > 200) {
 8000a2c:	f001 fafa 	bl	8002024 <HAL_GetTick>
 8000a30:	4602      	mov	r2, r0
 8000a32:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <HAL_GPIO_EXTI_Callback+0x60>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	2bc8      	cmp	r3, #200	@ 0xc8
 8000a3a:	d91a      	bls.n	8000a72 <HAL_GPIO_EXTI_Callback+0x56>
    		if (controlMode < 2) {
 8000a3c:	4b10      	ldr	r3, [pc, #64]	@ (8000a80 <HAL_GPIO_EXTI_Callback+0x64>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d806      	bhi.n	8000a52 <HAL_GPIO_EXTI_Callback+0x36>
    			controlMode = 2;
 8000a44:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <HAL_GPIO_EXTI_Callback+0x64>)
 8000a46:	2202      	movs	r2, #2
 8000a48:	701a      	strb	r2, [r3, #0]
    			slowdown = 0;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <HAL_GPIO_EXTI_Callback+0x68>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
 8000a50:	e00a      	b.n	8000a68 <HAL_GPIO_EXTI_Callback+0x4c>
    		} else {					// Switch to position control (currently not implemented, just slows down
    			controlMode = 1;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <HAL_GPIO_EXTI_Callback+0x64>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	701a      	strb	r2, [r3, #0]
    			slowdown = 1;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <HAL_GPIO_EXTI_Callback+0x68>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]
    			__HAL_TIM_SET_COUNTER(&htim4, BASE);
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000a66:	625a      	str	r2, [r3, #36]	@ 0x24
    		}
    		btnTimer = HAL_GetTick();
 8000a68:	f001 fadc 	bl	8002024 <HAL_GetTick>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	4a03      	ldr	r2, [pc, #12]	@ (8000a7c <HAL_GPIO_EXTI_Callback+0x60>)
 8000a70:	6013      	str	r3, [r2, #0]
    	}
    }
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200001c0 	.word	0x200001c0
 8000a80:	200001c4 	.word	0x200001c4
 8000a84:	200001c8 	.word	0x200001c8
 8000a88:	200003f4 	.word	0x200003f4

08000a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a90:	f001 fa76 	bl	8001f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a94:	f000 f818 	bl	8000ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a98:	f000 fad2 	bl	8001040 <MX_GPIO_Init>
  MX_ETH_Init();
 8000a9c:	f000 f87c 	bl	8000b98 <MX_ETH_Init>
  MX_I2C1_Init();
 8000aa0:	f000 f8c8 	bl	8000c34 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000aa4:	f000 fa6e 	bl	8000f84 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000aa8:	f000 fa9c 	bl	8000fe4 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 8000aac:	f000 f902 	bl	8000cb4 <MX_I2C2_Init>
  MX_TIM4_Init();
 8000ab0:	f000 fa12 	bl	8000ed8 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000ab4:	f000 f998 	bl	8000de8 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000ab8:	f000 f93c 	bl	8000d34 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  customInit();
 8000abc:	f7ff fd8e 	bl	80005dc <customInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  customLoop();
 8000ac0:	f7ff fdb6 	bl	8000630 <customLoop>
 8000ac4:	e7fc      	b.n	8000ac0 <main+0x34>
	...

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b094      	sub	sp, #80	@ 0x50
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	f107 0320 	add.w	r3, r7, #32
 8000ad2:	2230      	movs	r2, #48	@ 0x30
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f006 faae 	bl	8007038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000aec:	f002 fffc 	bl	8003ae8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af0:	4b27      	ldr	r3, [pc, #156]	@ (8000b90 <SystemClock_Config+0xc8>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af4:	4a26      	ldr	r2, [pc, #152]	@ (8000b90 <SystemClock_Config+0xc8>)
 8000af6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000afa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afc:	4b24      	ldr	r3, [pc, #144]	@ (8000b90 <SystemClock_Config+0xc8>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b08:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <SystemClock_Config+0xcc>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b10:	4a20      	ldr	r2, [pc, #128]	@ (8000b94 <SystemClock_Config+0xcc>)
 8000b12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b16:	6013      	str	r3, [r2, #0]
 8000b18:	4b1e      	ldr	r3, [pc, #120]	@ (8000b94 <SystemClock_Config+0xcc>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b24:	2301      	movs	r3, #1
 8000b26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b28:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b32:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b3c:	23a8      	movs	r3, #168	@ 0xa8
 8000b3e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b44:	2307      	movs	r3, #7
 8000b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b48:	f107 0320 	add.w	r3, r7, #32
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f002 ffdb 	bl	8003b08 <HAL_RCC_OscConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b58:	f000 fb98 	bl	800128c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5c:	230f      	movs	r3, #15
 8000b5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b60:	2302      	movs	r3, #2
 8000b62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000b64:	2380      	movs	r3, #128	@ 0x80
 8000b66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	2102      	movs	r1, #2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f003 fa69 	bl	8004050 <HAL_RCC_ClockConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b84:	f000 fb82 	bl	800128c <Error_Handler>
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3750      	adds	r7, #80	@ 0x50
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40007000 	.word	0x40007000

08000b98 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c1c <MX_ETH_Init+0x84>)
 8000b9e:	4a20      	ldr	r2, [pc, #128]	@ (8000c20 <MX_ETH_Init+0x88>)
 8000ba0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000ba2:	4b20      	ldr	r3, [pc, #128]	@ (8000c24 <MX_ETH_Init+0x8c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c24 <MX_ETH_Init+0x8c>)
 8000baa:	2280      	movs	r2, #128	@ 0x80
 8000bac:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000bae:	4b1d      	ldr	r3, [pc, #116]	@ (8000c24 <MX_ETH_Init+0x8c>)
 8000bb0:	22e1      	movs	r2, #225	@ 0xe1
 8000bb2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c24 <MX_ETH_Init+0x8c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000bba:	4b1a      	ldr	r3, [pc, #104]	@ (8000c24 <MX_ETH_Init+0x8c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000bc0:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <MX_ETH_Init+0x8c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000bc6:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <MX_ETH_Init+0x84>)
 8000bc8:	4a16      	ldr	r2, [pc, #88]	@ (8000c24 <MX_ETH_Init+0x8c>)
 8000bca:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000bcc:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <MX_ETH_Init+0x84>)
 8000bce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000bd2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <MX_ETH_Init+0x84>)
 8000bd6:	4a14      	ldr	r2, [pc, #80]	@ (8000c28 <MX_ETH_Init+0x90>)
 8000bd8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <MX_ETH_Init+0x84>)
 8000bdc:	4a13      	ldr	r2, [pc, #76]	@ (8000c2c <MX_ETH_Init+0x94>)
 8000bde:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000be0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <MX_ETH_Init+0x84>)
 8000be2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000be6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000be8:	480c      	ldr	r0, [pc, #48]	@ (8000c1c <MX_ETH_Init+0x84>)
 8000bea:	f001 fb5d 	bl	80022a8 <HAL_ETH_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000bf4:	f000 fb4a 	bl	800128c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000bf8:	2238      	movs	r2, #56	@ 0x38
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	480c      	ldr	r0, [pc, #48]	@ (8000c30 <MX_ETH_Init+0x98>)
 8000bfe:	f006 fa1b 	bl	8007038 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <MX_ETH_Init+0x98>)
 8000c04:	2221      	movs	r2, #33	@ 0x21
 8000c06:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_ETH_Init+0x98>)
 8000c0a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000c0e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c10:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <MX_ETH_Init+0x98>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000204 	.word	0x20000204
 8000c20:	40028000 	.word	0x40028000
 8000c24:	200009a8 	.word	0x200009a8
 8000c28:	200000fc 	.word	0x200000fc
 8000c2c:	2000005c 	.word	0x2000005c
 8000c30:	200001cc 	.word	0x200001cc

08000c34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cac <MX_I2C1_Init+0x78>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00A0A3F7;
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c40:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb0 <MX_I2C1_Init+0x7c>)
 8000c42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c44:	4b18      	ldr	r3, [pc, #96]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c50:	4b15      	ldr	r3, [pc, #84]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c56:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c62:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c6e:	480e      	ldr	r0, [pc, #56]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c70:	f002 f85e 	bl	8002d30 <HAL_I2C_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c7a:	f000 fb07 	bl	800128c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4809      	ldr	r0, [pc, #36]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c82:	f002 fd5f 	bl	8003744 <HAL_I2CEx_ConfigAnalogFilter>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c8c:	f000 fafe 	bl	800128c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c90:	2100      	movs	r1, #0
 8000c92:	4805      	ldr	r0, [pc, #20]	@ (8000ca8 <MX_I2C1_Init+0x74>)
 8000c94:	f002 fda1 	bl	80037da <HAL_I2CEx_ConfigDigitalFilter>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c9e:	f000 faf5 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200002b4 	.word	0x200002b4
 8000cac:	40005400 	.word	0x40005400
 8000cb0:	00a0a3f7 	.word	0x00a0a3f7

08000cb4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000cba:	4a1c      	ldr	r2, [pc, #112]	@ (8000d2c <MX_I2C2_Init+0x78>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00A0A3F7;
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d30 <MX_I2C2_Init+0x7c>)
 8000cc2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000cc4:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cca:	4b17      	ldr	r3, [pc, #92]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd0:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cee:	480e      	ldr	r0, [pc, #56]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000cf0:	f002 f81e 	bl	8002d30 <HAL_I2C_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000cfa:	f000 fac7 	bl	800128c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4809      	ldr	r0, [pc, #36]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000d02:	f002 fd1f 	bl	8003744 <HAL_I2CEx_ConfigAnalogFilter>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d0c:	f000 fabe 	bl	800128c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d10:	2100      	movs	r1, #0
 8000d12:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <MX_I2C2_Init+0x74>)
 8000d14:	f002 fd61 	bl	80037da <HAL_I2CEx_ConfigDigitalFilter>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d1e:	f000 fab5 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000308 	.word	0x20000308
 8000d2c:	40005800 	.word	0x40005800
 8000d30:	00a0a3f7 	.word	0x00a0a3f7

08000d34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08c      	sub	sp, #48	@ 0x30
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	2224      	movs	r2, #36	@ 0x24
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f006 f978 	bl	8007038 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d48:	463b      	mov	r3, r7
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d52:	4b23      	ldr	r3, [pc, #140]	@ (8000de0 <MX_TIM1_Init+0xac>)
 8000d54:	4a23      	ldr	r2, [pc, #140]	@ (8000de4 <MX_TIM1_Init+0xb0>)
 8000d56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d58:	4b21      	ldr	r3, [pc, #132]	@ (8000de0 <MX_TIM1_Init+0xac>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5e:	4b20      	ldr	r3, [pc, #128]	@ (8000de0 <MX_TIM1_Init+0xac>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d64:	4b1e      	ldr	r3, [pc, #120]	@ (8000de0 <MX_TIM1_Init+0xac>)
 8000d66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000de0 <MX_TIM1_Init+0xac>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d72:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <MX_TIM1_Init+0xac>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d78:	4b19      	ldr	r3, [pc, #100]	@ (8000de0 <MX_TIM1_Init+0xac>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d86:	2301      	movs	r3, #1
 8000d88:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d96:	2301      	movs	r3, #1
 8000d98:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	480d      	ldr	r0, [pc, #52]	@ (8000de0 <MX_TIM1_Init+0xac>)
 8000daa:	f004 f9fb 	bl	80051a4 <HAL_TIM_Encoder_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000db4:	f000 fa6a 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db8:	2300      	movs	r3, #0
 8000dba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <MX_TIM1_Init+0xac>)
 8000dca:	f005 f82d 	bl	8005e28 <HAL_TIMEx_MasterConfigSynchronization>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000dd4:	f000 fa5a 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	3730      	adds	r7, #48	@ 0x30
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	2000035c 	.word	0x2000035c
 8000de4:	40010000 	.word	0x40010000

08000de8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08e      	sub	sp, #56	@ 0x38
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e08:	463b      	mov	r3, r7
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e1c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ed4 <MX_TIM3_Init+0xec>)
 8000e1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e20:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e26:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e2c:	4b28      	ldr	r3, [pc, #160]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e34:	4b26      	ldr	r3, [pc, #152]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3a:	4b25      	ldr	r3, [pc, #148]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e40:	4823      	ldr	r0, [pc, #140]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e42:	f003 ff1b 	bl	8004c7c <HAL_TIM_Base_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e4c:	f000 fa1e 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e54:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	481c      	ldr	r0, [pc, #112]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e5e:	f004 fb4f 	bl	8005500 <HAL_TIM_ConfigClockSource>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e68:	f000 fa10 	bl	800128c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000e6c:	4818      	ldr	r0, [pc, #96]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e6e:	f003 ff5c 	bl	8004d2a <HAL_TIM_OC_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e78:	f000 fa08 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4811      	ldr	r0, [pc, #68]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000e8c:	f004 ffcc 	bl	8005e28 <HAL_TIMEx_MasterConfigSynchronization>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e96:	f000 f9f9 	bl	800128c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000e9a:	2330      	movs	r3, #48	@ 0x30
 8000e9c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4807      	ldr	r0, [pc, #28]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000eb2:	f004 faab 	bl	800540c <HAL_TIM_OC_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000ebc:	f000 f9e6 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ec0:	4803      	ldr	r0, [pc, #12]	@ (8000ed0 <MX_TIM3_Init+0xe8>)
 8000ec2:	f000 fc03 	bl	80016cc <HAL_TIM_MspPostInit>

}
 8000ec6:	bf00      	nop
 8000ec8:	3738      	adds	r7, #56	@ 0x38
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200003a8 	.word	0x200003a8
 8000ed4:	40000400 	.word	0x40000400

08000ed8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	@ 0x30
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	2224      	movs	r2, #36	@ 0x24
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f006 f8a6 	bl	8007038 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eec:	463b      	mov	r3, r7
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ef6:	4b21      	ldr	r3, [pc, #132]	@ (8000f7c <MX_TIM4_Init+0xa4>)
 8000ef8:	4a21      	ldr	r2, [pc, #132]	@ (8000f80 <MX_TIM4_Init+0xa8>)
 8000efa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000efc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f7c <MX_TIM4_Init+0xa4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f02:	4b1e      	ldr	r3, [pc, #120]	@ (8000f7c <MX_TIM4_Init+0xa4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f08:	4b1c      	ldr	r3, [pc, #112]	@ (8000f7c <MX_TIM4_Init+0xa4>)
 8000f0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f10:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <MX_TIM4_Init+0xa4>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f16:	4b19      	ldr	r3, [pc, #100]	@ (8000f7c <MX_TIM4_Init+0xa4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f20:	2300      	movs	r3, #0
 8000f22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f24:	2301      	movs	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f30:	2300      	movs	r3, #0
 8000f32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f34:	2301      	movs	r3, #1
 8000f36:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	4619      	mov	r1, r3
 8000f46:	480d      	ldr	r0, [pc, #52]	@ (8000f7c <MX_TIM4_Init+0xa4>)
 8000f48:	f004 f92c 	bl	80051a4 <HAL_TIM_Encoder_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000f52:	f000 f99b 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f56:	2300      	movs	r3, #0
 8000f58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	4619      	mov	r1, r3
 8000f62:	4806      	ldr	r0, [pc, #24]	@ (8000f7c <MX_TIM4_Init+0xa4>)
 8000f64:	f004 ff60 	bl	8005e28 <HAL_TIMEx_MasterConfigSynchronization>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000f6e:	f000 f98d 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	3730      	adds	r7, #48	@ 0x30
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200003f4 	.word	0x200003f4
 8000f80:	40000800 	.word	0x40000800

08000f84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f88:	4b14      	ldr	r3, [pc, #80]	@ (8000fdc <MX_USART3_UART_Init+0x58>)
 8000f8a:	4a15      	ldr	r2, [pc, #84]	@ (8000fe0 <MX_USART3_UART_Init+0x5c>)
 8000f8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <MX_USART3_UART_Init+0x58>)
 8000f90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f96:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <MX_USART3_UART_Init+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <MX_USART3_UART_Init+0x58>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <MX_USART3_UART_Init+0x58>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fba:	4b08      	ldr	r3, [pc, #32]	@ (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	@ (8000fdc <MX_USART3_UART_Init+0x58>)
 8000fc8:	f004 ffbc 	bl	8005f44 <HAL_UART_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000fd2:	f000 f95b 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000440 	.word	0x20000440
 8000fe0:	40004800 	.word	0x40004800

08000fe4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	@ (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000fee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff2:	2206      	movs	r2, #6
 8000ff4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	@ (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001002:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001004:	2202      	movs	r2, #2
 8001006:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001008:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800100a:	2201      	movs	r2, #1
 800100c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001014:	4b09      	ldr	r3, [pc, #36]	@ (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800101a:	4b08      	ldr	r3, [pc, #32]	@ (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800101c:	2201      	movs	r2, #1
 800101e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001022:	2200      	movs	r2, #0
 8001024:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	@ (800103c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001028:	f002 fc23 	bl	8003872 <HAL_PCD_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001032:	f000 f92b 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200004c8 	.word	0x200004c8

08001040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08e      	sub	sp, #56	@ 0x38
 8001044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	4b86      	ldr	r3, [pc, #536]	@ (8001270 <MX_GPIO_Init+0x230>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a85      	ldr	r2, [pc, #532]	@ (8001270 <MX_GPIO_Init+0x230>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
 8001062:	4b83      	ldr	r3, [pc, #524]	@ (8001270 <MX_GPIO_Init+0x230>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	623b      	str	r3, [r7, #32]
 800106c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800106e:	4b80      	ldr	r3, [pc, #512]	@ (8001270 <MX_GPIO_Init+0x230>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a7f      	ldr	r2, [pc, #508]	@ (8001270 <MX_GPIO_Init+0x230>)
 8001074:	f043 0320 	orr.w	r3, r3, #32
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b7d      	ldr	r3, [pc, #500]	@ (8001270 <MX_GPIO_Init+0x230>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0320 	and.w	r3, r3, #32
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001086:	4b7a      	ldr	r3, [pc, #488]	@ (8001270 <MX_GPIO_Init+0x230>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a79      	ldr	r2, [pc, #484]	@ (8001270 <MX_GPIO_Init+0x230>)
 800108c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b77      	ldr	r3, [pc, #476]	@ (8001270 <MX_GPIO_Init+0x230>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800109a:	61bb      	str	r3, [r7, #24]
 800109c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	4b74      	ldr	r3, [pc, #464]	@ (8001270 <MX_GPIO_Init+0x230>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	4a73      	ldr	r2, [pc, #460]	@ (8001270 <MX_GPIO_Init+0x230>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010aa:	4b71      	ldr	r3, [pc, #452]	@ (8001270 <MX_GPIO_Init+0x230>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b6:	4b6e      	ldr	r3, [pc, #440]	@ (8001270 <MX_GPIO_Init+0x230>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a6d      	ldr	r2, [pc, #436]	@ (8001270 <MX_GPIO_Init+0x230>)
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b6b      	ldr	r3, [pc, #428]	@ (8001270 <MX_GPIO_Init+0x230>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ce:	4b68      	ldr	r3, [pc, #416]	@ (8001270 <MX_GPIO_Init+0x230>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	4a67      	ldr	r2, [pc, #412]	@ (8001270 <MX_GPIO_Init+0x230>)
 80010d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010da:	4b65      	ldr	r3, [pc, #404]	@ (8001270 <MX_GPIO_Init+0x230>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010e6:	4b62      	ldr	r3, [pc, #392]	@ (8001270 <MX_GPIO_Init+0x230>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a61      	ldr	r2, [pc, #388]	@ (8001270 <MX_GPIO_Init+0x230>)
 80010ec:	f043 0310 	orr.w	r3, r3, #16
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001270 <MX_GPIO_Init+0x230>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0310 	and.w	r3, r3, #16
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fe:	4b5c      	ldr	r3, [pc, #368]	@ (8001270 <MX_GPIO_Init+0x230>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	4a5b      	ldr	r2, [pc, #364]	@ (8001270 <MX_GPIO_Init+0x230>)
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	6313      	str	r3, [r2, #48]	@ 0x30
 800110a:	4b59      	ldr	r3, [pc, #356]	@ (8001270 <MX_GPIO_Init+0x230>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Dir_GPIO_Port, Dir_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	2104      	movs	r1, #4
 800111a:	4856      	ldr	r0, [pc, #344]	@ (8001274 <MX_GPIO_Init+0x234>)
 800111c:	f001 fdd6 	bl	8002ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001126:	4854      	ldr	r0, [pc, #336]	@ (8001278 <MX_GPIO_Init+0x238>)
 8001128:	f001 fdd0 	bl	8002ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SigIn1_GPIO_Port, SigIn1_Pin, GPIO_PIN_SET);
 800112c:	2201      	movs	r2, #1
 800112e:	2101      	movs	r1, #1
 8001130:	4852      	ldr	r0, [pc, #328]	@ (800127c <MX_GPIO_Init+0x23c>)
 8001132:	f001 fdcb 	bl	8002ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2140      	movs	r1, #64	@ 0x40
 800113a:	4850      	ldr	r0, [pc, #320]	@ (800127c <MX_GPIO_Init+0x23c>)
 800113c:	f001 fdc6 	bl	8002ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001140:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001146:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800114a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001154:	4619      	mov	r1, r3
 8001156:	484a      	ldr	r0, [pc, #296]	@ (8001280 <MX_GPIO_Init+0x240>)
 8001158:	f001 fbf4 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : Dir_Pin */
  GPIO_InitStruct.Pin = Dir_Pin;
 800115c:	2304      	movs	r3, #4
 800115e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(Dir_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001170:	4619      	mov	r1, r3
 8001172:	4840      	ldr	r0, [pc, #256]	@ (8001274 <MX_GPIO_Init+0x234>)
 8001174:	f001 fbe6 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001178:	2308      	movs	r3, #8
 800117a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800117c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001180:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001182:	2301      	movs	r3, #1
 8001184:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800118a:	4619      	mov	r1, r3
 800118c:	483d      	ldr	r0, [pc, #244]	@ (8001284 <MX_GPIO_Init+0x244>)
 800118e:	f001 fbd9 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001192:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	2301      	movs	r3, #1
 800119a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011a8:	4619      	mov	r1, r3
 80011aa:	4833      	ldr	r0, [pc, #204]	@ (8001278 <MX_GPIO_Init+0x238>)
 80011ac:	f001 fbca 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pins : SigIn1_Pin USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = SigIn1_Pin|USB_PowerSwitchOn_Pin;
 80011b0:	2341      	movs	r3, #65	@ 0x41
 80011b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c4:	4619      	mov	r1, r3
 80011c6:	482d      	ldr	r0, [pc, #180]	@ (800127c <MX_GPIO_Init+0x23c>)
 80011c8:	f001 fbbc 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80011cc:	2380      	movs	r3, #128	@ 0x80
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011dc:	4619      	mov	r1, r3
 80011de:	4827      	ldr	r0, [pc, #156]	@ (800127c <MX_GPIO_Init+0x23c>)
 80011e0:	f001 fbb0 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : SigOut1_Pin */
  GPIO_InitStruct.Pin = SigOut1_Pin;
 80011e4:	2301      	movs	r3, #1
 80011e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SigOut1_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f4:	4619      	mov	r1, r3
 80011f6:	4824      	ldr	r0, [pc, #144]	@ (8001288 <MX_GPIO_Init+0x248>)
 80011f8:	f001 fba4 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : SigOut2_Pin */
  GPIO_InitStruct.Pin = SigOut2_Pin;
 80011fc:	2302      	movs	r3, #2
 80011fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001200:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001204:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SigOut2_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800120e:	4619      	mov	r1, r3
 8001210:	481d      	ldr	r0, [pc, #116]	@ (8001288 <MX_GPIO_Init+0x248>)
 8001212:	f001 fb97 	bl	8002944 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	2007      	movs	r0, #7
 800121c:	f001 f80d 	bl	800223a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001220:	2007      	movs	r0, #7
 8001222:	f001 f826 	bl	8002272 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	2009      	movs	r0, #9
 800122c:	f001 f805 	bl	800223a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001230:	2009      	movs	r0, #9
 8001232:	f001 f81e 	bl	8002272 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2028      	movs	r0, #40	@ 0x28
 800123c:	f000 fffd 	bl	800223a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001240:	2028      	movs	r0, #40	@ 0x28
 8001242:	f001 f816 	bl	8002272 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;  // PB4 for TIM3_CH1
 8001246:	2310      	movs	r3, #16
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;  // Alternate function mode
 800124a:	2302      	movs	r3, #2
 800124c:	62bb      	str	r3, [r7, #40]	@ 0x28
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	62fb      	str	r3, [r7, #44]	@ 0x2c
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001252:	2302      	movs	r3, #2
 8001254:	633b      	str	r3, [r7, #48]	@ 0x30
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;  // TIM3_CH1 AF mapping
 8001256:	2302      	movs	r3, #2
 8001258:	637b      	str	r3, [r7, #52]	@ 0x34
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	@ (8001278 <MX_GPIO_Init+0x238>)
 8001262:	f001 fb6f 	bl	8002944 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001266:	bf00      	nop
 8001268:	3738      	adds	r7, #56	@ 0x38
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	40021400 	.word	0x40021400
 8001278:	40020400 	.word	0x40020400
 800127c:	40021800 	.word	0x40021800
 8001280:	40020800 	.word	0x40020800
 8001284:	40020000 	.word	0x40020000
 8001288:	40020c00 	.word	0x40020c00

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
}
 8001292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <Error_Handler+0x8>

08001298 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800129e:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <HAL_MspInit+0x44>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a2:	4a0e      	ldr	r2, [pc, #56]	@ (80012dc <HAL_MspInit+0x44>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012aa:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <HAL_MspInit+0x44>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <HAL_MspInit+0x44>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ba:	4a08      	ldr	r2, [pc, #32]	@ (80012dc <HAL_MspInit+0x44>)
 80012bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HAL_MspInit+0x44>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800

080012e0 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08e      	sub	sp, #56	@ 0x38
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001438 <HAL_ETH_MspInit+0x158>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	f040 8096 	bne.w	8001430 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001304:	4b4d      	ldr	r3, [pc, #308]	@ (800143c <HAL_ETH_MspInit+0x15c>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001308:	4a4c      	ldr	r2, [pc, #304]	@ (800143c <HAL_ETH_MspInit+0x15c>)
 800130a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800130e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001310:	4b4a      	ldr	r3, [pc, #296]	@ (800143c <HAL_ETH_MspInit+0x15c>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001318:	623b      	str	r3, [r7, #32]
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	4b47      	ldr	r3, [pc, #284]	@ (800143c <HAL_ETH_MspInit+0x15c>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001320:	4a46      	ldr	r2, [pc, #280]	@ (800143c <HAL_ETH_MspInit+0x15c>)
 8001322:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001326:	6313      	str	r3, [r2, #48]	@ 0x30
 8001328:	4b44      	ldr	r3, [pc, #272]	@ (800143c <HAL_ETH_MspInit+0x15c>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001330:	61fb      	str	r3, [r7, #28]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	4b41      	ldr	r3, [pc, #260]	@ (800143c <HAL_ETH_MspInit+0x15c>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001338:	4a40      	ldr	r2, [pc, #256]	@ (800143c <HAL_ETH_MspInit+0x15c>)
 800133a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800133e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001340:	4b3e      	ldr	r3, [pc, #248]	@ (800143c <HAL_ETH_MspInit+0x15c>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001344:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001348:	61bb      	str	r3, [r7, #24]
 800134a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800134c:	4b3b      	ldr	r3, [pc, #236]	@ (800143c <HAL_ETH_MspInit+0x15c>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001350:	4a3a      	ldr	r2, [pc, #232]	@ (800143c <HAL_ETH_MspInit+0x15c>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6313      	str	r3, [r2, #48]	@ 0x30
 8001358:	4b38      	ldr	r3, [pc, #224]	@ (800143c <HAL_ETH_MspInit+0x15c>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001364:	4b35      	ldr	r3, [pc, #212]	@ (800143c <HAL_ETH_MspInit+0x15c>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001368:	4a34      	ldr	r2, [pc, #208]	@ (800143c <HAL_ETH_MspInit+0x15c>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001370:	4b32      	ldr	r3, [pc, #200]	@ (800143c <HAL_ETH_MspInit+0x15c>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137c:	4b2f      	ldr	r3, [pc, #188]	@ (800143c <HAL_ETH_MspInit+0x15c>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001380:	4a2e      	ldr	r2, [pc, #184]	@ (800143c <HAL_ETH_MspInit+0x15c>)
 8001382:	f043 0302 	orr.w	r3, r3, #2
 8001386:	6313      	str	r3, [r2, #48]	@ 0x30
 8001388:	4b2c      	ldr	r3, [pc, #176]	@ (800143c <HAL_ETH_MspInit+0x15c>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001394:	4b29      	ldr	r3, [pc, #164]	@ (800143c <HAL_ETH_MspInit+0x15c>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001398:	4a28      	ldr	r2, [pc, #160]	@ (800143c <HAL_ETH_MspInit+0x15c>)
 800139a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800139e:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a0:	4b26      	ldr	r3, [pc, #152]	@ (800143c <HAL_ETH_MspInit+0x15c>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80013ac:	2332      	movs	r3, #50	@ 0x32
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013bc:	230b      	movs	r3, #11
 80013be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c4:	4619      	mov	r1, r3
 80013c6:	481e      	ldr	r0, [pc, #120]	@ (8001440 <HAL_ETH_MspInit+0x160>)
 80013c8:	f001 fabc 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013cc:	2386      	movs	r3, #134	@ 0x86
 80013ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013dc:	230b      	movs	r3, #11
 80013de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e4:	4619      	mov	r1, r3
 80013e6:	4817      	ldr	r0, [pc, #92]	@ (8001444 <HAL_ETH_MspInit+0x164>)
 80013e8:	f001 faac 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013fe:	230b      	movs	r3, #11
 8001400:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001406:	4619      	mov	r1, r3
 8001408:	480f      	ldr	r0, [pc, #60]	@ (8001448 <HAL_ETH_MspInit+0x168>)
 800140a:	f001 fa9b 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800140e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001420:	230b      	movs	r3, #11
 8001422:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001424:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001428:	4619      	mov	r1, r3
 800142a:	4808      	ldr	r0, [pc, #32]	@ (800144c <HAL_ETH_MspInit+0x16c>)
 800142c:	f001 fa8a 	bl	8002944 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8001430:	bf00      	nop
 8001432:	3738      	adds	r7, #56	@ 0x38
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40028000 	.word	0x40028000
 800143c:	40023800 	.word	0x40023800
 8001440:	40020800 	.word	0x40020800
 8001444:	40020000 	.word	0x40020000
 8001448:	40020400 	.word	0x40020400
 800144c:	40021800 	.word	0x40021800

08001450 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b0ac      	sub	sp, #176	@ 0xb0
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001468:	f107 0318 	add.w	r3, r7, #24
 800146c:	2284      	movs	r2, #132	@ 0x84
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f005 fde1 	bl	8007038 <memset>
  if(hi2c->Instance==I2C1)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a43      	ldr	r2, [pc, #268]	@ (8001588 <HAL_I2C_MspInit+0x138>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d13d      	bne.n	80014fc <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001480:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001484:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001486:	2300      	movs	r3, #0
 8001488:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800148a:	f107 0318 	add.w	r3, r7, #24
 800148e:	4618      	mov	r0, r3
 8001490:	f003 f804 	bl	800449c <HAL_RCCEx_PeriphCLKConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800149a:	f7ff fef7 	bl	800128c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	4b3b      	ldr	r3, [pc, #236]	@ (800158c <HAL_I2C_MspInit+0x13c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a3a      	ldr	r2, [pc, #232]	@ (800158c <HAL_I2C_MspInit+0x13c>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014aa:	4b38      	ldr	r3, [pc, #224]	@ (800158c <HAL_I2C_MspInit+0x13c>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014be:	2312      	movs	r3, #18
 80014c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014d0:	2304      	movs	r3, #4
 80014d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014da:	4619      	mov	r1, r3
 80014dc:	482c      	ldr	r0, [pc, #176]	@ (8001590 <HAL_I2C_MspInit+0x140>)
 80014de:	f001 fa31 	bl	8002944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014e2:	4b2a      	ldr	r3, [pc, #168]	@ (800158c <HAL_I2C_MspInit+0x13c>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	4a29      	ldr	r2, [pc, #164]	@ (800158c <HAL_I2C_MspInit+0x13c>)
 80014e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ee:	4b27      	ldr	r3, [pc, #156]	@ (800158c <HAL_I2C_MspInit+0x13c>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014fa:	e041      	b.n	8001580 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C2)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a24      	ldr	r2, [pc, #144]	@ (8001594 <HAL_I2C_MspInit+0x144>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d13c      	bne.n	8001580 <HAL_I2C_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001506:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800150a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800150c:	2300      	movs	r3, #0
 800150e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001512:	f107 0318 	add.w	r3, r7, #24
 8001516:	4618      	mov	r0, r3
 8001518:	f002 ffc0 	bl	800449c <HAL_RCCEx_PeriphCLKConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001522:	f7ff feb3 	bl	800128c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001526:	4b19      	ldr	r3, [pc, #100]	@ (800158c <HAL_I2C_MspInit+0x13c>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a18      	ldr	r2, [pc, #96]	@ (800158c <HAL_I2C_MspInit+0x13c>)
 800152c:	f043 0320 	orr.w	r3, r3, #32
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b16      	ldr	r3, [pc, #88]	@ (800158c <HAL_I2C_MspInit+0x13c>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f003 0320 	and.w	r3, r3, #32
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800153e:	2303      	movs	r3, #3
 8001540:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001544:	2312      	movs	r3, #18
 8001546:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001556:	2304      	movs	r3, #4
 8001558:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800155c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001560:	4619      	mov	r1, r3
 8001562:	480d      	ldr	r0, [pc, #52]	@ (8001598 <HAL_I2C_MspInit+0x148>)
 8001564:	f001 f9ee 	bl	8002944 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001568:	4b08      	ldr	r3, [pc, #32]	@ (800158c <HAL_I2C_MspInit+0x13c>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	4a07      	ldr	r2, [pc, #28]	@ (800158c <HAL_I2C_MspInit+0x13c>)
 800156e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001572:	6413      	str	r3, [r2, #64]	@ 0x40
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <HAL_I2C_MspInit+0x13c>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001578:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
}
 8001580:	bf00      	nop
 8001582:	37b0      	adds	r7, #176	@ 0xb0
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40005400 	.word	0x40005400
 800158c:	40023800 	.word	0x40023800
 8001590:	40020400 	.word	0x40020400
 8001594:	40005800 	.word	0x40005800
 8001598:	40021400 	.word	0x40021400

0800159c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08c      	sub	sp, #48	@ 0x30
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a2f      	ldr	r2, [pc, #188]	@ (8001678 <HAL_TIM_Encoder_MspInit+0xdc>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d129      	bne.n	8001612 <HAL_TIM_Encoder_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015be:	4b2f      	ldr	r3, [pc, #188]	@ (800167c <HAL_TIM_Encoder_MspInit+0xe0>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c2:	4a2e      	ldr	r2, [pc, #184]	@ (800167c <HAL_TIM_Encoder_MspInit+0xe0>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ca:	4b2c      	ldr	r3, [pc, #176]	@ (800167c <HAL_TIM_Encoder_MspInit+0xe0>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	61bb      	str	r3, [r7, #24]
 80015d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015d6:	4b29      	ldr	r3, [pc, #164]	@ (800167c <HAL_TIM_Encoder_MspInit+0xe0>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a28      	ldr	r2, [pc, #160]	@ (800167c <HAL_TIM_Encoder_MspInit+0xe0>)
 80015dc:	f043 0310 	orr.w	r3, r3, #16
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b26      	ldr	r3, [pc, #152]	@ (800167c <HAL_TIM_Encoder_MspInit+0xe0>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0310 	and.w	r3, r3, #16
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EncA_Pin|EncB_Pin;
 80015ee:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80015f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001600:	2301      	movs	r3, #1
 8001602:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001604:	f107 031c 	add.w	r3, r7, #28
 8001608:	4619      	mov	r1, r3
 800160a:	481d      	ldr	r0, [pc, #116]	@ (8001680 <HAL_TIM_Encoder_MspInit+0xe4>)
 800160c:	f001 f99a 	bl	8002944 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001610:	e02d      	b.n	800166e <HAL_TIM_Encoder_MspInit+0xd2>
  else if(htim_encoder->Instance==TIM4)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a1b      	ldr	r2, [pc, #108]	@ (8001684 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d128      	bne.n	800166e <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800161c:	4b17      	ldr	r3, [pc, #92]	@ (800167c <HAL_TIM_Encoder_MspInit+0xe0>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001620:	4a16      	ldr	r2, [pc, #88]	@ (800167c <HAL_TIM_Encoder_MspInit+0xe0>)
 8001622:	f043 0304 	orr.w	r3, r3, #4
 8001626:	6413      	str	r3, [r2, #64]	@ 0x40
 8001628:	4b14      	ldr	r3, [pc, #80]	@ (800167c <HAL_TIM_Encoder_MspInit+0xe0>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001634:	4b11      	ldr	r3, [pc, #68]	@ (800167c <HAL_TIM_Encoder_MspInit+0xe0>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001638:	4a10      	ldr	r2, [pc, #64]	@ (800167c <HAL_TIM_Encoder_MspInit+0xe0>)
 800163a:	f043 0308 	orr.w	r3, r3, #8
 800163e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001640:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <HAL_TIM_Encoder_MspInit+0xe0>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PotA_Pin|PotB_Pin;
 800164c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800165e:	2302      	movs	r3, #2
 8001660:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001662:	f107 031c 	add.w	r3, r7, #28
 8001666:	4619      	mov	r1, r3
 8001668:	4807      	ldr	r0, [pc, #28]	@ (8001688 <HAL_TIM_Encoder_MspInit+0xec>)
 800166a:	f001 f96b 	bl	8002944 <HAL_GPIO_Init>
}
 800166e:	bf00      	nop
 8001670:	3730      	adds	r7, #48	@ 0x30
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40010000 	.word	0x40010000
 800167c:	40023800 	.word	0x40023800
 8001680:	40021000 	.word	0x40021000
 8001684:	40000800 	.word	0x40000800
 8001688:	40020c00 	.word	0x40020c00

0800168c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0a      	ldr	r2, [pc, #40]	@ (80016c4 <HAL_TIM_Base_MspInit+0x38>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d10b      	bne.n	80016b6 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800169e:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <HAL_TIM_Base_MspInit+0x3c>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	4a09      	ldr	r2, [pc, #36]	@ (80016c8 <HAL_TIM_Base_MspInit+0x3c>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016aa:	4b07      	ldr	r3, [pc, #28]	@ (80016c8 <HAL_TIM_Base_MspInit+0x3c>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40000400 	.word	0x40000400
 80016c8:	40023800 	.word	0x40023800

080016cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a11      	ldr	r2, [pc, #68]	@ (8001730 <HAL_TIM_MspPostInit+0x64>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d11b      	bne.n	8001726 <HAL_TIM_MspPostInit+0x5a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <HAL_TIM_MspPostInit+0x68>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4a10      	ldr	r2, [pc, #64]	@ (8001734 <HAL_TIM_MspPostInit+0x68>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <HAL_TIM_MspPostInit+0x68>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Pulse_Pin;
 8001706:	2310      	movs	r3, #16
 8001708:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001716:	2302      	movs	r3, #2
 8001718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Pulse_GPIO_Port, &GPIO_InitStruct);
 800171a:	f107 030c 	add.w	r3, r7, #12
 800171e:	4619      	mov	r1, r3
 8001720:	4805      	ldr	r0, [pc, #20]	@ (8001738 <HAL_TIM_MspPostInit+0x6c>)
 8001722:	f001 f90f 	bl	8002944 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001726:	bf00      	nop
 8001728:	3720      	adds	r7, #32
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40000400 	.word	0x40000400
 8001734:	40023800 	.word	0x40023800
 8001738:	40020400 	.word	0x40020400

0800173c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b0aa      	sub	sp, #168	@ 0xa8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	2284      	movs	r2, #132	@ 0x84
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f005 fc6b 	bl	8007038 <memset>
  if(huart->Instance==USART3)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a22      	ldr	r2, [pc, #136]	@ (80017f0 <HAL_UART_MspInit+0xb4>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d13c      	bne.n	80017e6 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800176c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001770:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001772:	2300      	movs	r3, #0
 8001774:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001776:	f107 0310 	add.w	r3, r7, #16
 800177a:	4618      	mov	r0, r3
 800177c:	f002 fe8e 	bl	800449c <HAL_RCCEx_PeriphCLKConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001786:	f7ff fd81 	bl	800128c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800178a:	4b1a      	ldr	r3, [pc, #104]	@ (80017f4 <HAL_UART_MspInit+0xb8>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	4a19      	ldr	r2, [pc, #100]	@ (80017f4 <HAL_UART_MspInit+0xb8>)
 8001790:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001794:	6413      	str	r3, [r2, #64]	@ 0x40
 8001796:	4b17      	ldr	r3, [pc, #92]	@ (80017f4 <HAL_UART_MspInit+0xb8>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a2:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <HAL_UART_MspInit+0xb8>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	4a13      	ldr	r2, [pc, #76]	@ (80017f4 <HAL_UART_MspInit+0xb8>)
 80017a8:	f043 0308 	orr.w	r3, r3, #8
 80017ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ae:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <HAL_UART_MspInit+0xb8>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80017ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ce:	2303      	movs	r3, #3
 80017d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017d4:	2307      	movs	r3, #7
 80017d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017da:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80017de:	4619      	mov	r1, r3
 80017e0:	4805      	ldr	r0, [pc, #20]	@ (80017f8 <HAL_UART_MspInit+0xbc>)
 80017e2:	f001 f8af 	bl	8002944 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80017e6:	bf00      	nop
 80017e8:	37a8      	adds	r7, #168	@ 0xa8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40004800 	.word	0x40004800
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020c00 	.word	0x40020c00

080017fc <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b0ac      	sub	sp, #176	@ 0xb0
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001814:	f107 0318 	add.w	r3, r7, #24
 8001818:	2284      	movs	r2, #132	@ 0x84
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f005 fc0b 	bl	8007038 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800182a:	d159      	bne.n	80018e0 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800182c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001830:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001832:	2300      	movs	r3, #0
 8001834:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001838:	f107 0318 	add.w	r3, r7, #24
 800183c:	4618      	mov	r0, r3
 800183e:	f002 fe2d 	bl	800449c <HAL_RCCEx_PeriphCLKConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001848:	f7ff fd20 	bl	800128c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184c:	4b26      	ldr	r3, [pc, #152]	@ (80018e8 <HAL_PCD_MspInit+0xec>)
 800184e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001850:	4a25      	ldr	r2, [pc, #148]	@ (80018e8 <HAL_PCD_MspInit+0xec>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6313      	str	r3, [r2, #48]	@ 0x30
 8001858:	4b23      	ldr	r3, [pc, #140]	@ (80018e8 <HAL_PCD_MspInit+0xec>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001864:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001868:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800187e:	230a      	movs	r3, #10
 8001880:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001888:	4619      	mov	r1, r3
 800188a:	4818      	ldr	r0, [pc, #96]	@ (80018ec <HAL_PCD_MspInit+0xf0>)
 800188c:	f001 f85a 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001890:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001894:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001898:	2300      	movs	r3, #0
 800189a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018a8:	4619      	mov	r1, r3
 80018aa:	4810      	ldr	r0, [pc, #64]	@ (80018ec <HAL_PCD_MspInit+0xf0>)
 80018ac:	f001 f84a 	bl	8002944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018b0:	4b0d      	ldr	r3, [pc, #52]	@ (80018e8 <HAL_PCD_MspInit+0xec>)
 80018b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018b4:	4a0c      	ldr	r2, [pc, #48]	@ (80018e8 <HAL_PCD_MspInit+0xec>)
 80018b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018ba:	6353      	str	r3, [r2, #52]	@ 0x34
 80018bc:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <HAL_PCD_MspInit+0xec>)
 80018be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4b07      	ldr	r3, [pc, #28]	@ (80018e8 <HAL_PCD_MspInit+0xec>)
 80018ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018cc:	4a06      	ldr	r2, [pc, #24]	@ (80018e8 <HAL_PCD_MspInit+0xec>)
 80018ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80018d4:	4b04      	ldr	r3, [pc, #16]	@ (80018e8 <HAL_PCD_MspInit+0xec>)
 80018d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80018e0:	bf00      	nop
 80018e2:	37b0      	adds	r7, #176	@ 0xb0
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40020000 	.word	0x40020000

080018f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <NMI_Handler+0x4>

080018f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <HardFault_Handler+0x4>

08001900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <MemManage_Handler+0x4>

08001908 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <BusFault_Handler+0x4>

08001910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <UsageFault_Handler+0x4>

08001918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001946:	f000 fb59 	bl	8001ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}

0800194e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SigOut2_Pin);
 8001952:	2002      	movs	r0, #2
 8001954:	f001 f9d4 	bl	8002d00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}

0800195c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8001960:	2008      	movs	r0, #8
 8001962:	f001 f9cd 	bl	8002d00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}

0800196a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800196e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001972:	f001 f9c5 	bl	8002d00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001984:	4a14      	ldr	r2, [pc, #80]	@ (80019d8 <_sbrk+0x5c>)
 8001986:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <_sbrk+0x60>)
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001990:	4b13      	ldr	r3, [pc, #76]	@ (80019e0 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d102      	bne.n	800199e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001998:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <_sbrk+0x64>)
 800199a:	4a12      	ldr	r2, [pc, #72]	@ (80019e4 <_sbrk+0x68>)
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199e:	4b10      	ldr	r3, [pc, #64]	@ (80019e0 <_sbrk+0x64>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d207      	bcs.n	80019bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ac:	f005 fb5c 	bl	8007068 <__errno>
 80019b0:	4603      	mov	r3, r0
 80019b2:	220c      	movs	r2, #12
 80019b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ba:	e009      	b.n	80019d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019bc:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <_sbrk+0x64>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019c2:	4b07      	ldr	r3, [pc, #28]	@ (80019e0 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a05      	ldr	r2, [pc, #20]	@ (80019e0 <_sbrk+0x64>)
 80019cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ce:	68fb      	ldr	r3, [r7, #12]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20050000 	.word	0x20050000
 80019dc:	00000400 	.word	0x00000400
 80019e0:	200009b0 	.word	0x200009b0
 80019e4:	20000f08 	.word	0x20000f08

080019e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019ec:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <SystemInit+0x20>)
 80019ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019f2:	4a05      	ldr	r2, [pc, #20]	@ (8001a08 <SystemInit+0x20>)
 80019f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a10:	f7ff ffea 	bl	80019e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a14:	480c      	ldr	r0, [pc, #48]	@ (8001a48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a16:	490d      	ldr	r1, [pc, #52]	@ (8001a4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a18:	4a0d      	ldr	r2, [pc, #52]	@ (8001a50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a1c:	e002      	b.n	8001a24 <LoopCopyDataInit>

08001a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a22:	3304      	adds	r3, #4

08001a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a28:	d3f9      	bcc.n	8001a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a2c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a30:	e001      	b.n	8001a36 <LoopFillZerobss>

08001a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a34:	3204      	adds	r2, #4

08001a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a38:	d3fb      	bcc.n	8001a32 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a3a:	f005 fb1b 	bl	8007074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a3e:	f7ff f825 	bl	8000a8c <main>
  bx  lr    
 8001a42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a44:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a4c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001a50:	0800899c 	.word	0x0800899c
  ldr r2, =_sbss
 8001a54:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8001a58:	20000f08 	.word	0x20000f08

08001a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC_IRQHandler>

08001a5e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af04      	add	r7, sp, #16
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7a:	9302      	str	r3, [sp, #8]
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	9301      	str	r3, [sp, #4]
 8001a80:	1dfb      	adds	r3, r7, #7
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	2301      	movs	r3, #1
 8001a86:	2200      	movs	r2, #0
 8001a88:	2178      	movs	r1, #120	@ 0x78
 8001a8a:	4803      	ldr	r0, [pc, #12]	@ (8001a98 <ssd1306_WriteCommand+0x2c>)
 8001a8c:	f001 f9ec 	bl	8002e68 <HAL_I2C_Mem_Write>
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000308 	.word	0x20000308

08001a9c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af04      	add	r7, sp, #16
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8001aae:	9202      	str	r2, [sp, #8]
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	2240      	movs	r2, #64	@ 0x40
 8001aba:	2178      	movs	r1, #120	@ 0x78
 8001abc:	4803      	ldr	r0, [pc, #12]	@ (8001acc <ssd1306_WriteData+0x30>)
 8001abe:	f001 f9d3 	bl	8002e68 <HAL_I2C_Mem_Write>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000308 	.word	0x20000308

08001ad0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001ad4:	f7ff ffc3 	bl	8001a5e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001ad8:	2064      	movs	r0, #100	@ 0x64
 8001ada:	f000 faaf 	bl	800203c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f000 fa30 	bl	8001f44 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001ae4:	2020      	movs	r0, #32
 8001ae6:	f7ff ffc1 	bl	8001a6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001aea:	2000      	movs	r0, #0
 8001aec:	f7ff ffbe 	bl	8001a6c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001af0:	20b0      	movs	r0, #176	@ 0xb0
 8001af2:	f7ff ffbb 	bl	8001a6c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001af6:	20c8      	movs	r0, #200	@ 0xc8
 8001af8:	f7ff ffb8 	bl	8001a6c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001afc:	2000      	movs	r0, #0
 8001afe:	f7ff ffb5 	bl	8001a6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001b02:	2010      	movs	r0, #16
 8001b04:	f7ff ffb2 	bl	8001a6c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001b08:	2040      	movs	r0, #64	@ 0x40
 8001b0a:	f7ff ffaf 	bl	8001a6c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001b0e:	20ff      	movs	r0, #255	@ 0xff
 8001b10:	f000 fa05 	bl	8001f1e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001b14:	20a1      	movs	r0, #161	@ 0xa1
 8001b16:	f7ff ffa9 	bl	8001a6c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001b1a:	20a6      	movs	r0, #166	@ 0xa6
 8001b1c:	f7ff ffa6 	bl	8001a6c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001b20:	20a8      	movs	r0, #168	@ 0xa8
 8001b22:	f7ff ffa3 	bl	8001a6c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001b26:	203f      	movs	r0, #63	@ 0x3f
 8001b28:	f7ff ffa0 	bl	8001a6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b2c:	20a4      	movs	r0, #164	@ 0xa4
 8001b2e:	f7ff ff9d 	bl	8001a6c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001b32:	20d3      	movs	r0, #211	@ 0xd3
 8001b34:	f7ff ff9a 	bl	8001a6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f7ff ff97 	bl	8001a6c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001b3e:	20d5      	movs	r0, #213	@ 0xd5
 8001b40:	f7ff ff94 	bl	8001a6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001b44:	20f0      	movs	r0, #240	@ 0xf0
 8001b46:	f7ff ff91 	bl	8001a6c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001b4a:	20d9      	movs	r0, #217	@ 0xd9
 8001b4c:	f7ff ff8e 	bl	8001a6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001b50:	2022      	movs	r0, #34	@ 0x22
 8001b52:	f7ff ff8b 	bl	8001a6c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001b56:	20da      	movs	r0, #218	@ 0xda
 8001b58:	f7ff ff88 	bl	8001a6c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001b5c:	2012      	movs	r0, #18
 8001b5e:	f7ff ff85 	bl	8001a6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001b62:	20db      	movs	r0, #219	@ 0xdb
 8001b64:	f7ff ff82 	bl	8001a6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001b68:	2020      	movs	r0, #32
 8001b6a:	f7ff ff7f 	bl	8001a6c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001b6e:	208d      	movs	r0, #141	@ 0x8d
 8001b70:	f7ff ff7c 	bl	8001a6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001b74:	2014      	movs	r0, #20
 8001b76:	f7ff ff79 	bl	8001a6c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f000 f9e2 	bl	8001f44 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001b80:	2000      	movs	r0, #0
 8001b82:	f000 f80f 	bl	8001ba4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001b86:	f000 f825 	bl	8001bd4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001b8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <ssd1306_Init+0xd0>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001b90:	4b03      	ldr	r3, [pc, #12]	@ (8001ba0 <ssd1306_Init+0xd0>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001b96:	4b02      	ldr	r3, [pc, #8]	@ (8001ba0 <ssd1306_Init+0xd0>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	711a      	strb	r2, [r3, #4]
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000db4 	.word	0x20000db4

08001ba4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <ssd1306_Fill+0x14>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	e000      	b.n	8001bba <ssd1306_Fill+0x16>
 8001bb8:	23ff      	movs	r3, #255	@ 0xff
 8001bba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4803      	ldr	r0, [pc, #12]	@ (8001bd0 <ssd1306_Fill+0x2c>)
 8001bc2:	f005 fa39 	bl	8007038 <memset>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200009b4 	.word	0x200009b4

08001bd4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001bda:	2300      	movs	r3, #0
 8001bdc:	71fb      	strb	r3, [r7, #7]
 8001bde:	e016      	b.n	8001c0e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	3b50      	subs	r3, #80	@ 0x50
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff40 	bl	8001a6c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001bec:	2000      	movs	r0, #0
 8001bee:	f7ff ff3d 	bl	8001a6c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001bf2:	2010      	movs	r0, #16
 8001bf4:	f7ff ff3a 	bl	8001a6c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	01db      	lsls	r3, r3, #7
 8001bfc:	4a08      	ldr	r2, [pc, #32]	@ (8001c20 <ssd1306_UpdateScreen+0x4c>)
 8001bfe:	4413      	add	r3, r2
 8001c00:	2180      	movs	r1, #128	@ 0x80
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff4a 	bl	8001a9c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	71fb      	strb	r3, [r7, #7]
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2b07      	cmp	r3, #7
 8001c12:	d9e5      	bls.n	8001be0 <ssd1306_UpdateScreen+0xc>
    }
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200009b4 	.word	0x200009b4

08001c24 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	71bb      	strb	r3, [r7, #6]
 8001c32:	4613      	mov	r3, r2
 8001c34:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	db3d      	blt.n	8001cba <ssd1306_DrawPixel+0x96>
 8001c3e:	79bb      	ldrb	r3, [r7, #6]
 8001c40:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c42:	d83a      	bhi.n	8001cba <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001c44:	797b      	ldrb	r3, [r7, #5]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d11a      	bne.n	8001c80 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001c4a:	79fa      	ldrb	r2, [r7, #7]
 8001c4c:	79bb      	ldrb	r3, [r7, #6]
 8001c4e:	08db      	lsrs	r3, r3, #3
 8001c50:	b2d8      	uxtb	r0, r3
 8001c52:	4603      	mov	r3, r0
 8001c54:	01db      	lsls	r3, r3, #7
 8001c56:	4413      	add	r3, r2
 8001c58:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc8 <ssd1306_DrawPixel+0xa4>)
 8001c5a:	5cd3      	ldrb	r3, [r2, r3]
 8001c5c:	b25a      	sxtb	r2, r3
 8001c5e:	79bb      	ldrb	r3, [r7, #6]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	2101      	movs	r1, #1
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	b25b      	sxtb	r3, r3
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	b259      	sxtb	r1, r3
 8001c70:	79fa      	ldrb	r2, [r7, #7]
 8001c72:	4603      	mov	r3, r0
 8001c74:	01db      	lsls	r3, r3, #7
 8001c76:	4413      	add	r3, r2
 8001c78:	b2c9      	uxtb	r1, r1
 8001c7a:	4a13      	ldr	r2, [pc, #76]	@ (8001cc8 <ssd1306_DrawPixel+0xa4>)
 8001c7c:	54d1      	strb	r1, [r2, r3]
 8001c7e:	e01d      	b.n	8001cbc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001c80:	79fa      	ldrb	r2, [r7, #7]
 8001c82:	79bb      	ldrb	r3, [r7, #6]
 8001c84:	08db      	lsrs	r3, r3, #3
 8001c86:	b2d8      	uxtb	r0, r3
 8001c88:	4603      	mov	r3, r0
 8001c8a:	01db      	lsls	r3, r3, #7
 8001c8c:	4413      	add	r3, r2
 8001c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc8 <ssd1306_DrawPixel+0xa4>)
 8001c90:	5cd3      	ldrb	r3, [r2, r3]
 8001c92:	b25a      	sxtb	r2, r3
 8001c94:	79bb      	ldrb	r3, [r7, #6]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca0:	b25b      	sxtb	r3, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	b25b      	sxtb	r3, r3
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	b259      	sxtb	r1, r3
 8001caa:	79fa      	ldrb	r2, [r7, #7]
 8001cac:	4603      	mov	r3, r0
 8001cae:	01db      	lsls	r3, r3, #7
 8001cb0:	4413      	add	r3, r2
 8001cb2:	b2c9      	uxtb	r1, r1
 8001cb4:	4a04      	ldr	r2, [pc, #16]	@ (8001cc8 <ssd1306_DrawPixel+0xa4>)
 8001cb6:	54d1      	strb	r1, [r2, r3]
 8001cb8:	e000      	b.n	8001cbc <ssd1306_DrawPixel+0x98>
        return;
 8001cba:	bf00      	nop
    }
}
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	200009b4 	.word	0x200009b4

08001ccc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001ccc:	b590      	push	{r4, r7, lr}
 8001cce:	b089      	sub	sp, #36	@ 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	4638      	mov	r0, r7
 8001cd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001cda:	4623      	mov	r3, r4
 8001cdc:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	2b1f      	cmp	r3, #31
 8001ce2:	d902      	bls.n	8001cea <ssd1306_WriteChar+0x1e>
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	2b7e      	cmp	r3, #126	@ 0x7e
 8001ce8:	d901      	bls.n	8001cee <ssd1306_WriteChar+0x22>
        return 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e077      	b.n	8001dde <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001cee:	4b3e      	ldr	r3, [pc, #248]	@ (8001de8 <ssd1306_WriteChar+0x11c>)
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	783b      	ldrb	r3, [r7, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	2b80      	cmp	r3, #128	@ 0x80
 8001cfa:	dc06      	bgt.n	8001d0a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001cfc:	4b3a      	ldr	r3, [pc, #232]	@ (8001de8 <ssd1306_WriteChar+0x11c>)
 8001cfe:	885b      	ldrh	r3, [r3, #2]
 8001d00:	461a      	mov	r2, r3
 8001d02:	787b      	ldrb	r3, [r7, #1]
 8001d04:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001d06:	2b40      	cmp	r3, #64	@ 0x40
 8001d08:	dd01      	ble.n	8001d0e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e067      	b.n	8001dde <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	e04e      	b.n	8001db2 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	3b20      	subs	r3, #32
 8001d1a:	7879      	ldrb	r1, [r7, #1]
 8001d1c:	fb01 f303 	mul.w	r3, r1, r3
 8001d20:	4619      	mov	r1, r3
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	440b      	add	r3, r1
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4413      	add	r3, r2
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	e036      	b.n	8001da2 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d013      	beq.n	8001d6c <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001d44:	4b28      	ldr	r3, [pc, #160]	@ (8001de8 <ssd1306_WriteChar+0x11c>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	4413      	add	r3, r2
 8001d50:	b2d8      	uxtb	r0, r3
 8001d52:	4b25      	ldr	r3, [pc, #148]	@ (8001de8 <ssd1306_WriteChar+0x11c>)
 8001d54:	885b      	ldrh	r3, [r3, #2]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001d64:	4619      	mov	r1, r3
 8001d66:	f7ff ff5d 	bl	8001c24 <ssd1306_DrawPixel>
 8001d6a:	e017      	b.n	8001d9c <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001de8 <ssd1306_WriteChar+0x11c>)
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	4413      	add	r3, r2
 8001d78:	b2d8      	uxtb	r0, r3
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001de8 <ssd1306_WriteChar+0x11c>)
 8001d7c:	885b      	ldrh	r3, [r3, #2]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	4413      	add	r3, r2
 8001d86:	b2d9      	uxtb	r1, r3
 8001d88:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	bf0c      	ite	eq
 8001d90:	2301      	moveq	r3, #1
 8001d92:	2300      	movne	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	f7ff ff44 	bl	8001c24 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	61bb      	str	r3, [r7, #24]
 8001da2:	783b      	ldrb	r3, [r7, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d3c3      	bcc.n	8001d34 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	3301      	adds	r3, #1
 8001db0:	61fb      	str	r3, [r7, #28]
 8001db2:	787b      	ldrb	r3, [r7, #1]
 8001db4:	461a      	mov	r2, r3
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d3ab      	bcc.n	8001d14 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <ssd1306_WriteChar+0x11c>)
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	2a00      	cmp	r2, #0
 8001dc4:	d005      	beq.n	8001dd2 <ssd1306_WriteChar+0x106>
 8001dc6:	68b9      	ldr	r1, [r7, #8]
 8001dc8:	7bfa      	ldrb	r2, [r7, #15]
 8001dca:	3a20      	subs	r2, #32
 8001dcc:	440a      	add	r2, r1
 8001dce:	7812      	ldrb	r2, [r2, #0]
 8001dd0:	e000      	b.n	8001dd4 <ssd1306_WriteChar+0x108>
 8001dd2:	783a      	ldrb	r2, [r7, #0]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	4b03      	ldr	r3, [pc, #12]	@ (8001de8 <ssd1306_WriteChar+0x11c>)
 8001dda:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3724      	adds	r7, #36	@ 0x24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd90      	pop	{r4, r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000db4 	.word	0x20000db4

08001dec <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af02      	add	r7, sp, #8
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	4638      	mov	r0, r7
 8001df6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001dfa:	e013      	b.n	8001e24 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	7818      	ldrb	r0, [r3, #0]
 8001e00:	7e3b      	ldrb	r3, [r7, #24]
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	463b      	mov	r3, r7
 8001e06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e08:	f7ff ff60 	bl	8001ccc <ssd1306_WriteChar>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d002      	beq.n	8001e1e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	e008      	b.n	8001e30 <ssd1306_WriteString+0x44>
        }
        str++;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	3301      	adds	r3, #1
 8001e22:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1e7      	bne.n	8001dfc <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	460a      	mov	r2, r1
 8001e42:	71fb      	strb	r3, [r7, #7]
 8001e44:	4613      	mov	r3, r2
 8001e46:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <ssd1306_SetCursor+0x2c>)
 8001e4e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001e50:	79bb      	ldrb	r3, [r7, #6]
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	4b03      	ldr	r3, [pc, #12]	@ (8001e64 <ssd1306_SetCursor+0x2c>)
 8001e56:	805a      	strh	r2, [r3, #2]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	20000db4 	.word	0x20000db4

08001e68 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	603a      	str	r2, [r7, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
 8001e76:	460b      	mov	r3, r1
 8001e78:	71bb      	strb	r3, [r7, #6]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001e7e:	797b      	ldrb	r3, [r7, #5]
 8001e80:	3307      	adds	r3, #7
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	da00      	bge.n	8001e88 <ssd1306_DrawBitmap+0x20>
 8001e86:	3307      	adds	r3, #7
 8001e88:	10db      	asrs	r3, r3, #3
 8001e8a:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	db3e      	blt.n	8001f16 <ssd1306_DrawBitmap+0xae>
 8001e98:	79bb      	ldrb	r3, [r7, #6]
 8001e9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e9c:	d83b      	bhi.n	8001f16 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	73bb      	strb	r3, [r7, #14]
 8001ea2:	e033      	b.n	8001f0c <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	737b      	strb	r3, [r7, #13]
 8001ea8:	e026      	b.n	8001ef8 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8001eaa:	7b7b      	ldrb	r3, [r7, #13]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	73fb      	strb	r3, [r7, #15]
 8001eba:	e00d      	b.n	8001ed8 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001ebc:	7bbb      	ldrb	r3, [r7, #14]
 8001ebe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001ec2:	fb02 f303 	mul.w	r3, r2, r3
 8001ec6:	7b7a      	ldrb	r2, [r7, #13]
 8001ec8:	08d2      	lsrs	r2, r2, #3
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	4413      	add	r3, r2
 8001ece:	461a      	mov	r2, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8001ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	da08      	bge.n	8001ef2 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8001ee0:	79fa      	ldrb	r2, [r7, #7]
 8001ee2:	7b7b      	ldrb	r3, [r7, #13]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	7f3a      	ldrb	r2, [r7, #28]
 8001eea:	79b9      	ldrb	r1, [r7, #6]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fe99 	bl	8001c24 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8001ef2:	7b7b      	ldrb	r3, [r7, #13]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	737b      	strb	r3, [r7, #13]
 8001ef8:	7b7a      	ldrb	r2, [r7, #13]
 8001efa:	797b      	ldrb	r3, [r7, #5]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d3d4      	bcc.n	8001eaa <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001f00:	7bbb      	ldrb	r3, [r7, #14]
 8001f02:	3301      	adds	r3, #1
 8001f04:	73bb      	strb	r3, [r7, #14]
 8001f06:	79bb      	ldrb	r3, [r7, #6]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	71bb      	strb	r3, [r7, #6]
 8001f0c:	7bba      	ldrb	r2, [r7, #14]
 8001f0e:	7e3b      	ldrb	r3, [r7, #24]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d3c7      	bcc.n	8001ea4 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001f14:	e000      	b.n	8001f18 <ssd1306_DrawBitmap+0xb0>
        return;
 8001f16:	bf00      	nop
}
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4603      	mov	r3, r0
 8001f26:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001f28:	2381      	movs	r3, #129	@ 0x81
 8001f2a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fd9c 	bl	8001a6c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fd98 	bl	8001a6c <ssd1306_WriteCommand>
}
 8001f3c:	bf00      	nop
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001f54:	23af      	movs	r3, #175	@ 0xaf
 8001f56:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001f58:	4b08      	ldr	r3, [pc, #32]	@ (8001f7c <ssd1306_SetDisplayOn+0x38>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	715a      	strb	r2, [r3, #5]
 8001f5e:	e004      	b.n	8001f6a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001f60:	23ae      	movs	r3, #174	@ 0xae
 8001f62:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001f64:	4b05      	ldr	r3, [pc, #20]	@ (8001f7c <ssd1306_SetDisplayOn+0x38>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fd7d 	bl	8001a6c <ssd1306_WriteCommand>
}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000db4 	.word	0x20000db4

08001f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f84:	2003      	movs	r0, #3
 8001f86:	f000 f94d 	bl	8002224 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f000 f806 	bl	8001f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f90:	f7ff f982 	bl	8001298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fa4:	4b12      	ldr	r3, [pc, #72]	@ (8001ff0 <HAL_InitTick+0x54>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b12      	ldr	r3, [pc, #72]	@ (8001ff4 <HAL_InitTick+0x58>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	4619      	mov	r1, r3
 8001fae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f967 	bl	800228e <HAL_SYSTICK_Config>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e00e      	b.n	8001fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b0f      	cmp	r3, #15
 8001fce:	d80a      	bhi.n	8001fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd8:	f000 f92f 	bl	800223a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fdc:	4a06      	ldr	r2, [pc, #24]	@ (8001ff8 <HAL_InitTick+0x5c>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e000      	b.n	8001fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	20000008 	.word	0x20000008
 8001ff8:	20000004 	.word	0x20000004

08001ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002000:	4b06      	ldr	r3, [pc, #24]	@ (800201c <HAL_IncTick+0x20>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <HAL_IncTick+0x24>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4413      	add	r3, r2
 800200c:	4a04      	ldr	r2, [pc, #16]	@ (8002020 <HAL_IncTick+0x24>)
 800200e:	6013      	str	r3, [r2, #0]
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20000008 	.word	0x20000008
 8002020:	20000dbc 	.word	0x20000dbc

08002024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return uwTick;
 8002028:	4b03      	ldr	r3, [pc, #12]	@ (8002038 <HAL_GetTick+0x14>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000dbc 	.word	0x20000dbc

0800203c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002044:	f7ff ffee 	bl	8002024 <HAL_GetTick>
 8002048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002054:	d005      	beq.n	8002062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002056:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <HAL_Delay+0x44>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4413      	add	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002062:	bf00      	nop
 8002064:	f7ff ffde 	bl	8002024 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	429a      	cmp	r2, r3
 8002072:	d8f7      	bhi.n	8002064 <HAL_Delay+0x28>
  {
  }
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000008 	.word	0x20000008

08002084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002094:	4b0b      	ldr	r3, [pc, #44]	@ (80020c4 <__NVIC_SetPriorityGrouping+0x40>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020a0:	4013      	ands	r3, r2
 80020a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020ac:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <__NVIC_SetPriorityGrouping+0x44>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b2:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <__NVIC_SetPriorityGrouping+0x40>)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	60d3      	str	r3, [r2, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00
 80020c8:	05fa0000 	.word	0x05fa0000

080020cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d0:	4b04      	ldr	r3, [pc, #16]	@ (80020e4 <__NVIC_GetPriorityGrouping+0x18>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	0a1b      	lsrs	r3, r3, #8
 80020d6:	f003 0307 	and.w	r3, r3, #7
}
 80020da:	4618      	mov	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	db0b      	blt.n	8002112 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	f003 021f 	and.w	r2, r3, #31
 8002100:	4907      	ldr	r1, [pc, #28]	@ (8002120 <__NVIC_EnableIRQ+0x38>)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	095b      	lsrs	r3, r3, #5
 8002108:	2001      	movs	r0, #1
 800210a:	fa00 f202 	lsl.w	r2, r0, r2
 800210e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000e100 	.word	0xe000e100

08002124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	6039      	str	r1, [r7, #0]
 800212e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002134:	2b00      	cmp	r3, #0
 8002136:	db0a      	blt.n	800214e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	b2da      	uxtb	r2, r3
 800213c:	490c      	ldr	r1, [pc, #48]	@ (8002170 <__NVIC_SetPriority+0x4c>)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	0112      	lsls	r2, r2, #4
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	440b      	add	r3, r1
 8002148:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800214c:	e00a      	b.n	8002164 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	b2da      	uxtb	r2, r3
 8002152:	4908      	ldr	r1, [pc, #32]	@ (8002174 <__NVIC_SetPriority+0x50>)
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	3b04      	subs	r3, #4
 800215c:	0112      	lsls	r2, r2, #4
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	440b      	add	r3, r1
 8002162:	761a      	strb	r2, [r3, #24]
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000e100 	.word	0xe000e100
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002178:	b480      	push	{r7}
 800217a:	b089      	sub	sp, #36	@ 0x24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f1c3 0307 	rsb	r3, r3, #7
 8002192:	2b04      	cmp	r3, #4
 8002194:	bf28      	it	cs
 8002196:	2304      	movcs	r3, #4
 8002198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3304      	adds	r3, #4
 800219e:	2b06      	cmp	r3, #6
 80021a0:	d902      	bls.n	80021a8 <NVIC_EncodePriority+0x30>
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3b03      	subs	r3, #3
 80021a6:	e000      	b.n	80021aa <NVIC_EncodePriority+0x32>
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ac:	f04f 32ff 	mov.w	r2, #4294967295
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43da      	mvns	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	401a      	ands	r2, r3
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c0:	f04f 31ff 	mov.w	r1, #4294967295
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ca:	43d9      	mvns	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d0:	4313      	orrs	r3, r2
         );
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3724      	adds	r7, #36	@ 0x24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
	...

080021e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021f0:	d301      	bcc.n	80021f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021f2:	2301      	movs	r3, #1
 80021f4:	e00f      	b.n	8002216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002220 <SysTick_Config+0x40>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021fe:	210f      	movs	r1, #15
 8002200:	f04f 30ff 	mov.w	r0, #4294967295
 8002204:	f7ff ff8e 	bl	8002124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002208:	4b05      	ldr	r3, [pc, #20]	@ (8002220 <SysTick_Config+0x40>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800220e:	4b04      	ldr	r3, [pc, #16]	@ (8002220 <SysTick_Config+0x40>)
 8002210:	2207      	movs	r2, #7
 8002212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	e000e010 	.word	0xe000e010

08002224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff ff29 	bl	8002084 <__NVIC_SetPriorityGrouping>
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800223a:	b580      	push	{r7, lr}
 800223c:	b086      	sub	sp, #24
 800223e:	af00      	add	r7, sp, #0
 8002240:	4603      	mov	r3, r0
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
 8002246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800224c:	f7ff ff3e 	bl	80020cc <__NVIC_GetPriorityGrouping>
 8002250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	6978      	ldr	r0, [r7, #20]
 8002258:	f7ff ff8e 	bl	8002178 <NVIC_EncodePriority>
 800225c:	4602      	mov	r2, r0
 800225e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff5d 	bl	8002124 <__NVIC_SetPriority>
}
 800226a:	bf00      	nop
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	4603      	mov	r3, r0
 800227a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800227c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff ff31 	bl	80020e8 <__NVIC_EnableIRQ>
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff ffa2 	bl	80021e0 <SysTick_Config>
 800229c:	4603      	mov	r3, r0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e086      	b.n	80023c8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d106      	bne.n	80022d2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2223      	movs	r2, #35	@ 0x23
 80022c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff f807 	bl	80012e0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d2:	4b3f      	ldr	r3, [pc, #252]	@ (80023d0 <HAL_ETH_Init+0x128>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d6:	4a3e      	ldr	r2, [pc, #248]	@ (80023d0 <HAL_ETH_Init+0x128>)
 80022d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80022de:	4b3c      	ldr	r3, [pc, #240]	@ (80023d0 <HAL_ETH_Init+0x128>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80022ea:	4b3a      	ldr	r3, [pc, #232]	@ (80023d4 <HAL_ETH_Init+0x12c>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4a39      	ldr	r2, [pc, #228]	@ (80023d4 <HAL_ETH_Init+0x12c>)
 80022f0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80022f4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80022f6:	4b37      	ldr	r3, [pc, #220]	@ (80023d4 <HAL_ETH_Init+0x12c>)
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	4935      	ldr	r1, [pc, #212]	@ (80023d4 <HAL_ETH_Init+0x12c>)
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002304:	4b33      	ldr	r3, [pc, #204]	@ (80023d4 <HAL_ETH_Init+0x12c>)
 8002306:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6812      	ldr	r2, [r2, #0]
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800231e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002320:	f7ff fe80 	bl	8002024 <HAL_GetTick>
 8002324:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002326:	e011      	b.n	800234c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002328:	f7ff fe7c 	bl	8002024 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002336:	d909      	bls.n	800234c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2204      	movs	r2, #4
 800233c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	22e0      	movs	r2, #224	@ 0xe0
 8002344:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e03d      	b.n	80023c8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1e4      	bne.n	8002328 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f97a 	bl	8002658 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 fa25 	bl	80027b4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 fa7b 	bl	8002866 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	461a      	mov	r2, r3
 8002376:	2100      	movs	r1, #0
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f9e3 	bl	8002744 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800238c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	4b0f      	ldr	r3, [pc, #60]	@ (80023d8 <HAL_ETH_Init+0x130>)
 800239c:	430b      	orrs	r3, r1
 800239e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80023b2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2210      	movs	r2, #16
 80023c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40013800 	.word	0x40013800
 80023d8:	00020060 	.word	0x00020060

080023dc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4b53      	ldr	r3, [pc, #332]	@ (8002540 <ETH_SetMACConfig+0x164>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	7b9b      	ldrb	r3, [r3, #14]
 80023fa:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	7c12      	ldrb	r2, [r2, #16]
 8002400:	2a00      	cmp	r2, #0
 8002402:	d102      	bne.n	800240a <ETH_SetMACConfig+0x2e>
 8002404:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002408:	e000      	b.n	800240c <ETH_SetMACConfig+0x30>
 800240a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800240c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	7c52      	ldrb	r2, [r2, #17]
 8002412:	2a00      	cmp	r2, #0
 8002414:	d102      	bne.n	800241c <ETH_SetMACConfig+0x40>
 8002416:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800241a:	e000      	b.n	800241e <ETH_SetMACConfig+0x42>
 800241c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800241e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002424:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	7fdb      	ldrb	r3, [r3, #31]
 800242a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800242c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002432:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	7f92      	ldrb	r2, [r2, #30]
 8002438:	2a00      	cmp	r2, #0
 800243a:	d102      	bne.n	8002442 <ETH_SetMACConfig+0x66>
 800243c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002440:	e000      	b.n	8002444 <ETH_SetMACConfig+0x68>
 8002442:	2200      	movs	r2, #0
                        macconf->Speed |
 8002444:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	7f1b      	ldrb	r3, [r3, #28]
 800244a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800244c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002452:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	791b      	ldrb	r3, [r3, #4]
 8002458:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800245a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002462:	2a00      	cmp	r2, #0
 8002464:	d102      	bne.n	800246c <ETH_SetMACConfig+0x90>
 8002466:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800246a:	e000      	b.n	800246e <ETH_SetMACConfig+0x92>
 800246c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800246e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	7bdb      	ldrb	r3, [r3, #15]
 8002474:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002476:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800247c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002484:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002486:	4313      	orrs	r3, r2
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800249e:	2001      	movs	r0, #1
 80024a0:	f7ff fdcc 	bl	800203c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80024ba:	4013      	ands	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024c2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80024ca:	2a00      	cmp	r2, #0
 80024cc:	d101      	bne.n	80024d2 <ETH_SetMACConfig+0xf6>
 80024ce:	2280      	movs	r2, #128	@ 0x80
 80024d0:	e000      	b.n	80024d4 <ETH_SetMACConfig+0xf8>
 80024d2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024d4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80024e2:	2a01      	cmp	r2, #1
 80024e4:	d101      	bne.n	80024ea <ETH_SetMACConfig+0x10e>
 80024e6:	2208      	movs	r2, #8
 80024e8:	e000      	b.n	80024ec <ETH_SetMACConfig+0x110>
 80024ea:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80024ec:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80024f4:	2a01      	cmp	r2, #1
 80024f6:	d101      	bne.n	80024fc <ETH_SetMACConfig+0x120>
 80024f8:	2204      	movs	r2, #4
 80024fa:	e000      	b.n	80024fe <ETH_SetMACConfig+0x122>
 80024fc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002506:	2a01      	cmp	r2, #1
 8002508:	d101      	bne.n	800250e <ETH_SetMACConfig+0x132>
 800250a:	2202      	movs	r2, #2
 800250c:	e000      	b.n	8002510 <ETH_SetMACConfig+0x134>
 800250e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002510:	4313      	orrs	r3, r2
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4313      	orrs	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002528:	2001      	movs	r0, #1
 800252a:	f7ff fd87 	bl	800203c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	619a      	str	r2, [r3, #24]
}
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	fd20810f 	.word	0xfd20810f

08002544 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4b3d      	ldr	r3, [pc, #244]	@ (8002654 <ETH_SetDMAConfig+0x110>)
 800255e:	4013      	ands	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	7b1b      	ldrb	r3, [r3, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d102      	bne.n	8002570 <ETH_SetDMAConfig+0x2c>
 800256a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800256e:	e000      	b.n	8002572 <ETH_SetDMAConfig+0x2e>
 8002570:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	7b5b      	ldrb	r3, [r3, #13]
 8002576:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002578:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	7f52      	ldrb	r2, [r2, #29]
 800257e:	2a00      	cmp	r2, #0
 8002580:	d102      	bne.n	8002588 <ETH_SetDMAConfig+0x44>
 8002582:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002586:	e000      	b.n	800258a <ETH_SetDMAConfig+0x46>
 8002588:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800258a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	7b9b      	ldrb	r3, [r3, #14]
 8002590:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002592:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002598:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	7f1b      	ldrb	r3, [r3, #28]
 800259e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80025a0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	7f9b      	ldrb	r3, [r3, #30]
 80025a6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80025a8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80025ae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025b6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025b8:	4313      	orrs	r3, r2
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	4313      	orrs	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025c8:	461a      	mov	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025da:	2001      	movs	r0, #1
 80025dc:	f7ff fd2e 	bl	800203c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025e8:	461a      	mov	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	791b      	ldrb	r3, [r3, #4]
 80025f2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025f8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80025fe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002604:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800260c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800260e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002614:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002616:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800261c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6812      	ldr	r2, [r2, #0]
 8002622:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002626:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800262a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002638:	2001      	movs	r0, #1
 800263a:	f7ff fcff 	bl	800203c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002646:	461a      	mov	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6013      	str	r3, [r2, #0]
}
 800264c:	bf00      	nop
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	f8de3f23 	.word	0xf8de3f23

08002658 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b0a6      	sub	sp, #152	@ 0x98
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002660:	2301      	movs	r3, #1
 8002662:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002666:	2301      	movs	r3, #1
 8002668:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800266c:	2300      	movs	r3, #0
 800266e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002670:	2300      	movs	r3, #0
 8002672:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002676:	2301      	movs	r3, #1
 8002678:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800267c:	2300      	movs	r3, #0
 800267e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002682:	2301      	movs	r3, #1
 8002684:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002688:	2301      	movs	r3, #1
 800268a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800268e:	2300      	movs	r3, #0
 8002690:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002694:	2300      	movs	r3, #0
 8002696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800269a:	2300      	movs	r3, #0
 800269c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80026ae:	2300      	movs	r3, #0
 80026b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80026b4:	2300      	movs	r3, #0
 80026b6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80026c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80026c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80026c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80026ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80026d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80026d6:	4619      	mov	r1, r3
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff fe7f 	bl	80023dc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80026de:	2301      	movs	r3, #1
 80026e0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80026e2:	2301      	movs	r3, #1
 80026e4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80026e6:	2301      	movs	r3, #1
 80026e8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80026ec:	2301      	movs	r3, #1
 80026ee:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80026fa:	2300      	movs	r3, #0
 80026fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002700:	2300      	movs	r3, #0
 8002702:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002704:	2301      	movs	r3, #1
 8002706:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800270a:	2301      	movs	r3, #1
 800270c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800270e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002712:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002714:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002718:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800271a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800271e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002720:	2301      	movs	r3, #1
 8002722:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002726:	2300      	movs	r3, #0
 8002728:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800272e:	f107 0308 	add.w	r3, r7, #8
 8002732:	4619      	mov	r1, r3
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff ff05 	bl	8002544 <ETH_SetDMAConfig>
}
 800273a:	bf00      	nop
 800273c:	3798      	adds	r7, #152	@ 0x98
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002744:	b480      	push	{r7}
 8002746:	b087      	sub	sp, #28
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3305      	adds	r3, #5
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	3204      	adds	r2, #4
 800275c:	7812      	ldrb	r2, [r2, #0]
 800275e:	4313      	orrs	r3, r2
 8002760:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	4b11      	ldr	r3, [pc, #68]	@ (80027ac <ETH_MACAddressConfig+0x68>)
 8002766:	4413      	add	r3, r2
 8002768:	461a      	mov	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3303      	adds	r3, #3
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	061a      	lsls	r2, r3, #24
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3302      	adds	r3, #2
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	041b      	lsls	r3, r3, #16
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3301      	adds	r3, #1
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	021b      	lsls	r3, r3, #8
 8002788:	4313      	orrs	r3, r2
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	7812      	ldrb	r2, [r2, #0]
 800278e:	4313      	orrs	r3, r2
 8002790:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <ETH_MACAddressConfig+0x6c>)
 8002796:	4413      	add	r3, r2
 8002798:	461a      	mov	r2, r3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	6013      	str	r3, [r2, #0]
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40028040 	.word	0x40028040
 80027b0:	40028044 	.word	0x40028044

080027b4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	e03e      	b.n	8002840 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68d9      	ldr	r1, [r3, #12]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	440b      	add	r3, r1
 80027d2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2200      	movs	r2, #0
 80027de:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2200      	movs	r2, #0
 80027ea:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	3206      	adds	r2, #6
 80027f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d80c      	bhi.n	8002824 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68d9      	ldr	r1, [r3, #12]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	440b      	add	r3, r1
 800281c:	461a      	mov	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	e004      	b.n	800282e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	461a      	mov	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3301      	adds	r3, #1
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b03      	cmp	r3, #3
 8002844:	d9bd      	bls.n	80027c2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002858:	611a      	str	r2, [r3, #16]
}
 800285a:	bf00      	nop
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002866:	b480      	push	{r7}
 8002868:	b085      	sub	sp, #20
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	e048      	b.n	8002906 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6919      	ldr	r1, [r3, #16]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	440b      	add	r3, r1
 8002884:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2200      	movs	r2, #0
 8002890:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2200      	movs	r2, #0
 800289c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2200      	movs	r2, #0
 80028a2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2200      	movs	r2, #0
 80028a8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80028b0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80028ca:	68b9      	ldr	r1, [r7, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	3212      	adds	r2, #18
 80028d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d80c      	bhi.n	80028f6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6919      	ldr	r1, [r3, #16]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	440b      	add	r3, r1
 80028ee:	461a      	mov	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	60da      	str	r2, [r3, #12]
 80028f4:	e004      	b.n	8002900 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	461a      	mov	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	3301      	adds	r3, #1
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b03      	cmp	r3, #3
 800290a:	d9b3      	bls.n	8002874 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002936:	60da      	str	r2, [r3, #12]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002944:	b480      	push	{r7}
 8002946:	b089      	sub	sp, #36	@ 0x24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800295a:	2300      	movs	r3, #0
 800295c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	e175      	b.n	8002c50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002964:	2201      	movs	r2, #1
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	429a      	cmp	r2, r3
 800297e:	f040 8164 	bne.w	8002c4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b01      	cmp	r3, #1
 800298c:	d005      	beq.n	800299a <HAL_GPIO_Init+0x56>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d130      	bne.n	80029fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	2203      	movs	r2, #3
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029d0:	2201      	movs	r2, #1
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 0201 	and.w	r2, r3, #1
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d017      	beq.n	8002a38 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	2203      	movs	r2, #3
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d123      	bne.n	8002a8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	08da      	lsrs	r2, r3, #3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3208      	adds	r2, #8
 8002a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	220f      	movs	r2, #15
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	08da      	lsrs	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3208      	adds	r2, #8
 8002a86:	69b9      	ldr	r1, [r7, #24]
 8002a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0203 	and.w	r2, r3, #3
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80be 	beq.w	8002c4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ace:	4b66      	ldr	r3, [pc, #408]	@ (8002c68 <HAL_GPIO_Init+0x324>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad2:	4a65      	ldr	r2, [pc, #404]	@ (8002c68 <HAL_GPIO_Init+0x324>)
 8002ad4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ad8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ada:	4b63      	ldr	r3, [pc, #396]	@ (8002c68 <HAL_GPIO_Init+0x324>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ade:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ae6:	4a61      	ldr	r2, [pc, #388]	@ (8002c6c <HAL_GPIO_Init+0x328>)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	3302      	adds	r3, #2
 8002aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	220f      	movs	r2, #15
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a58      	ldr	r2, [pc, #352]	@ (8002c70 <HAL_GPIO_Init+0x32c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d037      	beq.n	8002b82 <HAL_GPIO_Init+0x23e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a57      	ldr	r2, [pc, #348]	@ (8002c74 <HAL_GPIO_Init+0x330>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d031      	beq.n	8002b7e <HAL_GPIO_Init+0x23a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a56      	ldr	r2, [pc, #344]	@ (8002c78 <HAL_GPIO_Init+0x334>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d02b      	beq.n	8002b7a <HAL_GPIO_Init+0x236>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a55      	ldr	r2, [pc, #340]	@ (8002c7c <HAL_GPIO_Init+0x338>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d025      	beq.n	8002b76 <HAL_GPIO_Init+0x232>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a54      	ldr	r2, [pc, #336]	@ (8002c80 <HAL_GPIO_Init+0x33c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d01f      	beq.n	8002b72 <HAL_GPIO_Init+0x22e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a53      	ldr	r2, [pc, #332]	@ (8002c84 <HAL_GPIO_Init+0x340>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d019      	beq.n	8002b6e <HAL_GPIO_Init+0x22a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a52      	ldr	r2, [pc, #328]	@ (8002c88 <HAL_GPIO_Init+0x344>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d013      	beq.n	8002b6a <HAL_GPIO_Init+0x226>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a51      	ldr	r2, [pc, #324]	@ (8002c8c <HAL_GPIO_Init+0x348>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00d      	beq.n	8002b66 <HAL_GPIO_Init+0x222>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a50      	ldr	r2, [pc, #320]	@ (8002c90 <HAL_GPIO_Init+0x34c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d007      	beq.n	8002b62 <HAL_GPIO_Init+0x21e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a4f      	ldr	r2, [pc, #316]	@ (8002c94 <HAL_GPIO_Init+0x350>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d101      	bne.n	8002b5e <HAL_GPIO_Init+0x21a>
 8002b5a:	2309      	movs	r3, #9
 8002b5c:	e012      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b5e:	230a      	movs	r3, #10
 8002b60:	e010      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b62:	2308      	movs	r3, #8
 8002b64:	e00e      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b66:	2307      	movs	r3, #7
 8002b68:	e00c      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b6a:	2306      	movs	r3, #6
 8002b6c:	e00a      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b6e:	2305      	movs	r3, #5
 8002b70:	e008      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b72:	2304      	movs	r3, #4
 8002b74:	e006      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b76:	2303      	movs	r3, #3
 8002b78:	e004      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e002      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b82:	2300      	movs	r3, #0
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	f002 0203 	and.w	r2, r2, #3
 8002b8a:	0092      	lsls	r2, r2, #2
 8002b8c:	4093      	lsls	r3, r2
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b94:	4935      	ldr	r1, [pc, #212]	@ (8002c6c <HAL_GPIO_Init+0x328>)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	089b      	lsrs	r3, r3, #2
 8002b9a:	3302      	adds	r3, #2
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ba2:	4b3d      	ldr	r3, [pc, #244]	@ (8002c98 <HAL_GPIO_Init+0x354>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bc6:	4a34      	ldr	r2, [pc, #208]	@ (8002c98 <HAL_GPIO_Init+0x354>)
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bcc:	4b32      	ldr	r3, [pc, #200]	@ (8002c98 <HAL_GPIO_Init+0x354>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bf0:	4a29      	ldr	r2, [pc, #164]	@ (8002c98 <HAL_GPIO_Init+0x354>)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bf6:	4b28      	ldr	r3, [pc, #160]	@ (8002c98 <HAL_GPIO_Init+0x354>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8002c98 <HAL_GPIO_Init+0x354>)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c20:	4b1d      	ldr	r3, [pc, #116]	@ (8002c98 <HAL_GPIO_Init+0x354>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c44:	4a14      	ldr	r2, [pc, #80]	@ (8002c98 <HAL_GPIO_Init+0x354>)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	61fb      	str	r3, [r7, #28]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2b0f      	cmp	r3, #15
 8002c54:	f67f ae86 	bls.w	8002964 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
 8002c5c:	3724      	adds	r7, #36	@ 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40013800 	.word	0x40013800
 8002c70:	40020000 	.word	0x40020000
 8002c74:	40020400 	.word	0x40020400
 8002c78:	40020800 	.word	0x40020800
 8002c7c:	40020c00 	.word	0x40020c00
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40021400 	.word	0x40021400
 8002c88:	40021800 	.word	0x40021800
 8002c8c:	40021c00 	.word	0x40021c00
 8002c90:	40022000 	.word	0x40022000
 8002c94:	40022400 	.word	0x40022400
 8002c98:	40013c00 	.word	0x40013c00

08002c9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	887b      	ldrh	r3, [r7, #2]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
 8002cb8:	e001      	b.n	8002cbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	807b      	strh	r3, [r7, #2]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cdc:	787b      	ldrb	r3, [r7, #1]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ce2:	887a      	ldrh	r2, [r7, #2]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ce8:	e003      	b.n	8002cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002cea:	887b      	ldrh	r3, [r7, #2]
 8002cec:	041a      	lsls	r2, r3, #16
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	619a      	str	r2, [r3, #24]
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
	...

08002d00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d0a:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	4013      	ands	r3, r2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d006      	beq.n	8002d24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d16:	4a05      	ldr	r2, [pc, #20]	@ (8002d2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d18:	88fb      	ldrh	r3, [r7, #6]
 8002d1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d1c:	88fb      	ldrh	r3, [r7, #6]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fe7c 	bl	8000a1c <HAL_GPIO_EXTI_Callback>
  }
}
 8002d24:	bf00      	nop
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40013c00 	.word	0x40013c00

08002d30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e08b      	b.n	8002e5a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7fe fb7a 	bl	8001450 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2224      	movs	r2, #36	@ 0x24
 8002d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d107      	bne.n	8002daa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	e006      	b.n	8002db8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002db6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d108      	bne.n	8002dd2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	e007      	b.n	8002de2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002de0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6859      	ldr	r1, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b1d      	ldr	r3, [pc, #116]	@ (8002e64 <HAL_I2C_Init+0x134>)
 8002dee:	430b      	orrs	r3, r1
 8002df0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69d9      	ldr	r1, [r3, #28]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1a      	ldr	r2, [r3, #32]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	02008000 	.word	0x02008000

08002e68 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	4608      	mov	r0, r1
 8002e72:	4611      	mov	r1, r2
 8002e74:	461a      	mov	r2, r3
 8002e76:	4603      	mov	r3, r0
 8002e78:	817b      	strh	r3, [r7, #10]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	813b      	strh	r3, [r7, #8]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	f040 80f9 	bne.w	8003082 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <HAL_I2C_Mem_Write+0x34>
 8002e96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d105      	bne.n	8002ea8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ea2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0ed      	b.n	8003084 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_I2C_Mem_Write+0x4e>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e0e6      	b.n	8003084 <HAL_I2C_Mem_Write+0x21c>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ebe:	f7ff f8b1 	bl	8002024 <HAL_GetTick>
 8002ec2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2319      	movs	r3, #25
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 fa41 	bl	8003358 <I2C_WaitOnFlagUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0d1      	b.n	8003084 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2221      	movs	r2, #33	@ 0x21
 8002ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2240      	movs	r2, #64	@ 0x40
 8002eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a3a      	ldr	r2, [r7, #32]
 8002efa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002f00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f08:	88f8      	ldrh	r0, [r7, #6]
 8002f0a:	893a      	ldrh	r2, [r7, #8]
 8002f0c:	8979      	ldrh	r1, [r7, #10]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	9301      	str	r3, [sp, #4]
 8002f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	4603      	mov	r3, r0
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f9a5 	bl	8003268 <I2C_RequestMemoryWrite>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0a9      	b.n	8003084 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2bff      	cmp	r3, #255	@ 0xff
 8002f38:	d90e      	bls.n	8002f58 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	22ff      	movs	r2, #255	@ 0xff
 8002f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	8979      	ldrh	r1, [r7, #10]
 8002f48:	2300      	movs	r3, #0
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 fbc5 	bl	80036e0 <I2C_TransferConfig>
 8002f56:	e00f      	b.n	8002f78 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	8979      	ldrh	r1, [r7, #10]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 fbb4 	bl	80036e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 fa44 	bl	800340a <I2C_WaitOnTXISFlagUntilTimeout>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e07b      	b.n	8003084 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	781a      	ldrb	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d034      	beq.n	8003030 <HAL_I2C_Mem_Write+0x1c8>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d130      	bne.n	8003030 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2180      	movs	r1, #128	@ 0x80
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f9bd 	bl	8003358 <I2C_WaitOnFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e04d      	b.n	8003084 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2bff      	cmp	r3, #255	@ 0xff
 8002ff0:	d90e      	bls.n	8003010 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	22ff      	movs	r2, #255	@ 0xff
 8002ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	8979      	ldrh	r1, [r7, #10]
 8003000:	2300      	movs	r3, #0
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 fb69 	bl	80036e0 <I2C_TransferConfig>
 800300e:	e00f      	b.n	8003030 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800301e:	b2da      	uxtb	r2, r3
 8003020:	8979      	ldrh	r1, [r7, #10]
 8003022:	2300      	movs	r3, #0
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 fb58 	bl	80036e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d19e      	bne.n	8002f78 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 fa2a 	bl	8003498 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e01a      	b.n	8003084 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2220      	movs	r2, #32
 8003054:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	4b0a      	ldr	r3, [pc, #40]	@ (800308c <HAL_I2C_Mem_Write+0x224>)
 8003062:	400b      	ands	r3, r1
 8003064:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	e000      	b.n	8003084 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003082:	2302      	movs	r3, #2
  }
}
 8003084:	4618      	mov	r0, r3
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	fe00e800 	.word	0xfe00e800

08003090 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08a      	sub	sp, #40	@ 0x28
 8003094:	af02      	add	r7, sp, #8
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	460b      	mov	r3, r1
 800309e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	f040 80d2 	bne.w	8003256 <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030c0:	d101      	bne.n	80030c6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80030c2:	2302      	movs	r3, #2
 80030c4:	e0c8      	b.n	8003258 <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_I2C_IsDeviceReady+0x44>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e0c1      	b.n	8003258 <HAL_I2C_IsDeviceReady+0x1c8>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2224      	movs	r2, #36	@ 0x24
 80030e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d105      	bne.n	80030fe <HAL_I2C_IsDeviceReady+0x6e>
 80030f2:	897b      	ldrh	r3, [r7, #10]
 80030f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030f8:	4b59      	ldr	r3, [pc, #356]	@ (8003260 <HAL_I2C_IsDeviceReady+0x1d0>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	e004      	b.n	8003108 <HAL_I2C_IsDeviceReady+0x78>
 80030fe:	897b      	ldrh	r3, [r7, #10]
 8003100:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003104:	4b57      	ldr	r3, [pc, #348]	@ (8003264 <HAL_I2C_IsDeviceReady+0x1d4>)
 8003106:	4313      	orrs	r3, r2
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800310e:	f7fe ff89 	bl	8002024 <HAL_GetTick>
 8003112:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b20      	cmp	r3, #32
 8003120:	bf0c      	ite	eq
 8003122:	2301      	moveq	r3, #1
 8003124:	2300      	movne	r3, #0
 8003126:	b2db      	uxtb	r3, r3
 8003128:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b10      	cmp	r3, #16
 8003136:	bf0c      	ite	eq
 8003138:	2301      	moveq	r3, #1
 800313a:	2300      	movne	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003140:	e034      	b.n	80031ac <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003148:	d01a      	beq.n	8003180 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800314a:	f7fe ff6b 	bl	8002024 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d302      	bcc.n	8003160 <HAL_I2C_IsDeviceReady+0xd0>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10f      	bne.n	8003180 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316c:	f043 0220 	orr.w	r2, r3, #32
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e06b      	b.n	8003258 <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f003 0320 	and.w	r3, r3, #32
 800318a:	2b20      	cmp	r3, #32
 800318c:	bf0c      	ite	eq
 800318e:	2301      	moveq	r3, #1
 8003190:	2300      	movne	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b10      	cmp	r3, #16
 80031a2:	bf0c      	ite	eq
 80031a4:	2301      	moveq	r3, #1
 80031a6:	2300      	movne	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80031ac:	7ffb      	ldrb	r3, [r7, #31]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d102      	bne.n	80031b8 <HAL_I2C_IsDeviceReady+0x128>
 80031b2:	7fbb      	ldrb	r3, [r7, #30]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0c4      	beq.n	8003142 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	2b10      	cmp	r3, #16
 80031c4:	d01a      	beq.n	80031fc <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2200      	movs	r2, #0
 80031ce:	2120      	movs	r1, #32
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f8c1 	bl	8003358 <I2C_WaitOnFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e03b      	b.n	8003258 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2220      	movs	r2, #32
 80031e6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e02d      	b.n	8003258 <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2200      	movs	r2, #0
 8003204:	2120      	movs	r1, #32
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f8a6 	bl	8003358 <I2C_WaitOnFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e020      	b.n	8003258 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2210      	movs	r2, #16
 800321c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2220      	movs	r2, #32
 8003224:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	3301      	adds	r3, #1
 800322a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	429a      	cmp	r2, r3
 8003232:	f63f af5a 	bhi.w	80030ea <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003242:	f043 0220 	orr.w	r2, r3, #32
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 8003256:	2302      	movs	r3, #2
  }
}
 8003258:	4618      	mov	r0, r3
 800325a:	3720      	adds	r7, #32
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	02002000 	.word	0x02002000
 8003264:	02002800 	.word	0x02002800

08003268 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af02      	add	r7, sp, #8
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	4608      	mov	r0, r1
 8003272:	4611      	mov	r1, r2
 8003274:	461a      	mov	r2, r3
 8003276:	4603      	mov	r3, r0
 8003278:	817b      	strh	r3, [r7, #10]
 800327a:	460b      	mov	r3, r1
 800327c:	813b      	strh	r3, [r7, #8]
 800327e:	4613      	mov	r3, r2
 8003280:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003282:	88fb      	ldrh	r3, [r7, #6]
 8003284:	b2da      	uxtb	r2, r3
 8003286:	8979      	ldrh	r1, [r7, #10]
 8003288:	4b20      	ldr	r3, [pc, #128]	@ (800330c <I2C_RequestMemoryWrite+0xa4>)
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 fa25 	bl	80036e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	69b9      	ldr	r1, [r7, #24]
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 f8b5 	bl	800340a <I2C_WaitOnTXISFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e02c      	b.n	8003304 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d105      	bne.n	80032bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032b0:	893b      	ldrh	r3, [r7, #8]
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80032ba:	e015      	b.n	80032e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032bc:	893b      	ldrh	r3, [r7, #8]
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ca:	69fa      	ldr	r2, [r7, #28]
 80032cc:	69b9      	ldr	r1, [r7, #24]
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f89b 	bl	800340a <I2C_WaitOnTXISFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e012      	b.n	8003304 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032de:	893b      	ldrh	r3, [r7, #8]
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	2200      	movs	r2, #0
 80032f0:	2180      	movs	r1, #128	@ 0x80
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f830 	bl	8003358 <I2C_WaitOnFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	80002000 	.word	0x80002000

08003310 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b02      	cmp	r3, #2
 8003324:	d103      	bne.n	800332e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2200      	movs	r2, #0
 800332c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b01      	cmp	r3, #1
 800333a:	d007      	beq.n	800334c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	619a      	str	r2, [r3, #24]
  }
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	4613      	mov	r3, r2
 8003366:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003368:	e03b      	b.n	80033e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	6839      	ldr	r1, [r7, #0]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f8d6 	bl	8003520 <I2C_IsErrorOccurred>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e041      	b.n	8003402 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003384:	d02d      	beq.n	80033e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003386:	f7fe fe4d 	bl	8002024 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d302      	bcc.n	800339c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d122      	bne.n	80033e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699a      	ldr	r2, [r3, #24]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	4013      	ands	r3, r2
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	bf0c      	ite	eq
 80033ac:	2301      	moveq	r3, #1
 80033ae:	2300      	movne	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	461a      	mov	r2, r3
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d113      	bne.n	80033e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033be:	f043 0220 	orr.w	r2, r3, #32
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e00f      	b.n	8003402 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	699a      	ldr	r2, [r3, #24]
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4013      	ands	r3, r2
 80033ec:	68ba      	ldr	r2, [r7, #8]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	bf0c      	ite	eq
 80033f2:	2301      	moveq	r3, #1
 80033f4:	2300      	movne	r3, #0
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d0b4      	beq.n	800336a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003416:	e033      	b.n	8003480 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f87f 	bl	8003520 <I2C_IsErrorOccurred>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e031      	b.n	8003490 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003432:	d025      	beq.n	8003480 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003434:	f7fe fdf6 	bl	8002024 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	429a      	cmp	r2, r3
 8003442:	d302      	bcc.n	800344a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d11a      	bne.n	8003480 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b02      	cmp	r3, #2
 8003456:	d013      	beq.n	8003480 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345c:	f043 0220 	orr.w	r2, r3, #32
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e007      	b.n	8003490 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b02      	cmp	r3, #2
 800348c:	d1c4      	bne.n	8003418 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034a4:	e02f      	b.n	8003506 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68b9      	ldr	r1, [r7, #8]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 f838 	bl	8003520 <I2C_IsErrorOccurred>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e02d      	b.n	8003516 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ba:	f7fe fdb3 	bl	8002024 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d302      	bcc.n	80034d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d11a      	bne.n	8003506 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d013      	beq.n	8003506 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e2:	f043 0220 	orr.w	r2, r3, #32
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e007      	b.n	8003516 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b20      	cmp	r3, #32
 8003512:	d1c8      	bne.n	80034a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08a      	sub	sp, #40	@ 0x28
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f003 0310 	and.w	r3, r3, #16
 8003548:	2b00      	cmp	r3, #0
 800354a:	d068      	beq.n	800361e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2210      	movs	r2, #16
 8003552:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003554:	e049      	b.n	80035ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355c:	d045      	beq.n	80035ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800355e:	f7fe fd61 	bl	8002024 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	429a      	cmp	r2, r3
 800356c:	d302      	bcc.n	8003574 <I2C_IsErrorOccurred+0x54>
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d13a      	bne.n	80035ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800357e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003586:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003592:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003596:	d121      	bne.n	80035dc <I2C_IsErrorOccurred+0xbc>
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800359e:	d01d      	beq.n	80035dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80035a0:	7cfb      	ldrb	r3, [r7, #19]
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	d01a      	beq.n	80035dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035b6:	f7fe fd35 	bl	8002024 <HAL_GetTick>
 80035ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035bc:	e00e      	b.n	80035dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035be:	f7fe fd31 	bl	8002024 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b19      	cmp	r3, #25
 80035ca:	d907      	bls.n	80035dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	f043 0320 	orr.w	r3, r3, #32
 80035d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80035da:	e006      	b.n	80035ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d1e9      	bne.n	80035be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d003      	beq.n	8003600 <I2C_IsErrorOccurred+0xe0>
 80035f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0aa      	beq.n	8003556 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003600:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003604:	2b00      	cmp	r3, #0
 8003606:	d103      	bne.n	8003610 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2220      	movs	r2, #32
 800360e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	f043 0304 	orr.w	r3, r3, #4
 8003616:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00b      	beq.n	8003648 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003640:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00b      	beq.n	800366a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	f043 0308 	orr.w	r3, r3, #8
 8003658:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003662:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00b      	beq.n	800368c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	f043 0302 	orr.w	r3, r3, #2
 800367a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003684:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800368c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01c      	beq.n	80036ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f7ff fe3b 	bl	8003310 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6859      	ldr	r1, [r3, #4]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	4b0d      	ldr	r3, [pc, #52]	@ (80036dc <I2C_IsErrorOccurred+0x1bc>)
 80036a6:	400b      	ands	r3, r1
 80036a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	431a      	orrs	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80036ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3728      	adds	r7, #40	@ 0x28
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	fe00e800 	.word	0xfe00e800

080036e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	607b      	str	r3, [r7, #4]
 80036ea:	460b      	mov	r3, r1
 80036ec:	817b      	strh	r3, [r7, #10]
 80036ee:	4613      	mov	r3, r2
 80036f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036f2:	897b      	ldrh	r3, [r7, #10]
 80036f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036f8:	7a7b      	ldrb	r3, [r7, #9]
 80036fa:	041b      	lsls	r3, r3, #16
 80036fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003700:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	4313      	orrs	r3, r2
 800370a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800370e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	0d5b      	lsrs	r3, r3, #21
 800371a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800371e:	4b08      	ldr	r3, [pc, #32]	@ (8003740 <I2C_TransferConfig+0x60>)
 8003720:	430b      	orrs	r3, r1
 8003722:	43db      	mvns	r3, r3
 8003724:	ea02 0103 	and.w	r1, r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	430a      	orrs	r2, r1
 8003730:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003732:	bf00      	nop
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	03ff63ff 	.word	0x03ff63ff

08003744 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b20      	cmp	r3, #32
 8003758:	d138      	bne.n	80037cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003764:	2302      	movs	r3, #2
 8003766:	e032      	b.n	80037ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2224      	movs	r2, #36	@ 0x24
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003796:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6819      	ldr	r1, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	e000      	b.n	80037ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037cc:	2302      	movs	r3, #2
  }
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037da:	b480      	push	{r7}
 80037dc:	b085      	sub	sp, #20
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d139      	bne.n	8003864 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e033      	b.n	8003866 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2224      	movs	r2, #36	@ 0x24
 800380a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0201 	bic.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800382c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	021b      	lsls	r3, r3, #8
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	4313      	orrs	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	e000      	b.n	8003866 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003864:	2302      	movs	r3, #2
  }
}
 8003866:	4618      	mov	r0, r3
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b086      	sub	sp, #24
 8003876:	af02      	add	r7, sp, #8
 8003878:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e108      	b.n	8003a96 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fd ffac 	bl	80017fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2203      	movs	r2, #3
 80038a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038b2:	d102      	bne.n	80038ba <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f003 f816 	bl	80068f0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6818      	ldr	r0, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	7c1a      	ldrb	r2, [r3, #16]
 80038cc:	f88d 2000 	strb.w	r2, [sp]
 80038d0:	3304      	adds	r3, #4
 80038d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038d4:	f002 ffb2 	bl	800683c <USB_CoreInit>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d005      	beq.n	80038ea <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2202      	movs	r2, #2
 80038e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e0d5      	b.n	8003a96 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2100      	movs	r1, #0
 80038f0:	4618      	mov	r0, r3
 80038f2:	f003 f80e 	bl	8006912 <USB_SetCurrentMode>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e0c6      	b.n	8003a96 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003908:	2300      	movs	r3, #0
 800390a:	73fb      	strb	r3, [r7, #15]
 800390c:	e04a      	b.n	80039a4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800390e:	7bfa      	ldrb	r2, [r7, #15]
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	4613      	mov	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	4413      	add	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	3315      	adds	r3, #21
 800391e:	2201      	movs	r2, #1
 8003920:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003922:	7bfa      	ldrb	r2, [r7, #15]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4413      	add	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	3314      	adds	r3, #20
 8003932:	7bfa      	ldrb	r2, [r7, #15]
 8003934:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003936:	7bfa      	ldrb	r2, [r7, #15]
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	b298      	uxth	r0, r3
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	4413      	add	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	332e      	adds	r3, #46	@ 0x2e
 800394a:	4602      	mov	r2, r0
 800394c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800394e:	7bfa      	ldrb	r2, [r7, #15]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	4413      	add	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	3318      	adds	r3, #24
 800395e:	2200      	movs	r2, #0
 8003960:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003962:	7bfa      	ldrb	r2, [r7, #15]
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	4413      	add	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	331c      	adds	r3, #28
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003976:	7bfa      	ldrb	r2, [r7, #15]
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	4613      	mov	r3, r2
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	4413      	add	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	3320      	adds	r3, #32
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800398a:	7bfa      	ldrb	r2, [r7, #15]
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	4413      	add	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	3324      	adds	r3, #36	@ 0x24
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800399e:	7bfb      	ldrb	r3, [r7, #15]
 80039a0:	3301      	adds	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	791b      	ldrb	r3, [r3, #4]
 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d3af      	bcc.n	800390e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ae:	2300      	movs	r3, #0
 80039b0:	73fb      	strb	r3, [r7, #15]
 80039b2:	e044      	b.n	8003a3e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039b4:	7bfa      	ldrb	r2, [r7, #15]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80039c6:	2200      	movs	r2, #0
 80039c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039ca:	7bfa      	ldrb	r2, [r7, #15]
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80039dc:	7bfa      	ldrb	r2, [r7, #15]
 80039de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039e0:	7bfa      	ldrb	r2, [r7, #15]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80039f2:	2200      	movs	r2, #0
 80039f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039f6:	7bfa      	ldrb	r2, [r7, #15]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a0c:	7bfa      	ldrb	r2, [r7, #15]
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a22:	7bfa      	ldrb	r2, [r7, #15]
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	4613      	mov	r3, r2
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	791b      	ldrb	r3, [r3, #4]
 8003a42:	7bfa      	ldrb	r2, [r7, #15]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d3b5      	bcc.n	80039b4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6818      	ldr	r0, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	7c1a      	ldrb	r2, [r3, #16]
 8003a50:	f88d 2000 	strb.w	r2, [sp]
 8003a54:	3304      	adds	r3, #4
 8003a56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a58:	f002 ffa8 	bl	80069ac <USB_DevInit>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2202      	movs	r2, #2
 8003a66:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e013      	b.n	8003a96 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	7b1b      	ldrb	r3, [r3, #12]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d102      	bne.n	8003a8a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f80b 	bl	8003aa0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f003 f963 	bl	8006d5a <USB_DevDisconnect>

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ace:	4b05      	ldr	r3, [pc, #20]	@ (8003ae4 <HAL_PCDEx_ActivateLPM+0x44>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	10000003 	.word	0x10000003

08003ae8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aec:	4b05      	ldr	r3, [pc, #20]	@ (8003b04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a04      	ldr	r2, [pc, #16]	@ (8003b04 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af6:	6013      	str	r3, [r2, #0]
}
 8003af8:	bf00      	nop
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40007000 	.word	0x40007000

08003b08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b10:	2300      	movs	r3, #0
 8003b12:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e291      	b.n	8004042 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 8087 	beq.w	8003c3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b2c:	4b96      	ldr	r3, [pc, #600]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 030c 	and.w	r3, r3, #12
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d00c      	beq.n	8003b52 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b38:	4b93      	ldr	r3, [pc, #588]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 030c 	and.w	r3, r3, #12
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d112      	bne.n	8003b6a <HAL_RCC_OscConfig+0x62>
 8003b44:	4b90      	ldr	r3, [pc, #576]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b50:	d10b      	bne.n	8003b6a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b52:	4b8d      	ldr	r3, [pc, #564]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d06c      	beq.n	8003c38 <HAL_RCC_OscConfig+0x130>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d168      	bne.n	8003c38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e26b      	b.n	8004042 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b72:	d106      	bne.n	8003b82 <HAL_RCC_OscConfig+0x7a>
 8003b74:	4b84      	ldr	r3, [pc, #528]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a83      	ldr	r2, [pc, #524]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003b7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	e02e      	b.n	8003be0 <HAL_RCC_OscConfig+0xd8>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x9c>
 8003b8a:	4b7f      	ldr	r3, [pc, #508]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003b90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	4b7c      	ldr	r3, [pc, #496]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a7b      	ldr	r2, [pc, #492]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003b9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	e01d      	b.n	8003be0 <HAL_RCC_OscConfig+0xd8>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCC_OscConfig+0xc0>
 8003bae:	4b76      	ldr	r3, [pc, #472]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a75      	ldr	r2, [pc, #468]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003bb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	4b73      	ldr	r3, [pc, #460]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a72      	ldr	r2, [pc, #456]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	e00b      	b.n	8003be0 <HAL_RCC_OscConfig+0xd8>
 8003bc8:	4b6f      	ldr	r3, [pc, #444]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a6e      	ldr	r2, [pc, #440]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	4b6c      	ldr	r3, [pc, #432]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a6b      	ldr	r2, [pc, #428]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003bda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d013      	beq.n	8003c10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7fe fa1c 	bl	8002024 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf0:	f7fe fa18 	bl	8002024 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	@ 0x64
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e21f      	b.n	8004042 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c02:	4b61      	ldr	r3, [pc, #388]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCC_OscConfig+0xe8>
 8003c0e:	e014      	b.n	8003c3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fe fa08 	bl	8002024 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c18:	f7fe fa04 	bl	8002024 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	@ 0x64
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e20b      	b.n	8004042 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2a:	4b57      	ldr	r3, [pc, #348]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x110>
 8003c36:	e000      	b.n	8003c3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d069      	beq.n	8003d1a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c46:	4b50      	ldr	r3, [pc, #320]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00b      	beq.n	8003c6a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c52:	4b4d      	ldr	r3, [pc, #308]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d11c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x190>
 8003c5e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d116      	bne.n	8003c98 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6a:	4b47      	ldr	r3, [pc, #284]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_RCC_OscConfig+0x17a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d001      	beq.n	8003c82 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e1df      	b.n	8004042 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c82:	4b41      	ldr	r3, [pc, #260]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	493d      	ldr	r1, [pc, #244]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c96:	e040      	b.n	8003d1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d023      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ca0:	4b39      	ldr	r3, [pc, #228]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a38      	ldr	r2, [pc, #224]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cac:	f7fe f9ba 	bl	8002024 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb4:	f7fe f9b6 	bl	8002024 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e1bd      	b.n	8004042 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc6:	4b30      	ldr	r3, [pc, #192]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	4929      	ldr	r1, [pc, #164]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	600b      	str	r3, [r1, #0]
 8003ce6:	e018      	b.n	8003d1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ce8:	4b27      	ldr	r3, [pc, #156]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a26      	ldr	r2, [pc, #152]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003cee:	f023 0301 	bic.w	r3, r3, #1
 8003cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fe f996 	bl	8002024 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cfc:	f7fe f992 	bl	8002024 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e199      	b.n	8004042 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d038      	beq.n	8003d98 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d019      	beq.n	8003d62 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d2e:	4b16      	ldr	r3, [pc, #88]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d32:	4a15      	ldr	r2, [pc, #84]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3a:	f7fe f973 	bl	8002024 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d42:	f7fe f96f 	bl	8002024 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e176      	b.n	8004042 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d54:	4b0c      	ldr	r3, [pc, #48]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003d56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCC_OscConfig+0x23a>
 8003d60:	e01a      	b.n	8003d98 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d62:	4b09      	ldr	r3, [pc, #36]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d66:	4a08      	ldr	r2, [pc, #32]	@ (8003d88 <HAL_RCC_OscConfig+0x280>)
 8003d68:	f023 0301 	bic.w	r3, r3, #1
 8003d6c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6e:	f7fe f959 	bl	8002024 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d74:	e00a      	b.n	8003d8c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d76:	f7fe f955 	bl	8002024 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d903      	bls.n	8003d8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e15c      	b.n	8004042 <HAL_RCC_OscConfig+0x53a>
 8003d88:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d8c:	4b91      	ldr	r3, [pc, #580]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003d8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1ee      	bne.n	8003d76 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 80a4 	beq.w	8003eee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da6:	4b8b      	ldr	r3, [pc, #556]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10d      	bne.n	8003dce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db2:	4b88      	ldr	r3, [pc, #544]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db6:	4a87      	ldr	r2, [pc, #540]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dbe:	4b85      	ldr	r3, [pc, #532]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dce:	4b82      	ldr	r3, [pc, #520]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d118      	bne.n	8003e0c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003dda:	4b7f      	ldr	r3, [pc, #508]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a7e      	ldr	r2, [pc, #504]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003de6:	f7fe f91d 	bl	8002024 <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dee:	f7fe f919 	bl	8002024 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b64      	cmp	r3, #100	@ 0x64
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e120      	b.n	8004042 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e00:	4b75      	ldr	r3, [pc, #468]	@ (8003fd8 <HAL_RCC_OscConfig+0x4d0>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0f0      	beq.n	8003dee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d106      	bne.n	8003e22 <HAL_RCC_OscConfig+0x31a>
 8003e14:	4b6f      	ldr	r3, [pc, #444]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e18:	4a6e      	ldr	r2, [pc, #440]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e20:	e02d      	b.n	8003e7e <HAL_RCC_OscConfig+0x376>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10c      	bne.n	8003e44 <HAL_RCC_OscConfig+0x33c>
 8003e2a:	4b6a      	ldr	r3, [pc, #424]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2e:	4a69      	ldr	r2, [pc, #420]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003e30:	f023 0301 	bic.w	r3, r3, #1
 8003e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e36:	4b67      	ldr	r3, [pc, #412]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3a:	4a66      	ldr	r2, [pc, #408]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003e3c:	f023 0304 	bic.w	r3, r3, #4
 8003e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e42:	e01c      	b.n	8003e7e <HAL_RCC_OscConfig+0x376>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b05      	cmp	r3, #5
 8003e4a:	d10c      	bne.n	8003e66 <HAL_RCC_OscConfig+0x35e>
 8003e4c:	4b61      	ldr	r3, [pc, #388]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e50:	4a60      	ldr	r2, [pc, #384]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003e52:	f043 0304 	orr.w	r3, r3, #4
 8003e56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e58:	4b5e      	ldr	r3, [pc, #376]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5c:	4a5d      	ldr	r2, [pc, #372]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e64:	e00b      	b.n	8003e7e <HAL_RCC_OscConfig+0x376>
 8003e66:	4b5b      	ldr	r3, [pc, #364]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6a:	4a5a      	ldr	r2, [pc, #360]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e72:	4b58      	ldr	r3, [pc, #352]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e76:	4a57      	ldr	r2, [pc, #348]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003e78:	f023 0304 	bic.w	r3, r3, #4
 8003e7c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d015      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e86:	f7fe f8cd 	bl	8002024 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8c:	e00a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8e:	f7fe f8c9 	bl	8002024 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e0ce      	b.n	8004042 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea4:	4b4b      	ldr	r3, [pc, #300]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0ee      	beq.n	8003e8e <HAL_RCC_OscConfig+0x386>
 8003eb0:	e014      	b.n	8003edc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb2:	f7fe f8b7 	bl	8002024 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb8:	e00a      	b.n	8003ed0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eba:	f7fe f8b3 	bl	8002024 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e0b8      	b.n	8004042 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed0:	4b40      	ldr	r3, [pc, #256]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1ee      	bne.n	8003eba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003edc:	7dfb      	ldrb	r3, [r7, #23]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d105      	bne.n	8003eee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ee2:	4b3c      	ldr	r3, [pc, #240]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee6:	4a3b      	ldr	r2, [pc, #236]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003ee8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eec:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 80a4 	beq.w	8004040 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ef8:	4b36      	ldr	r3, [pc, #216]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 030c 	and.w	r3, r3, #12
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d06b      	beq.n	8003fdc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d149      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f0c:	4b31      	ldr	r3, [pc, #196]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a30      	ldr	r2, [pc, #192]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003f12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f18:	f7fe f884 	bl	8002024 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f20:	f7fe f880 	bl	8002024 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e087      	b.n	8004042 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f32:	4b28      	ldr	r3, [pc, #160]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f0      	bne.n	8003f20 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69da      	ldr	r2, [r3, #28]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	019b      	lsls	r3, r3, #6
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f54:	085b      	lsrs	r3, r3, #1
 8003f56:	3b01      	subs	r3, #1
 8003f58:	041b      	lsls	r3, r3, #16
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f60:	061b      	lsls	r3, r3, #24
 8003f62:	4313      	orrs	r3, r2
 8003f64:	4a1b      	ldr	r2, [pc, #108]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003f66:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003f6a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f6c:	4b19      	ldr	r3, [pc, #100]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a18      	ldr	r2, [pc, #96]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003f72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fe f854 	bl	8002024 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f80:	f7fe f850 	bl	8002024 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e057      	b.n	8004042 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f92:	4b10      	ldr	r3, [pc, #64]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0f0      	beq.n	8003f80 <HAL_RCC_OscConfig+0x478>
 8003f9e:	e04f      	b.n	8004040 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a0b      	ldr	r2, [pc, #44]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003fa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fac:	f7fe f83a 	bl	8002024 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb4:	f7fe f836 	bl	8002024 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e03d      	b.n	8004042 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc6:	4b03      	ldr	r3, [pc, #12]	@ (8003fd4 <HAL_RCC_OscConfig+0x4cc>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x4ac>
 8003fd2:	e035      	b.n	8004040 <HAL_RCC_OscConfig+0x538>
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800404c <HAL_RCC_OscConfig+0x544>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d028      	beq.n	800403c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d121      	bne.n	800403c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004002:	429a      	cmp	r2, r3
 8004004:	d11a      	bne.n	800403c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800400c:	4013      	ands	r3, r2
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004012:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004014:	4293      	cmp	r3, r2
 8004016:	d111      	bne.n	800403c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004022:	085b      	lsrs	r3, r3, #1
 8004024:	3b01      	subs	r3, #1
 8004026:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004028:	429a      	cmp	r2, r3
 800402a:	d107      	bne.n	800403c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004036:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004038:	429a      	cmp	r2, r3
 800403a:	d001      	beq.n	8004040 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40023800 	.word	0x40023800

08004050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800405a:	2300      	movs	r3, #0
 800405c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0d0      	b.n	800420a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004068:	4b6a      	ldr	r3, [pc, #424]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d910      	bls.n	8004098 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004076:	4b67      	ldr	r3, [pc, #412]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f023 020f 	bic.w	r2, r3, #15
 800407e:	4965      	ldr	r1, [pc, #404]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	4313      	orrs	r3, r2
 8004084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004086:	4b63      	ldr	r3, [pc, #396]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0b8      	b.n	800420a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d020      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b0:	4b59      	ldr	r3, [pc, #356]	@ (8004218 <HAL_RCC_ClockConfig+0x1c8>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4a58      	ldr	r2, [pc, #352]	@ (8004218 <HAL_RCC_ClockConfig+0x1c8>)
 80040b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040c8:	4b53      	ldr	r3, [pc, #332]	@ (8004218 <HAL_RCC_ClockConfig+0x1c8>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4a52      	ldr	r2, [pc, #328]	@ (8004218 <HAL_RCC_ClockConfig+0x1c8>)
 80040ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d4:	4b50      	ldr	r3, [pc, #320]	@ (8004218 <HAL_RCC_ClockConfig+0x1c8>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	494d      	ldr	r1, [pc, #308]	@ (8004218 <HAL_RCC_ClockConfig+0x1c8>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d040      	beq.n	8004174 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d107      	bne.n	800410a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fa:	4b47      	ldr	r3, [pc, #284]	@ (8004218 <HAL_RCC_ClockConfig+0x1c8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d115      	bne.n	8004132 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e07f      	b.n	800420a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d107      	bne.n	8004122 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004112:	4b41      	ldr	r3, [pc, #260]	@ (8004218 <HAL_RCC_ClockConfig+0x1c8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d109      	bne.n	8004132 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e073      	b.n	800420a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004122:	4b3d      	ldr	r3, [pc, #244]	@ (8004218 <HAL_RCC_ClockConfig+0x1c8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e06b      	b.n	800420a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004132:	4b39      	ldr	r3, [pc, #228]	@ (8004218 <HAL_RCC_ClockConfig+0x1c8>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f023 0203 	bic.w	r2, r3, #3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	4936      	ldr	r1, [pc, #216]	@ (8004218 <HAL_RCC_ClockConfig+0x1c8>)
 8004140:	4313      	orrs	r3, r2
 8004142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004144:	f7fd ff6e 	bl	8002024 <HAL_GetTick>
 8004148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800414a:	e00a      	b.n	8004162 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800414c:	f7fd ff6a 	bl	8002024 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800415a:	4293      	cmp	r3, r2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e053      	b.n	800420a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004162:	4b2d      	ldr	r3, [pc, #180]	@ (8004218 <HAL_RCC_ClockConfig+0x1c8>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 020c 	and.w	r2, r3, #12
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	429a      	cmp	r2, r3
 8004172:	d1eb      	bne.n	800414c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004174:	4b27      	ldr	r3, [pc, #156]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d210      	bcs.n	80041a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004182:	4b24      	ldr	r3, [pc, #144]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f023 020f 	bic.w	r2, r3, #15
 800418a:	4922      	ldr	r1, [pc, #136]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	4313      	orrs	r3, r2
 8004190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004192:	4b20      	ldr	r3, [pc, #128]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e032      	b.n	800420a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b0:	4b19      	ldr	r3, [pc, #100]	@ (8004218 <HAL_RCC_ClockConfig+0x1c8>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	4916      	ldr	r1, [pc, #88]	@ (8004218 <HAL_RCC_ClockConfig+0x1c8>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d009      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041ce:	4b12      	ldr	r3, [pc, #72]	@ (8004218 <HAL_RCC_ClockConfig+0x1c8>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	490e      	ldr	r1, [pc, #56]	@ (8004218 <HAL_RCC_ClockConfig+0x1c8>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041e2:	f000 f821 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 80041e6:	4602      	mov	r2, r0
 80041e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004218 <HAL_RCC_ClockConfig+0x1c8>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	091b      	lsrs	r3, r3, #4
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	490a      	ldr	r1, [pc, #40]	@ (800421c <HAL_RCC_ClockConfig+0x1cc>)
 80041f4:	5ccb      	ldrb	r3, [r1, r3]
 80041f6:	fa22 f303 	lsr.w	r3, r2, r3
 80041fa:	4a09      	ldr	r2, [pc, #36]	@ (8004220 <HAL_RCC_ClockConfig+0x1d0>)
 80041fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041fe:	4b09      	ldr	r3, [pc, #36]	@ (8004224 <HAL_RCC_ClockConfig+0x1d4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f7fd feca 	bl	8001f9c <HAL_InitTick>

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40023c00 	.word	0x40023c00
 8004218:	40023800 	.word	0x40023800
 800421c:	080077d8 	.word	0x080077d8
 8004220:	20000000 	.word	0x20000000
 8004224:	20000004 	.word	0x20000004

08004228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800422c:	b094      	sub	sp, #80	@ 0x50
 800422e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	647b      	str	r3, [r7, #68]	@ 0x44
 8004234:	2300      	movs	r3, #0
 8004236:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004238:	2300      	movs	r3, #0
 800423a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004240:	4b79      	ldr	r3, [pc, #484]	@ (8004428 <HAL_RCC_GetSysClockFreq+0x200>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 030c 	and.w	r3, r3, #12
 8004248:	2b08      	cmp	r3, #8
 800424a:	d00d      	beq.n	8004268 <HAL_RCC_GetSysClockFreq+0x40>
 800424c:	2b08      	cmp	r3, #8
 800424e:	f200 80e1 	bhi.w	8004414 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0x34>
 8004256:	2b04      	cmp	r3, #4
 8004258:	d003      	beq.n	8004262 <HAL_RCC_GetSysClockFreq+0x3a>
 800425a:	e0db      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800425c:	4b73      	ldr	r3, [pc, #460]	@ (800442c <HAL_RCC_GetSysClockFreq+0x204>)
 800425e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004260:	e0db      	b.n	800441a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004262:	4b73      	ldr	r3, [pc, #460]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x208>)
 8004264:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004266:	e0d8      	b.n	800441a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004268:	4b6f      	ldr	r3, [pc, #444]	@ (8004428 <HAL_RCC_GetSysClockFreq+0x200>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004270:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004272:	4b6d      	ldr	r3, [pc, #436]	@ (8004428 <HAL_RCC_GetSysClockFreq+0x200>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d063      	beq.n	8004346 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800427e:	4b6a      	ldr	r3, [pc, #424]	@ (8004428 <HAL_RCC_GetSysClockFreq+0x200>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	099b      	lsrs	r3, r3, #6
 8004284:	2200      	movs	r2, #0
 8004286:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004288:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800428a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800428c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004290:	633b      	str	r3, [r7, #48]	@ 0x30
 8004292:	2300      	movs	r3, #0
 8004294:	637b      	str	r3, [r7, #52]	@ 0x34
 8004296:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800429a:	4622      	mov	r2, r4
 800429c:	462b      	mov	r3, r5
 800429e:	f04f 0000 	mov.w	r0, #0
 80042a2:	f04f 0100 	mov.w	r1, #0
 80042a6:	0159      	lsls	r1, r3, #5
 80042a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042ac:	0150      	lsls	r0, r2, #5
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4621      	mov	r1, r4
 80042b4:	1a51      	subs	r1, r2, r1
 80042b6:	6139      	str	r1, [r7, #16]
 80042b8:	4629      	mov	r1, r5
 80042ba:	eb63 0301 	sbc.w	r3, r3, r1
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042cc:	4659      	mov	r1, fp
 80042ce:	018b      	lsls	r3, r1, #6
 80042d0:	4651      	mov	r1, sl
 80042d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042d6:	4651      	mov	r1, sl
 80042d8:	018a      	lsls	r2, r1, #6
 80042da:	4651      	mov	r1, sl
 80042dc:	ebb2 0801 	subs.w	r8, r2, r1
 80042e0:	4659      	mov	r1, fp
 80042e2:	eb63 0901 	sbc.w	r9, r3, r1
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042fa:	4690      	mov	r8, r2
 80042fc:	4699      	mov	r9, r3
 80042fe:	4623      	mov	r3, r4
 8004300:	eb18 0303 	adds.w	r3, r8, r3
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	462b      	mov	r3, r5
 8004308:	eb49 0303 	adc.w	r3, r9, r3
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	f04f 0300 	mov.w	r3, #0
 8004316:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800431a:	4629      	mov	r1, r5
 800431c:	024b      	lsls	r3, r1, #9
 800431e:	4621      	mov	r1, r4
 8004320:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004324:	4621      	mov	r1, r4
 8004326:	024a      	lsls	r2, r1, #9
 8004328:	4610      	mov	r0, r2
 800432a:	4619      	mov	r1, r3
 800432c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800432e:	2200      	movs	r2, #0
 8004330:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004332:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004334:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004338:	f7fb ffba 	bl	80002b0 <__aeabi_uldivmod>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4613      	mov	r3, r2
 8004342:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004344:	e058      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004346:	4b38      	ldr	r3, [pc, #224]	@ (8004428 <HAL_RCC_GetSysClockFreq+0x200>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	099b      	lsrs	r3, r3, #6
 800434c:	2200      	movs	r2, #0
 800434e:	4618      	mov	r0, r3
 8004350:	4611      	mov	r1, r2
 8004352:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004356:	623b      	str	r3, [r7, #32]
 8004358:	2300      	movs	r3, #0
 800435a:	627b      	str	r3, [r7, #36]	@ 0x24
 800435c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004360:	4642      	mov	r2, r8
 8004362:	464b      	mov	r3, r9
 8004364:	f04f 0000 	mov.w	r0, #0
 8004368:	f04f 0100 	mov.w	r1, #0
 800436c:	0159      	lsls	r1, r3, #5
 800436e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004372:	0150      	lsls	r0, r2, #5
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4641      	mov	r1, r8
 800437a:	ebb2 0a01 	subs.w	sl, r2, r1
 800437e:	4649      	mov	r1, r9
 8004380:	eb63 0b01 	sbc.w	fp, r3, r1
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004390:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004394:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004398:	ebb2 040a 	subs.w	r4, r2, sl
 800439c:	eb63 050b 	sbc.w	r5, r3, fp
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	00eb      	lsls	r3, r5, #3
 80043aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ae:	00e2      	lsls	r2, r4, #3
 80043b0:	4614      	mov	r4, r2
 80043b2:	461d      	mov	r5, r3
 80043b4:	4643      	mov	r3, r8
 80043b6:	18e3      	adds	r3, r4, r3
 80043b8:	603b      	str	r3, [r7, #0]
 80043ba:	464b      	mov	r3, r9
 80043bc:	eb45 0303 	adc.w	r3, r5, r3
 80043c0:	607b      	str	r3, [r7, #4]
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043ce:	4629      	mov	r1, r5
 80043d0:	028b      	lsls	r3, r1, #10
 80043d2:	4621      	mov	r1, r4
 80043d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043d8:	4621      	mov	r1, r4
 80043da:	028a      	lsls	r2, r1, #10
 80043dc:	4610      	mov	r0, r2
 80043de:	4619      	mov	r1, r3
 80043e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043e2:	2200      	movs	r2, #0
 80043e4:	61bb      	str	r3, [r7, #24]
 80043e6:	61fa      	str	r2, [r7, #28]
 80043e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043ec:	f7fb ff60 	bl	80002b0 <__aeabi_uldivmod>
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4613      	mov	r3, r2
 80043f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80043f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004428 <HAL_RCC_GetSysClockFreq+0x200>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	0c1b      	lsrs	r3, r3, #16
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	3301      	adds	r3, #1
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004408:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800440a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004412:	e002      	b.n	800441a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004414:	4b05      	ldr	r3, [pc, #20]	@ (800442c <HAL_RCC_GetSysClockFreq+0x204>)
 8004416:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800441a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800441c:	4618      	mov	r0, r3
 800441e:	3750      	adds	r7, #80	@ 0x50
 8004420:	46bd      	mov	sp, r7
 8004422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004426:	bf00      	nop
 8004428:	40023800 	.word	0x40023800
 800442c:	00f42400 	.word	0x00f42400
 8004430:	007a1200 	.word	0x007a1200

08004434 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004438:	4b03      	ldr	r3, [pc, #12]	@ (8004448 <HAL_RCC_GetHCLKFreq+0x14>)
 800443a:	681b      	ldr	r3, [r3, #0]
}
 800443c:	4618      	mov	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	20000000 	.word	0x20000000

0800444c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004450:	f7ff fff0 	bl	8004434 <HAL_RCC_GetHCLKFreq>
 8004454:	4602      	mov	r2, r0
 8004456:	4b05      	ldr	r3, [pc, #20]	@ (800446c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	0a9b      	lsrs	r3, r3, #10
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	4903      	ldr	r1, [pc, #12]	@ (8004470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004462:	5ccb      	ldrb	r3, [r1, r3]
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004468:	4618      	mov	r0, r3
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40023800 	.word	0x40023800
 8004470:	080077e8 	.word	0x080077e8

08004474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004478:	f7ff ffdc 	bl	8004434 <HAL_RCC_GetHCLKFreq>
 800447c:	4602      	mov	r2, r0
 800447e:	4b05      	ldr	r3, [pc, #20]	@ (8004494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	0b5b      	lsrs	r3, r3, #13
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	4903      	ldr	r1, [pc, #12]	@ (8004498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800448a:	5ccb      	ldrb	r3, [r1, r3]
 800448c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004490:	4618      	mov	r0, r3
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40023800 	.word	0x40023800
 8004498:	080077e8 	.word	0x080077e8

0800449c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80044a8:	2300      	movs	r3, #0
 80044aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80044ac:	2300      	movs	r3, #0
 80044ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d012      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044c4:	4b69      	ldr	r3, [pc, #420]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	4a68      	ldr	r2, [pc, #416]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80044ce:	6093      	str	r3, [r2, #8]
 80044d0:	4b66      	ldr	r3, [pc, #408]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d8:	4964      	ldr	r1, [pc, #400]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80044e6:	2301      	movs	r3, #1
 80044e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d017      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044f6:	4b5d      	ldr	r3, [pc, #372]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044fc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004504:	4959      	ldr	r1, [pc, #356]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004510:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004514:	d101      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004516:	2301      	movs	r3, #1
 8004518:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004522:	2301      	movs	r3, #1
 8004524:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d017      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004532:	4b4e      	ldr	r3, [pc, #312]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004534:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004538:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004540:	494a      	ldr	r1, [pc, #296]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004550:	d101      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004552:	2301      	movs	r3, #1
 8004554:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800455e:	2301      	movs	r3, #1
 8004560:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800456e:	2301      	movs	r3, #1
 8004570:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0320 	and.w	r3, r3, #32
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 808b 	beq.w	8004696 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004580:	4b3a      	ldr	r3, [pc, #232]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004584:	4a39      	ldr	r2, [pc, #228]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800458a:	6413      	str	r3, [r2, #64]	@ 0x40
 800458c:	4b37      	ldr	r3, [pc, #220]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004598:	4b35      	ldr	r3, [pc, #212]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a34      	ldr	r2, [pc, #208]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800459e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a4:	f7fd fd3e 	bl	8002024 <HAL_GetTick>
 80045a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045aa:	e008      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ac:	f7fd fd3a 	bl	8002024 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b64      	cmp	r3, #100	@ 0x64
 80045b8:	d901      	bls.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e357      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045be:	4b2c      	ldr	r3, [pc, #176]	@ (8004670 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f0      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045ca:	4b28      	ldr	r3, [pc, #160]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d035      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d02e      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045e8:	4b20      	ldr	r3, [pc, #128]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045f2:	4b1e      	ldr	r3, [pc, #120]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f6:	4a1d      	ldr	r2, [pc, #116]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045fc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045fe:	4b1b      	ldr	r3, [pc, #108]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004602:	4a1a      	ldr	r2, [pc, #104]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004604:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004608:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800460a:	4a18      	ldr	r2, [pc, #96]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004610:	4b16      	ldr	r3, [pc, #88]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b01      	cmp	r3, #1
 800461a:	d114      	bne.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461c:	f7fd fd02 	bl	8002024 <HAL_GetTick>
 8004620:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004622:	e00a      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004624:	f7fd fcfe 	bl	8002024 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e319      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800463a:	4b0c      	ldr	r3, [pc, #48]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0ee      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800464e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004652:	d111      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004654:	4b05      	ldr	r3, [pc, #20]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004660:	4b04      	ldr	r3, [pc, #16]	@ (8004674 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004662:	400b      	ands	r3, r1
 8004664:	4901      	ldr	r1, [pc, #4]	@ (800466c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004666:	4313      	orrs	r3, r2
 8004668:	608b      	str	r3, [r1, #8]
 800466a:	e00b      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800466c:	40023800 	.word	0x40023800
 8004670:	40007000 	.word	0x40007000
 8004674:	0ffffcff 	.word	0x0ffffcff
 8004678:	4baa      	ldr	r3, [pc, #680]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	4aa9      	ldr	r2, [pc, #676]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800467e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004682:	6093      	str	r3, [r2, #8]
 8004684:	4ba7      	ldr	r3, [pc, #668]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004686:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004690:	49a4      	ldr	r1, [pc, #656]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004692:	4313      	orrs	r3, r2
 8004694:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d010      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046a2:	4ba0      	ldr	r3, [pc, #640]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046a8:	4a9e      	ldr	r2, [pc, #632]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80046b2:	4b9c      	ldr	r3, [pc, #624]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046bc:	4999      	ldr	r1, [pc, #612]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046d0:	4b94      	ldr	r3, [pc, #592]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046de:	4991      	ldr	r1, [pc, #580]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046f2:	4b8c      	ldr	r3, [pc, #560]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004700:	4988      	ldr	r1, [pc, #544]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004714:	4b83      	ldr	r3, [pc, #524]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800471a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004722:	4980      	ldr	r1, [pc, #512]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004736:	4b7b      	ldr	r3, [pc, #492]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800473c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004744:	4977      	ldr	r1, [pc, #476]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004758:	4b72      	ldr	r3, [pc, #456]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800475e:	f023 0203 	bic.w	r2, r3, #3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004766:	496f      	ldr	r1, [pc, #444]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800477a:	4b6a      	ldr	r3, [pc, #424]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800477c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004780:	f023 020c 	bic.w	r2, r3, #12
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004788:	4966      	ldr	r1, [pc, #408]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800479c:	4b61      	ldr	r3, [pc, #388]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800479e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047aa:	495e      	ldr	r1, [pc, #376]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047be:	4b59      	ldr	r3, [pc, #356]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047cc:	4955      	ldr	r1, [pc, #340]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047e0:	4b50      	ldr	r3, [pc, #320]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ee:	494d      	ldr	r1, [pc, #308]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004802:	4b48      	ldr	r3, [pc, #288]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004808:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004810:	4944      	ldr	r1, [pc, #272]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004824:	4b3f      	ldr	r3, [pc, #252]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004832:	493c      	ldr	r1, [pc, #240]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004846:	4b37      	ldr	r3, [pc, #220]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004854:	4933      	ldr	r1, [pc, #204]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004868:	4b2e      	ldr	r3, [pc, #184]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800486a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800486e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004876:	492b      	ldr	r1, [pc, #172]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d011      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800488a:	4b26      	ldr	r3, [pc, #152]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800488c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004890:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004898:	4922      	ldr	r1, [pc, #136]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048a8:	d101      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80048aa:	2301      	movs	r3, #1
 80048ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80048ba:	2301      	movs	r3, #1
 80048bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ca:	4b16      	ldr	r3, [pc, #88]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048d8:	4912      	ldr	r1, [pc, #72]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00b      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048fc:	4909      	ldr	r1, [pc, #36]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d006      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 80d9 	beq.w	8004aca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004918:	4b02      	ldr	r3, [pc, #8]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a01      	ldr	r2, [pc, #4]	@ (8004924 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800491e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004922:	e001      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004924:	40023800 	.word	0x40023800
 8004928:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800492a:	f7fd fb7b 	bl	8002024 <HAL_GetTick>
 800492e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004930:	e008      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004932:	f7fd fb77 	bl	8002024 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b64      	cmp	r3, #100	@ 0x64
 800493e:	d901      	bls.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e194      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004944:	4b6c      	ldr	r3, [pc, #432]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f0      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d021      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004960:	2b00      	cmp	r3, #0
 8004962:	d11d      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004964:	4b64      	ldr	r3, [pc, #400]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004966:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800496a:	0c1b      	lsrs	r3, r3, #16
 800496c:	f003 0303 	and.w	r3, r3, #3
 8004970:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004972:	4b61      	ldr	r3, [pc, #388]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004974:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004978:	0e1b      	lsrs	r3, r3, #24
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	019a      	lsls	r2, r3, #6
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	041b      	lsls	r3, r3, #16
 800498a:	431a      	orrs	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	061b      	lsls	r3, r3, #24
 8004990:	431a      	orrs	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	071b      	lsls	r3, r3, #28
 8004998:	4957      	ldr	r1, [pc, #348]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d004      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049b4:	d00a      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d02e      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049ca:	d129      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049cc:	4b4a      	ldr	r3, [pc, #296]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049d2:	0c1b      	lsrs	r3, r3, #16
 80049d4:	f003 0303 	and.w	r3, r3, #3
 80049d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049da:	4b47      	ldr	r3, [pc, #284]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049e0:	0f1b      	lsrs	r3, r3, #28
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	019a      	lsls	r2, r3, #6
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	041b      	lsls	r3, r3, #16
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	061b      	lsls	r3, r3, #24
 80049fa:	431a      	orrs	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	071b      	lsls	r3, r3, #28
 8004a00:	493d      	ldr	r1, [pc, #244]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a08:	4b3b      	ldr	r3, [pc, #236]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a0e:	f023 021f 	bic.w	r2, r3, #31
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a16:	3b01      	subs	r3, #1
 8004a18:	4937      	ldr	r1, [pc, #220]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01d      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a2c:	4b32      	ldr	r3, [pc, #200]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a32:	0e1b      	lsrs	r3, r3, #24
 8004a34:	f003 030f 	and.w	r3, r3, #15
 8004a38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a40:	0f1b      	lsrs	r3, r3, #28
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	019a      	lsls	r2, r3, #6
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	041b      	lsls	r3, r3, #16
 8004a54:	431a      	orrs	r2, r3
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	061b      	lsls	r3, r3, #24
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	071b      	lsls	r3, r3, #28
 8004a60:	4925      	ldr	r1, [pc, #148]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d011      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	019a      	lsls	r2, r3, #6
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	041b      	lsls	r3, r3, #16
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	061b      	lsls	r3, r3, #24
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	071b      	lsls	r3, r3, #28
 8004a90:	4919      	ldr	r1, [pc, #100]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a98:	4b17      	ldr	r3, [pc, #92]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a16      	ldr	r2, [pc, #88]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004aa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa4:	f7fd fabe 	bl	8002024 <HAL_GetTick>
 8004aa8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004aac:	f7fd faba 	bl	8002024 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b64      	cmp	r3, #100	@ 0x64
 8004ab8:	d901      	bls.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e0d7      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004abe:	4b0e      	ldr	r3, [pc, #56]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	f040 80cd 	bne.w	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ad2:	4b09      	ldr	r3, [pc, #36]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a08      	ldr	r2, [pc, #32]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ad8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004adc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ade:	f7fd faa1 	bl	8002024 <HAL_GetTick>
 8004ae2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ae4:	e00a      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ae6:	f7fd fa9d 	bl	8002024 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b64      	cmp	r3, #100	@ 0x64
 8004af2:	d903      	bls.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e0ba      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004af8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004afc:	4b5e      	ldr	r3, [pc, #376]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b08:	d0ed      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d009      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d02e      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d12a      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b32:	4b51      	ldr	r3, [pc, #324]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b38:	0c1b      	lsrs	r3, r3, #16
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b40:	4b4d      	ldr	r3, [pc, #308]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b46:	0f1b      	lsrs	r3, r3, #28
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	019a      	lsls	r2, r3, #6
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	041b      	lsls	r3, r3, #16
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	061b      	lsls	r3, r3, #24
 8004b60:	431a      	orrs	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	071b      	lsls	r3, r3, #28
 8004b66:	4944      	ldr	r1, [pc, #272]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b6e:	4b42      	ldr	r3, [pc, #264]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b74:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	493d      	ldr	r1, [pc, #244]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d022      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b9c:	d11d      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b9e:	4b36      	ldr	r3, [pc, #216]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba4:	0e1b      	lsrs	r3, r3, #24
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bac:	4b32      	ldr	r3, [pc, #200]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb2:	0f1b      	lsrs	r3, r3, #28
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	019a      	lsls	r2, r3, #6
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	041b      	lsls	r3, r3, #16
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	061b      	lsls	r3, r3, #24
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	071b      	lsls	r3, r3, #28
 8004bd2:	4929      	ldr	r1, [pc, #164]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d028      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004be6:	4b24      	ldr	r3, [pc, #144]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bec:	0e1b      	lsrs	r3, r3, #24
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bf4:	4b20      	ldr	r3, [pc, #128]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bfa:	0c1b      	lsrs	r3, r3, #16
 8004bfc:	f003 0303 	and.w	r3, r3, #3
 8004c00:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	019a      	lsls	r2, r3, #6
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	041b      	lsls	r3, r3, #16
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	061b      	lsls	r3, r3, #24
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	071b      	lsls	r3, r3, #28
 8004c1a:	4917      	ldr	r1, [pc, #92]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c22:	4b15      	ldr	r3, [pc, #84]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c30:	4911      	ldr	r1, [pc, #68]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c38:	4b0f      	ldr	r3, [pc, #60]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a0e      	ldr	r2, [pc, #56]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c44:	f7fd f9ee 	bl	8002024 <HAL_GetTick>
 8004c48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c4c:	f7fd f9ea 	bl	8002024 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b64      	cmp	r3, #100	@ 0x64
 8004c58:	d901      	bls.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e007      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c5e:	4b06      	ldr	r3, [pc, #24]	@ (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c6a:	d1ef      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3720      	adds	r7, #32
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40023800 	.word	0x40023800

08004c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e049      	b.n	8004d22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fc fcf2 	bl	800168c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4610      	mov	r0, r2
 8004cbc:	f000 fcea 	bl	8005694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e049      	b.n	8004dd0 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d106      	bne.n	8004d56 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f841 	bl	8004dd8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3304      	adds	r3, #4
 8004d66:	4619      	mov	r1, r3
 8004d68:	4610      	mov	r0, r2
 8004d6a:	f000 fc93 	bl	8005694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d109      	bne.n	8004e10 <HAL_TIM_OC_Start+0x24>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	bf14      	ite	ne
 8004e08:	2301      	movne	r3, #1
 8004e0a:	2300      	moveq	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	e03c      	b.n	8004e8a <HAL_TIM_OC_Start+0x9e>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d109      	bne.n	8004e2a <HAL_TIM_OC_Start+0x3e>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	bf14      	ite	ne
 8004e22:	2301      	movne	r3, #1
 8004e24:	2300      	moveq	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	e02f      	b.n	8004e8a <HAL_TIM_OC_Start+0x9e>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d109      	bne.n	8004e44 <HAL_TIM_OC_Start+0x58>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	bf14      	ite	ne
 8004e3c:	2301      	movne	r3, #1
 8004e3e:	2300      	moveq	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	e022      	b.n	8004e8a <HAL_TIM_OC_Start+0x9e>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2b0c      	cmp	r3, #12
 8004e48:	d109      	bne.n	8004e5e <HAL_TIM_OC_Start+0x72>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	bf14      	ite	ne
 8004e56:	2301      	movne	r3, #1
 8004e58:	2300      	moveq	r3, #0
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	e015      	b.n	8004e8a <HAL_TIM_OC_Start+0x9e>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b10      	cmp	r3, #16
 8004e62:	d109      	bne.n	8004e78 <HAL_TIM_OC_Start+0x8c>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	bf14      	ite	ne
 8004e70:	2301      	movne	r3, #1
 8004e72:	2300      	moveq	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	e008      	b.n	8004e8a <HAL_TIM_OC_Start+0x9e>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	bf14      	ite	ne
 8004e84:	2301      	movne	r3, #1
 8004e86:	2300      	moveq	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e092      	b.n	8004fb8 <HAL_TIM_OC_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d104      	bne.n	8004ea2 <HAL_TIM_OC_Start+0xb6>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ea0:	e023      	b.n	8004eea <HAL_TIM_OC_Start+0xfe>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d104      	bne.n	8004eb2 <HAL_TIM_OC_Start+0xc6>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2202      	movs	r2, #2
 8004eac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004eb0:	e01b      	b.n	8004eea <HAL_TIM_OC_Start+0xfe>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d104      	bne.n	8004ec2 <HAL_TIM_OC_Start+0xd6>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ec0:	e013      	b.n	8004eea <HAL_TIM_OC_Start+0xfe>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b0c      	cmp	r3, #12
 8004ec6:	d104      	bne.n	8004ed2 <HAL_TIM_OC_Start+0xe6>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ed0:	e00b      	b.n	8004eea <HAL_TIM_OC_Start+0xfe>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b10      	cmp	r3, #16
 8004ed6:	d104      	bne.n	8004ee2 <HAL_TIM_OC_Start+0xf6>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ee0:	e003      	b.n	8004eea <HAL_TIM_OC_Start+0xfe>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	6839      	ldr	r1, [r7, #0]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 ff72 	bl	8005ddc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a30      	ldr	r2, [pc, #192]	@ (8004fc0 <HAL_TIM_OC_Start+0x1d4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d004      	beq.n	8004f0c <HAL_TIM_OC_Start+0x120>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a2f      	ldr	r2, [pc, #188]	@ (8004fc4 <HAL_TIM_OC_Start+0x1d8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d101      	bne.n	8004f10 <HAL_TIM_OC_Start+0x124>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e000      	b.n	8004f12 <HAL_TIM_OC_Start+0x126>
 8004f10:	2300      	movs	r3, #0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d007      	beq.n	8004f26 <HAL_TIM_OC_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a25      	ldr	r2, [pc, #148]	@ (8004fc0 <HAL_TIM_OC_Start+0x1d4>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d022      	beq.n	8004f76 <HAL_TIM_OC_Start+0x18a>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f38:	d01d      	beq.n	8004f76 <HAL_TIM_OC_Start+0x18a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a22      	ldr	r2, [pc, #136]	@ (8004fc8 <HAL_TIM_OC_Start+0x1dc>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d018      	beq.n	8004f76 <HAL_TIM_OC_Start+0x18a>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a20      	ldr	r2, [pc, #128]	@ (8004fcc <HAL_TIM_OC_Start+0x1e0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d013      	beq.n	8004f76 <HAL_TIM_OC_Start+0x18a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a1f      	ldr	r2, [pc, #124]	@ (8004fd0 <HAL_TIM_OC_Start+0x1e4>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00e      	beq.n	8004f76 <HAL_TIM_OC_Start+0x18a>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a19      	ldr	r2, [pc, #100]	@ (8004fc4 <HAL_TIM_OC_Start+0x1d8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d009      	beq.n	8004f76 <HAL_TIM_OC_Start+0x18a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a1b      	ldr	r2, [pc, #108]	@ (8004fd4 <HAL_TIM_OC_Start+0x1e8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d004      	beq.n	8004f76 <HAL_TIM_OC_Start+0x18a>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a19      	ldr	r2, [pc, #100]	@ (8004fd8 <HAL_TIM_OC_Start+0x1ec>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d115      	bne.n	8004fa2 <HAL_TIM_OC_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	4b17      	ldr	r3, [pc, #92]	@ (8004fdc <HAL_TIM_OC_Start+0x1f0>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2b06      	cmp	r3, #6
 8004f86:	d015      	beq.n	8004fb4 <HAL_TIM_OC_Start+0x1c8>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f8e:	d011      	beq.n	8004fb4 <HAL_TIM_OC_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa0:	e008      	b.n	8004fb4 <HAL_TIM_OC_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f042 0201 	orr.w	r2, r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	e000      	b.n	8004fb6 <HAL_TIM_OC_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40010000 	.word	0x40010000
 8004fc4:	40010400 	.word	0x40010400
 8004fc8:	40000400 	.word	0x40000400
 8004fcc:	40000800 	.word	0x40000800
 8004fd0:	40000c00 	.word	0x40000c00
 8004fd4:	40014000 	.word	0x40014000
 8004fd8:	40001800 	.word	0x40001800
 8004fdc:	00010007 	.word	0x00010007

08004fe0 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	6839      	ldr	r1, [r7, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 fef2 	bl	8005ddc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a36      	ldr	r2, [pc, #216]	@ (80050d8 <HAL_TIM_OC_Stop+0xf8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d004      	beq.n	800500c <HAL_TIM_OC_Stop+0x2c>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a35      	ldr	r2, [pc, #212]	@ (80050dc <HAL_TIM_OC_Stop+0xfc>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d101      	bne.n	8005010 <HAL_TIM_OC_Stop+0x30>
 800500c:	2301      	movs	r3, #1
 800500e:	e000      	b.n	8005012 <HAL_TIM_OC_Stop+0x32>
 8005010:	2300      	movs	r3, #0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d017      	beq.n	8005046 <HAL_TIM_OC_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6a1a      	ldr	r2, [r3, #32]
 800501c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005020:	4013      	ands	r3, r2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10f      	bne.n	8005046 <HAL_TIM_OC_Stop+0x66>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6a1a      	ldr	r2, [r3, #32]
 800502c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005030:	4013      	ands	r3, r2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d107      	bne.n	8005046 <HAL_TIM_OC_Stop+0x66>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005044:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6a1a      	ldr	r2, [r3, #32]
 800504c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005050:	4013      	ands	r3, r2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10f      	bne.n	8005076 <HAL_TIM_OC_Stop+0x96>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6a1a      	ldr	r2, [r3, #32]
 800505c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005060:	4013      	ands	r3, r2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d107      	bne.n	8005076 <HAL_TIM_OC_Stop+0x96>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0201 	bic.w	r2, r2, #1
 8005074:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d104      	bne.n	8005086 <HAL_TIM_OC_Stop+0xa6>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005084:	e023      	b.n	80050ce <HAL_TIM_OC_Stop+0xee>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b04      	cmp	r3, #4
 800508a:	d104      	bne.n	8005096 <HAL_TIM_OC_Stop+0xb6>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005094:	e01b      	b.n	80050ce <HAL_TIM_OC_Stop+0xee>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b08      	cmp	r3, #8
 800509a:	d104      	bne.n	80050a6 <HAL_TIM_OC_Stop+0xc6>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050a4:	e013      	b.n	80050ce <HAL_TIM_OC_Stop+0xee>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b0c      	cmp	r3, #12
 80050aa:	d104      	bne.n	80050b6 <HAL_TIM_OC_Stop+0xd6>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050b4:	e00b      	b.n	80050ce <HAL_TIM_OC_Stop+0xee>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b10      	cmp	r3, #16
 80050ba:	d104      	bne.n	80050c6 <HAL_TIM_OC_Stop+0xe6>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050c4:	e003      	b.n	80050ce <HAL_TIM_OC_Stop+0xee>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40010000 	.word	0x40010000
 80050dc:	40010400 	.word	0x40010400

080050e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e049      	b.n	8005186 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f841 	bl	800518e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3304      	adds	r3, #4
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f000 fab8 	bl	8005694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
	...

080051a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e08f      	b.n	80052d8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d106      	bne.n	80051d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7fc f9e5 	bl	800159c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2202      	movs	r2, #2
 80051d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6899      	ldr	r1, [r3, #8]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	4b3e      	ldr	r3, [pc, #248]	@ (80052e0 <HAL_TIM_Encoder_Init+0x13c>)
 80051e6:	400b      	ands	r3, r1
 80051e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	3304      	adds	r3, #4
 80051f2:	4619      	mov	r1, r3
 80051f4:	4610      	mov	r0, r2
 80051f6:	f000 fa4d 	bl	8005694 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4b31      	ldr	r3, [pc, #196]	@ (80052e4 <HAL_TIM_Encoder_Init+0x140>)
 8005220:	4013      	ands	r3, r2
 8005222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	021b      	lsls	r3, r3, #8
 800522e:	4313      	orrs	r3, r2
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	4313      	orrs	r3, r2
 8005234:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4b2b      	ldr	r3, [pc, #172]	@ (80052e8 <HAL_TIM_Encoder_Init+0x144>)
 800523a:	4013      	ands	r3, r2
 800523c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4b2a      	ldr	r3, [pc, #168]	@ (80052ec <HAL_TIM_Encoder_Init+0x148>)
 8005242:	4013      	ands	r3, r2
 8005244:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	021b      	lsls	r3, r3, #8
 8005250:	4313      	orrs	r3, r2
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	011a      	lsls	r2, r3, #4
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	031b      	lsls	r3, r3, #12
 8005264:	4313      	orrs	r3, r2
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005272:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800527a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	4313      	orrs	r3, r2
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	fffebff8 	.word	0xfffebff8
 80052e4:	fffffcfc 	.word	0xfffffcfc
 80052e8:	fffff3f3 	.word	0xfffff3f3
 80052ec:	ffff0f0f 	.word	0xffff0f0f

080052f0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005300:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005308:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005310:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005318:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d110      	bne.n	8005342 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005320:	7bfb      	ldrb	r3, [r7, #15]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d102      	bne.n	800532c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005326:	7b7b      	ldrb	r3, [r7, #13]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d001      	beq.n	8005330 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e069      	b.n	8005404 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005340:	e031      	b.n	80053a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b04      	cmp	r3, #4
 8005346:	d110      	bne.n	800536a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005348:	7bbb      	ldrb	r3, [r7, #14]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d102      	bne.n	8005354 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800534e:	7b3b      	ldrb	r3, [r7, #12]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d001      	beq.n	8005358 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e055      	b.n	8005404 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005368:	e01d      	b.n	80053a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800536a:	7bfb      	ldrb	r3, [r7, #15]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d108      	bne.n	8005382 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005370:	7bbb      	ldrb	r3, [r7, #14]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d105      	bne.n	8005382 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005376:	7b7b      	ldrb	r3, [r7, #13]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d102      	bne.n	8005382 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800537c:	7b3b      	ldrb	r3, [r7, #12]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d001      	beq.n	8005386 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e03e      	b.n	8005404 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2202      	movs	r2, #2
 8005392:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2202      	movs	r2, #2
 800539a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2202      	movs	r2, #2
 80053a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_TIM_Encoder_Start+0xc4>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d008      	beq.n	80053c4 <HAL_TIM_Encoder_Start+0xd4>
 80053b2:	e00f      	b.n	80053d4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2201      	movs	r2, #1
 80053ba:	2100      	movs	r1, #0
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 fd0d 	bl	8005ddc <TIM_CCxChannelCmd>
      break;
 80053c2:	e016      	b.n	80053f2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2201      	movs	r2, #1
 80053ca:	2104      	movs	r1, #4
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 fd05 	bl	8005ddc <TIM_CCxChannelCmd>
      break;
 80053d2:	e00e      	b.n	80053f2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2201      	movs	r2, #1
 80053da:	2100      	movs	r1, #0
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 fcfd 	bl	8005ddc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2201      	movs	r2, #1
 80053e8:	2104      	movs	r1, #4
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 fcf6 	bl	8005ddc <TIM_CCxChannelCmd>
      break;
 80053f0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0201 	orr.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005422:	2b01      	cmp	r3, #1
 8005424:	d101      	bne.n	800542a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005426:	2302      	movs	r3, #2
 8005428:	e066      	b.n	80054f8 <HAL_TIM_OC_ConfigChannel+0xec>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b14      	cmp	r3, #20
 8005436:	d857      	bhi.n	80054e8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005438:	a201      	add	r2, pc, #4	@ (adr r2, 8005440 <HAL_TIM_OC_ConfigChannel+0x34>)
 800543a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543e:	bf00      	nop
 8005440:	08005495 	.word	0x08005495
 8005444:	080054e9 	.word	0x080054e9
 8005448:	080054e9 	.word	0x080054e9
 800544c:	080054e9 	.word	0x080054e9
 8005450:	080054a3 	.word	0x080054a3
 8005454:	080054e9 	.word	0x080054e9
 8005458:	080054e9 	.word	0x080054e9
 800545c:	080054e9 	.word	0x080054e9
 8005460:	080054b1 	.word	0x080054b1
 8005464:	080054e9 	.word	0x080054e9
 8005468:	080054e9 	.word	0x080054e9
 800546c:	080054e9 	.word	0x080054e9
 8005470:	080054bf 	.word	0x080054bf
 8005474:	080054e9 	.word	0x080054e9
 8005478:	080054e9 	.word	0x080054e9
 800547c:	080054e9 	.word	0x080054e9
 8005480:	080054cd 	.word	0x080054cd
 8005484:	080054e9 	.word	0x080054e9
 8005488:	080054e9 	.word	0x080054e9
 800548c:	080054e9 	.word	0x080054e9
 8005490:	080054db 	.word	0x080054db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	4618      	mov	r0, r3
 800549c:	f000 f9a6 	bl	80057ec <TIM_OC1_SetConfig>
      break;
 80054a0:	e025      	b.n	80054ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 fa11 	bl	80058d0 <TIM_OC2_SetConfig>
      break;
 80054ae:	e01e      	b.n	80054ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68b9      	ldr	r1, [r7, #8]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 fa82 	bl	80059c0 <TIM_OC3_SetConfig>
      break;
 80054bc:	e017      	b.n	80054ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68b9      	ldr	r1, [r7, #8]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 faf1 	bl	8005aac <TIM_OC4_SetConfig>
      break;
 80054ca:	e010      	b.n	80054ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68b9      	ldr	r1, [r7, #8]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fb42 	bl	8005b5c <TIM_OC5_SetConfig>
      break;
 80054d8:	e009      	b.n	80054ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68b9      	ldr	r1, [r7, #8]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 fb8d 	bl	8005c00 <TIM_OC6_SetConfig>
      break;
 80054e6:	e002      	b.n	80054ee <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	75fb      	strb	r3, [r7, #23]
      break;
 80054ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005514:	2b01      	cmp	r3, #1
 8005516:	d101      	bne.n	800551c <HAL_TIM_ConfigClockSource+0x1c>
 8005518:	2302      	movs	r3, #2
 800551a:	e0b4      	b.n	8005686 <HAL_TIM_ConfigClockSource+0x186>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	4b56      	ldr	r3, [pc, #344]	@ (8005690 <HAL_TIM_ConfigClockSource+0x190>)
 8005538:	4013      	ands	r3, r2
 800553a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005542:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005554:	d03e      	beq.n	80055d4 <HAL_TIM_ConfigClockSource+0xd4>
 8005556:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800555a:	f200 8087 	bhi.w	800566c <HAL_TIM_ConfigClockSource+0x16c>
 800555e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005562:	f000 8086 	beq.w	8005672 <HAL_TIM_ConfigClockSource+0x172>
 8005566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800556a:	d87f      	bhi.n	800566c <HAL_TIM_ConfigClockSource+0x16c>
 800556c:	2b70      	cmp	r3, #112	@ 0x70
 800556e:	d01a      	beq.n	80055a6 <HAL_TIM_ConfigClockSource+0xa6>
 8005570:	2b70      	cmp	r3, #112	@ 0x70
 8005572:	d87b      	bhi.n	800566c <HAL_TIM_ConfigClockSource+0x16c>
 8005574:	2b60      	cmp	r3, #96	@ 0x60
 8005576:	d050      	beq.n	800561a <HAL_TIM_ConfigClockSource+0x11a>
 8005578:	2b60      	cmp	r3, #96	@ 0x60
 800557a:	d877      	bhi.n	800566c <HAL_TIM_ConfigClockSource+0x16c>
 800557c:	2b50      	cmp	r3, #80	@ 0x50
 800557e:	d03c      	beq.n	80055fa <HAL_TIM_ConfigClockSource+0xfa>
 8005580:	2b50      	cmp	r3, #80	@ 0x50
 8005582:	d873      	bhi.n	800566c <HAL_TIM_ConfigClockSource+0x16c>
 8005584:	2b40      	cmp	r3, #64	@ 0x40
 8005586:	d058      	beq.n	800563a <HAL_TIM_ConfigClockSource+0x13a>
 8005588:	2b40      	cmp	r3, #64	@ 0x40
 800558a:	d86f      	bhi.n	800566c <HAL_TIM_ConfigClockSource+0x16c>
 800558c:	2b30      	cmp	r3, #48	@ 0x30
 800558e:	d064      	beq.n	800565a <HAL_TIM_ConfigClockSource+0x15a>
 8005590:	2b30      	cmp	r3, #48	@ 0x30
 8005592:	d86b      	bhi.n	800566c <HAL_TIM_ConfigClockSource+0x16c>
 8005594:	2b20      	cmp	r3, #32
 8005596:	d060      	beq.n	800565a <HAL_TIM_ConfigClockSource+0x15a>
 8005598:	2b20      	cmp	r3, #32
 800559a:	d867      	bhi.n	800566c <HAL_TIM_ConfigClockSource+0x16c>
 800559c:	2b00      	cmp	r3, #0
 800559e:	d05c      	beq.n	800565a <HAL_TIM_ConfigClockSource+0x15a>
 80055a0:	2b10      	cmp	r3, #16
 80055a2:	d05a      	beq.n	800565a <HAL_TIM_ConfigClockSource+0x15a>
 80055a4:	e062      	b.n	800566c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055b6:	f000 fbf1 	bl	8005d9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80055c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	609a      	str	r2, [r3, #8]
      break;
 80055d2:	e04f      	b.n	8005674 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055e4:	f000 fbda 	bl	8005d9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689a      	ldr	r2, [r3, #8]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055f6:	609a      	str	r2, [r3, #8]
      break;
 80055f8:	e03c      	b.n	8005674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005606:	461a      	mov	r2, r3
 8005608:	f000 fb4e 	bl	8005ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2150      	movs	r1, #80	@ 0x50
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fba7 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 8005618:	e02c      	b.n	8005674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005626:	461a      	mov	r2, r3
 8005628:	f000 fb6d 	bl	8005d06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2160      	movs	r1, #96	@ 0x60
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fb97 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 8005638:	e01c      	b.n	8005674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005646:	461a      	mov	r2, r3
 8005648:	f000 fb2e 	bl	8005ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2140      	movs	r1, #64	@ 0x40
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fb87 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 8005658:	e00c      	b.n	8005674 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4619      	mov	r1, r3
 8005664:	4610      	mov	r0, r2
 8005666:	f000 fb7e 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 800566a:	e003      	b.n	8005674 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	73fb      	strb	r3, [r7, #15]
      break;
 8005670:	e000      	b.n	8005674 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005672:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005684:	7bfb      	ldrb	r3, [r7, #15]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	fffeff88 	.word	0xfffeff88

08005694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a46      	ldr	r2, [pc, #280]	@ (80057c0 <TIM_Base_SetConfig+0x12c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d013      	beq.n	80056d4 <TIM_Base_SetConfig+0x40>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056b2:	d00f      	beq.n	80056d4 <TIM_Base_SetConfig+0x40>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a43      	ldr	r2, [pc, #268]	@ (80057c4 <TIM_Base_SetConfig+0x130>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00b      	beq.n	80056d4 <TIM_Base_SetConfig+0x40>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a42      	ldr	r2, [pc, #264]	@ (80057c8 <TIM_Base_SetConfig+0x134>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d007      	beq.n	80056d4 <TIM_Base_SetConfig+0x40>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a41      	ldr	r2, [pc, #260]	@ (80057cc <TIM_Base_SetConfig+0x138>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d003      	beq.n	80056d4 <TIM_Base_SetConfig+0x40>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a40      	ldr	r2, [pc, #256]	@ (80057d0 <TIM_Base_SetConfig+0x13c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d108      	bne.n	80056e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a35      	ldr	r2, [pc, #212]	@ (80057c0 <TIM_Base_SetConfig+0x12c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d02b      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056f4:	d027      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a32      	ldr	r2, [pc, #200]	@ (80057c4 <TIM_Base_SetConfig+0x130>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d023      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a31      	ldr	r2, [pc, #196]	@ (80057c8 <TIM_Base_SetConfig+0x134>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d01f      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a30      	ldr	r2, [pc, #192]	@ (80057cc <TIM_Base_SetConfig+0x138>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d01b      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a2f      	ldr	r2, [pc, #188]	@ (80057d0 <TIM_Base_SetConfig+0x13c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d017      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a2e      	ldr	r2, [pc, #184]	@ (80057d4 <TIM_Base_SetConfig+0x140>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d013      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a2d      	ldr	r2, [pc, #180]	@ (80057d8 <TIM_Base_SetConfig+0x144>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00f      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a2c      	ldr	r2, [pc, #176]	@ (80057dc <TIM_Base_SetConfig+0x148>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00b      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a2b      	ldr	r2, [pc, #172]	@ (80057e0 <TIM_Base_SetConfig+0x14c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d007      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a2a      	ldr	r2, [pc, #168]	@ (80057e4 <TIM_Base_SetConfig+0x150>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d003      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a29      	ldr	r2, [pc, #164]	@ (80057e8 <TIM_Base_SetConfig+0x154>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d108      	bne.n	8005758 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800574c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4313      	orrs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a10      	ldr	r2, [pc, #64]	@ (80057c0 <TIM_Base_SetConfig+0x12c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d003      	beq.n	800578c <TIM_Base_SetConfig+0xf8>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a12      	ldr	r2, [pc, #72]	@ (80057d0 <TIM_Base_SetConfig+0x13c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d103      	bne.n	8005794 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	691a      	ldr	r2, [r3, #16]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d105      	bne.n	80057b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f023 0201 	bic.w	r2, r3, #1
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	611a      	str	r2, [r3, #16]
  }
}
 80057b2:	bf00      	nop
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40010000 	.word	0x40010000
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40000800 	.word	0x40000800
 80057cc:	40000c00 	.word	0x40000c00
 80057d0:	40010400 	.word	0x40010400
 80057d4:	40014000 	.word	0x40014000
 80057d8:	40014400 	.word	0x40014400
 80057dc:	40014800 	.word	0x40014800
 80057e0:	40001800 	.word	0x40001800
 80057e4:	40001c00 	.word	0x40001c00
 80057e8:	40002000 	.word	0x40002000

080057ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	f023 0201 	bic.w	r2, r3, #1
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4b2b      	ldr	r3, [pc, #172]	@ (80058c4 <TIM_OC1_SetConfig+0xd8>)
 8005818:	4013      	ands	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0303 	bic.w	r3, r3, #3
 8005822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f023 0302 	bic.w	r3, r3, #2
 8005834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	4313      	orrs	r3, r2
 800583e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a21      	ldr	r2, [pc, #132]	@ (80058c8 <TIM_OC1_SetConfig+0xdc>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d003      	beq.n	8005850 <TIM_OC1_SetConfig+0x64>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a20      	ldr	r2, [pc, #128]	@ (80058cc <TIM_OC1_SetConfig+0xe0>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d10c      	bne.n	800586a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f023 0308 	bic.w	r3, r3, #8
 8005856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f023 0304 	bic.w	r3, r3, #4
 8005868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a16      	ldr	r2, [pc, #88]	@ (80058c8 <TIM_OC1_SetConfig+0xdc>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d003      	beq.n	800587a <TIM_OC1_SetConfig+0x8e>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a15      	ldr	r2, [pc, #84]	@ (80058cc <TIM_OC1_SetConfig+0xe0>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d111      	bne.n	800589e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	4313      	orrs	r3, r2
 8005892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	4313      	orrs	r3, r2
 800589c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	621a      	str	r2, [r3, #32]
}
 80058b8:	bf00      	nop
 80058ba:	371c      	adds	r7, #28
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	fffeff8f 	.word	0xfffeff8f
 80058c8:	40010000 	.word	0x40010000
 80058cc:	40010400 	.word	0x40010400

080058d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	f023 0210 	bic.w	r2, r3, #16
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4b2e      	ldr	r3, [pc, #184]	@ (80059b4 <TIM_OC2_SetConfig+0xe4>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	021b      	lsls	r3, r3, #8
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4313      	orrs	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f023 0320 	bic.w	r3, r3, #32
 800591a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	011b      	lsls	r3, r3, #4
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	4313      	orrs	r3, r2
 8005926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a23      	ldr	r2, [pc, #140]	@ (80059b8 <TIM_OC2_SetConfig+0xe8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d003      	beq.n	8005938 <TIM_OC2_SetConfig+0x68>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a22      	ldr	r2, [pc, #136]	@ (80059bc <TIM_OC2_SetConfig+0xec>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d10d      	bne.n	8005954 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800593e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	011b      	lsls	r3, r3, #4
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	4313      	orrs	r3, r2
 800594a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005952:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a18      	ldr	r2, [pc, #96]	@ (80059b8 <TIM_OC2_SetConfig+0xe8>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d003      	beq.n	8005964 <TIM_OC2_SetConfig+0x94>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a17      	ldr	r2, [pc, #92]	@ (80059bc <TIM_OC2_SetConfig+0xec>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d113      	bne.n	800598c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800596a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005972:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	4313      	orrs	r3, r2
 800597e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	4313      	orrs	r3, r2
 800598a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	621a      	str	r2, [r3, #32]
}
 80059a6:	bf00      	nop
 80059a8:	371c      	adds	r7, #28
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	feff8fff 	.word	0xfeff8fff
 80059b8:	40010000 	.word	0x40010000
 80059bc:	40010400 	.word	0x40010400

080059c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	4b2d      	ldr	r3, [pc, #180]	@ (8005aa0 <TIM_OC3_SetConfig+0xe0>)
 80059ec:	4013      	ands	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0303 	bic.w	r3, r3, #3
 80059f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	021b      	lsls	r3, r3, #8
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a22      	ldr	r2, [pc, #136]	@ (8005aa4 <TIM_OC3_SetConfig+0xe4>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d003      	beq.n	8005a26 <TIM_OC3_SetConfig+0x66>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a21      	ldr	r2, [pc, #132]	@ (8005aa8 <TIM_OC3_SetConfig+0xe8>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d10d      	bne.n	8005a42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	021b      	lsls	r3, r3, #8
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a17      	ldr	r2, [pc, #92]	@ (8005aa4 <TIM_OC3_SetConfig+0xe4>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d003      	beq.n	8005a52 <TIM_OC3_SetConfig+0x92>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a16      	ldr	r2, [pc, #88]	@ (8005aa8 <TIM_OC3_SetConfig+0xe8>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d113      	bne.n	8005a7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	621a      	str	r2, [r3, #32]
}
 8005a94:	bf00      	nop
 8005a96:	371c      	adds	r7, #28
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	fffeff8f 	.word	0xfffeff8f
 8005aa4:	40010000 	.word	0x40010000
 8005aa8:	40010400 	.word	0x40010400

08005aac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8005b50 <TIM_OC4_SetConfig+0xa4>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	021b      	lsls	r3, r3, #8
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005af6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	031b      	lsls	r3, r3, #12
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a13      	ldr	r2, [pc, #76]	@ (8005b54 <TIM_OC4_SetConfig+0xa8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d003      	beq.n	8005b14 <TIM_OC4_SetConfig+0x68>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a12      	ldr	r2, [pc, #72]	@ (8005b58 <TIM_OC4_SetConfig+0xac>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d109      	bne.n	8005b28 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	019b      	lsls	r3, r3, #6
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	621a      	str	r2, [r3, #32]
}
 8005b42:	bf00      	nop
 8005b44:	371c      	adds	r7, #28
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	feff8fff 	.word	0xfeff8fff
 8005b54:	40010000 	.word	0x40010000
 8005b58:	40010400 	.word	0x40010400

08005b5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf4 <TIM_OC5_SetConfig+0x98>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005b9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	041b      	lsls	r3, r3, #16
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a12      	ldr	r2, [pc, #72]	@ (8005bf8 <TIM_OC5_SetConfig+0x9c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d003      	beq.n	8005bba <TIM_OC5_SetConfig+0x5e>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a11      	ldr	r2, [pc, #68]	@ (8005bfc <TIM_OC5_SetConfig+0xa0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d109      	bne.n	8005bce <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	021b      	lsls	r3, r3, #8
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	621a      	str	r2, [r3, #32]
}
 8005be8:	bf00      	nop
 8005bea:	371c      	adds	r7, #28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	fffeff8f 	.word	0xfffeff8f
 8005bf8:	40010000 	.word	0x40010000
 8005bfc:	40010400 	.word	0x40010400

08005c00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8005c9c <TIM_OC6_SetConfig+0x9c>)
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	021b      	lsls	r3, r3, #8
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005c42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	051b      	lsls	r3, r3, #20
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a13      	ldr	r2, [pc, #76]	@ (8005ca0 <TIM_OC6_SetConfig+0xa0>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d003      	beq.n	8005c60 <TIM_OC6_SetConfig+0x60>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a12      	ldr	r2, [pc, #72]	@ (8005ca4 <TIM_OC6_SetConfig+0xa4>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d109      	bne.n	8005c74 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	029b      	lsls	r3, r3, #10
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	621a      	str	r2, [r3, #32]
}
 8005c8e:	bf00      	nop
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	feff8fff 	.word	0xfeff8fff
 8005ca0:	40010000 	.word	0x40010000
 8005ca4:	40010400 	.word	0x40010400

08005ca8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f023 0201 	bic.w	r2, r3, #1
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f023 030a 	bic.w	r3, r3, #10
 8005ce4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	621a      	str	r2, [r3, #32]
}
 8005cfa:	bf00      	nop
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b087      	sub	sp, #28
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	60f8      	str	r0, [r7, #12]
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	f023 0210 	bic.w	r2, r3, #16
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	031b      	lsls	r3, r3, #12
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	621a      	str	r2, [r3, #32]
}
 8005d5a:	bf00      	nop
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	f043 0307 	orr.w	r3, r3, #7
 8005d88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	609a      	str	r2, [r3, #8]
}
 8005d90:	bf00      	nop
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005db6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	021a      	lsls	r2, r3, #8
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	609a      	str	r2, [r3, #8]
}
 8005dd0:	bf00      	nop
 8005dd2:	371c      	adds	r7, #28
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f003 031f 	and.w	r3, r3, #31
 8005dee:	2201      	movs	r2, #1
 8005df0:	fa02 f303 	lsl.w	r3, r2, r3
 8005df4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a1a      	ldr	r2, [r3, #32]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	43db      	mvns	r3, r3
 8005dfe:	401a      	ands	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6a1a      	ldr	r2, [r3, #32]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f003 031f 	and.w	r3, r3, #31
 8005e0e:	6879      	ldr	r1, [r7, #4]
 8005e10:	fa01 f303 	lsl.w	r3, r1, r3
 8005e14:	431a      	orrs	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	621a      	str	r2, [r3, #32]
}
 8005e1a:	bf00      	nop
 8005e1c:	371c      	adds	r7, #28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
	...

08005e28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d101      	bne.n	8005e40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	e06d      	b.n	8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a30      	ldr	r2, [pc, #192]	@ (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d004      	beq.n	8005e74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a2f      	ldr	r2, [pc, #188]	@ (8005f2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d108      	bne.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a20      	ldr	r2, [pc, #128]	@ (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d022      	beq.n	8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eb2:	d01d      	beq.n	8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d018      	beq.n	8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d013      	beq.n	8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a1a      	ldr	r2, [pc, #104]	@ (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00e      	beq.n	8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a15      	ldr	r2, [pc, #84]	@ (8005f2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d009      	beq.n	8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a16      	ldr	r2, [pc, #88]	@ (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d004      	beq.n	8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a15      	ldr	r2, [pc, #84]	@ (8005f40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d10c      	bne.n	8005f0a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ef6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	40010000 	.word	0x40010000
 8005f2c:	40010400 	.word	0x40010400
 8005f30:	40000400 	.word	0x40000400
 8005f34:	40000800 	.word	0x40000800
 8005f38:	40000c00 	.word	0x40000c00
 8005f3c:	40014000 	.word	0x40014000
 8005f40:	40001800 	.word	0x40001800

08005f44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e040      	b.n	8005fd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d106      	bne.n	8005f6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7fb fbe8 	bl	800173c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2224      	movs	r2, #36	@ 0x24
 8005f70:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0201 	bic.w	r2, r2, #1
 8005f80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d002      	beq.n	8005f90 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fa8c 	bl	80064a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f825 	bl	8005fe0 <UART_SetConfig>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d101      	bne.n	8005fa0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e01b      	b.n	8005fd8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 0201 	orr.w	r2, r2, #1
 8005fce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 fb0b 	bl	80065ec <UART_CheckIdleState>
 8005fd6:	4603      	mov	r3, r0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b088      	sub	sp, #32
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	4313      	orrs	r3, r2
 8006002:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	4ba6      	ldr	r3, [pc, #664]	@ (80062a4 <UART_SetConfig+0x2c4>)
 800600c:	4013      	ands	r3, r2
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	6812      	ldr	r2, [r2, #0]
 8006012:	6979      	ldr	r1, [r7, #20]
 8006014:	430b      	orrs	r3, r1
 8006016:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68da      	ldr	r2, [r3, #12]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	4313      	orrs	r3, r2
 800603c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	430a      	orrs	r2, r1
 8006050:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a94      	ldr	r2, [pc, #592]	@ (80062a8 <UART_SetConfig+0x2c8>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d120      	bne.n	800609e <UART_SetConfig+0xbe>
 800605c:	4b93      	ldr	r3, [pc, #588]	@ (80062ac <UART_SetConfig+0x2cc>)
 800605e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006062:	f003 0303 	and.w	r3, r3, #3
 8006066:	2b03      	cmp	r3, #3
 8006068:	d816      	bhi.n	8006098 <UART_SetConfig+0xb8>
 800606a:	a201      	add	r2, pc, #4	@ (adr r2, 8006070 <UART_SetConfig+0x90>)
 800606c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006070:	08006081 	.word	0x08006081
 8006074:	0800608d 	.word	0x0800608d
 8006078:	08006087 	.word	0x08006087
 800607c:	08006093 	.word	0x08006093
 8006080:	2301      	movs	r3, #1
 8006082:	77fb      	strb	r3, [r7, #31]
 8006084:	e150      	b.n	8006328 <UART_SetConfig+0x348>
 8006086:	2302      	movs	r3, #2
 8006088:	77fb      	strb	r3, [r7, #31]
 800608a:	e14d      	b.n	8006328 <UART_SetConfig+0x348>
 800608c:	2304      	movs	r3, #4
 800608e:	77fb      	strb	r3, [r7, #31]
 8006090:	e14a      	b.n	8006328 <UART_SetConfig+0x348>
 8006092:	2308      	movs	r3, #8
 8006094:	77fb      	strb	r3, [r7, #31]
 8006096:	e147      	b.n	8006328 <UART_SetConfig+0x348>
 8006098:	2310      	movs	r3, #16
 800609a:	77fb      	strb	r3, [r7, #31]
 800609c:	e144      	b.n	8006328 <UART_SetConfig+0x348>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a83      	ldr	r2, [pc, #524]	@ (80062b0 <UART_SetConfig+0x2d0>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d132      	bne.n	800610e <UART_SetConfig+0x12e>
 80060a8:	4b80      	ldr	r3, [pc, #512]	@ (80062ac <UART_SetConfig+0x2cc>)
 80060aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ae:	f003 030c 	and.w	r3, r3, #12
 80060b2:	2b0c      	cmp	r3, #12
 80060b4:	d828      	bhi.n	8006108 <UART_SetConfig+0x128>
 80060b6:	a201      	add	r2, pc, #4	@ (adr r2, 80060bc <UART_SetConfig+0xdc>)
 80060b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060bc:	080060f1 	.word	0x080060f1
 80060c0:	08006109 	.word	0x08006109
 80060c4:	08006109 	.word	0x08006109
 80060c8:	08006109 	.word	0x08006109
 80060cc:	080060fd 	.word	0x080060fd
 80060d0:	08006109 	.word	0x08006109
 80060d4:	08006109 	.word	0x08006109
 80060d8:	08006109 	.word	0x08006109
 80060dc:	080060f7 	.word	0x080060f7
 80060e0:	08006109 	.word	0x08006109
 80060e4:	08006109 	.word	0x08006109
 80060e8:	08006109 	.word	0x08006109
 80060ec:	08006103 	.word	0x08006103
 80060f0:	2300      	movs	r3, #0
 80060f2:	77fb      	strb	r3, [r7, #31]
 80060f4:	e118      	b.n	8006328 <UART_SetConfig+0x348>
 80060f6:	2302      	movs	r3, #2
 80060f8:	77fb      	strb	r3, [r7, #31]
 80060fa:	e115      	b.n	8006328 <UART_SetConfig+0x348>
 80060fc:	2304      	movs	r3, #4
 80060fe:	77fb      	strb	r3, [r7, #31]
 8006100:	e112      	b.n	8006328 <UART_SetConfig+0x348>
 8006102:	2308      	movs	r3, #8
 8006104:	77fb      	strb	r3, [r7, #31]
 8006106:	e10f      	b.n	8006328 <UART_SetConfig+0x348>
 8006108:	2310      	movs	r3, #16
 800610a:	77fb      	strb	r3, [r7, #31]
 800610c:	e10c      	b.n	8006328 <UART_SetConfig+0x348>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a68      	ldr	r2, [pc, #416]	@ (80062b4 <UART_SetConfig+0x2d4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d120      	bne.n	800615a <UART_SetConfig+0x17a>
 8006118:	4b64      	ldr	r3, [pc, #400]	@ (80062ac <UART_SetConfig+0x2cc>)
 800611a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800611e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006122:	2b30      	cmp	r3, #48	@ 0x30
 8006124:	d013      	beq.n	800614e <UART_SetConfig+0x16e>
 8006126:	2b30      	cmp	r3, #48	@ 0x30
 8006128:	d814      	bhi.n	8006154 <UART_SetConfig+0x174>
 800612a:	2b20      	cmp	r3, #32
 800612c:	d009      	beq.n	8006142 <UART_SetConfig+0x162>
 800612e:	2b20      	cmp	r3, #32
 8006130:	d810      	bhi.n	8006154 <UART_SetConfig+0x174>
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <UART_SetConfig+0x15c>
 8006136:	2b10      	cmp	r3, #16
 8006138:	d006      	beq.n	8006148 <UART_SetConfig+0x168>
 800613a:	e00b      	b.n	8006154 <UART_SetConfig+0x174>
 800613c:	2300      	movs	r3, #0
 800613e:	77fb      	strb	r3, [r7, #31]
 8006140:	e0f2      	b.n	8006328 <UART_SetConfig+0x348>
 8006142:	2302      	movs	r3, #2
 8006144:	77fb      	strb	r3, [r7, #31]
 8006146:	e0ef      	b.n	8006328 <UART_SetConfig+0x348>
 8006148:	2304      	movs	r3, #4
 800614a:	77fb      	strb	r3, [r7, #31]
 800614c:	e0ec      	b.n	8006328 <UART_SetConfig+0x348>
 800614e:	2308      	movs	r3, #8
 8006150:	77fb      	strb	r3, [r7, #31]
 8006152:	e0e9      	b.n	8006328 <UART_SetConfig+0x348>
 8006154:	2310      	movs	r3, #16
 8006156:	77fb      	strb	r3, [r7, #31]
 8006158:	e0e6      	b.n	8006328 <UART_SetConfig+0x348>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a56      	ldr	r2, [pc, #344]	@ (80062b8 <UART_SetConfig+0x2d8>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d120      	bne.n	80061a6 <UART_SetConfig+0x1c6>
 8006164:	4b51      	ldr	r3, [pc, #324]	@ (80062ac <UART_SetConfig+0x2cc>)
 8006166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800616a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800616e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006170:	d013      	beq.n	800619a <UART_SetConfig+0x1ba>
 8006172:	2bc0      	cmp	r3, #192	@ 0xc0
 8006174:	d814      	bhi.n	80061a0 <UART_SetConfig+0x1c0>
 8006176:	2b80      	cmp	r3, #128	@ 0x80
 8006178:	d009      	beq.n	800618e <UART_SetConfig+0x1ae>
 800617a:	2b80      	cmp	r3, #128	@ 0x80
 800617c:	d810      	bhi.n	80061a0 <UART_SetConfig+0x1c0>
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <UART_SetConfig+0x1a8>
 8006182:	2b40      	cmp	r3, #64	@ 0x40
 8006184:	d006      	beq.n	8006194 <UART_SetConfig+0x1b4>
 8006186:	e00b      	b.n	80061a0 <UART_SetConfig+0x1c0>
 8006188:	2300      	movs	r3, #0
 800618a:	77fb      	strb	r3, [r7, #31]
 800618c:	e0cc      	b.n	8006328 <UART_SetConfig+0x348>
 800618e:	2302      	movs	r3, #2
 8006190:	77fb      	strb	r3, [r7, #31]
 8006192:	e0c9      	b.n	8006328 <UART_SetConfig+0x348>
 8006194:	2304      	movs	r3, #4
 8006196:	77fb      	strb	r3, [r7, #31]
 8006198:	e0c6      	b.n	8006328 <UART_SetConfig+0x348>
 800619a:	2308      	movs	r3, #8
 800619c:	77fb      	strb	r3, [r7, #31]
 800619e:	e0c3      	b.n	8006328 <UART_SetConfig+0x348>
 80061a0:	2310      	movs	r3, #16
 80061a2:	77fb      	strb	r3, [r7, #31]
 80061a4:	e0c0      	b.n	8006328 <UART_SetConfig+0x348>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a44      	ldr	r2, [pc, #272]	@ (80062bc <UART_SetConfig+0x2dc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d125      	bne.n	80061fc <UART_SetConfig+0x21c>
 80061b0:	4b3e      	ldr	r3, [pc, #248]	@ (80062ac <UART_SetConfig+0x2cc>)
 80061b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061be:	d017      	beq.n	80061f0 <UART_SetConfig+0x210>
 80061c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061c4:	d817      	bhi.n	80061f6 <UART_SetConfig+0x216>
 80061c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061ca:	d00b      	beq.n	80061e4 <UART_SetConfig+0x204>
 80061cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061d0:	d811      	bhi.n	80061f6 <UART_SetConfig+0x216>
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <UART_SetConfig+0x1fe>
 80061d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061da:	d006      	beq.n	80061ea <UART_SetConfig+0x20a>
 80061dc:	e00b      	b.n	80061f6 <UART_SetConfig+0x216>
 80061de:	2300      	movs	r3, #0
 80061e0:	77fb      	strb	r3, [r7, #31]
 80061e2:	e0a1      	b.n	8006328 <UART_SetConfig+0x348>
 80061e4:	2302      	movs	r3, #2
 80061e6:	77fb      	strb	r3, [r7, #31]
 80061e8:	e09e      	b.n	8006328 <UART_SetConfig+0x348>
 80061ea:	2304      	movs	r3, #4
 80061ec:	77fb      	strb	r3, [r7, #31]
 80061ee:	e09b      	b.n	8006328 <UART_SetConfig+0x348>
 80061f0:	2308      	movs	r3, #8
 80061f2:	77fb      	strb	r3, [r7, #31]
 80061f4:	e098      	b.n	8006328 <UART_SetConfig+0x348>
 80061f6:	2310      	movs	r3, #16
 80061f8:	77fb      	strb	r3, [r7, #31]
 80061fa:	e095      	b.n	8006328 <UART_SetConfig+0x348>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a2f      	ldr	r2, [pc, #188]	@ (80062c0 <UART_SetConfig+0x2e0>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d125      	bne.n	8006252 <UART_SetConfig+0x272>
 8006206:	4b29      	ldr	r3, [pc, #164]	@ (80062ac <UART_SetConfig+0x2cc>)
 8006208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800620c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006210:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006214:	d017      	beq.n	8006246 <UART_SetConfig+0x266>
 8006216:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800621a:	d817      	bhi.n	800624c <UART_SetConfig+0x26c>
 800621c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006220:	d00b      	beq.n	800623a <UART_SetConfig+0x25a>
 8006222:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006226:	d811      	bhi.n	800624c <UART_SetConfig+0x26c>
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <UART_SetConfig+0x254>
 800622c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006230:	d006      	beq.n	8006240 <UART_SetConfig+0x260>
 8006232:	e00b      	b.n	800624c <UART_SetConfig+0x26c>
 8006234:	2301      	movs	r3, #1
 8006236:	77fb      	strb	r3, [r7, #31]
 8006238:	e076      	b.n	8006328 <UART_SetConfig+0x348>
 800623a:	2302      	movs	r3, #2
 800623c:	77fb      	strb	r3, [r7, #31]
 800623e:	e073      	b.n	8006328 <UART_SetConfig+0x348>
 8006240:	2304      	movs	r3, #4
 8006242:	77fb      	strb	r3, [r7, #31]
 8006244:	e070      	b.n	8006328 <UART_SetConfig+0x348>
 8006246:	2308      	movs	r3, #8
 8006248:	77fb      	strb	r3, [r7, #31]
 800624a:	e06d      	b.n	8006328 <UART_SetConfig+0x348>
 800624c:	2310      	movs	r3, #16
 800624e:	77fb      	strb	r3, [r7, #31]
 8006250:	e06a      	b.n	8006328 <UART_SetConfig+0x348>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a1b      	ldr	r2, [pc, #108]	@ (80062c4 <UART_SetConfig+0x2e4>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d138      	bne.n	80062ce <UART_SetConfig+0x2ee>
 800625c:	4b13      	ldr	r3, [pc, #76]	@ (80062ac <UART_SetConfig+0x2cc>)
 800625e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006262:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006266:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800626a:	d017      	beq.n	800629c <UART_SetConfig+0x2bc>
 800626c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006270:	d82a      	bhi.n	80062c8 <UART_SetConfig+0x2e8>
 8006272:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006276:	d00b      	beq.n	8006290 <UART_SetConfig+0x2b0>
 8006278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800627c:	d824      	bhi.n	80062c8 <UART_SetConfig+0x2e8>
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <UART_SetConfig+0x2aa>
 8006282:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006286:	d006      	beq.n	8006296 <UART_SetConfig+0x2b6>
 8006288:	e01e      	b.n	80062c8 <UART_SetConfig+0x2e8>
 800628a:	2300      	movs	r3, #0
 800628c:	77fb      	strb	r3, [r7, #31]
 800628e:	e04b      	b.n	8006328 <UART_SetConfig+0x348>
 8006290:	2302      	movs	r3, #2
 8006292:	77fb      	strb	r3, [r7, #31]
 8006294:	e048      	b.n	8006328 <UART_SetConfig+0x348>
 8006296:	2304      	movs	r3, #4
 8006298:	77fb      	strb	r3, [r7, #31]
 800629a:	e045      	b.n	8006328 <UART_SetConfig+0x348>
 800629c:	2308      	movs	r3, #8
 800629e:	77fb      	strb	r3, [r7, #31]
 80062a0:	e042      	b.n	8006328 <UART_SetConfig+0x348>
 80062a2:	bf00      	nop
 80062a4:	efff69f3 	.word	0xefff69f3
 80062a8:	40011000 	.word	0x40011000
 80062ac:	40023800 	.word	0x40023800
 80062b0:	40004400 	.word	0x40004400
 80062b4:	40004800 	.word	0x40004800
 80062b8:	40004c00 	.word	0x40004c00
 80062bc:	40005000 	.word	0x40005000
 80062c0:	40011400 	.word	0x40011400
 80062c4:	40007800 	.word	0x40007800
 80062c8:	2310      	movs	r3, #16
 80062ca:	77fb      	strb	r3, [r7, #31]
 80062cc:	e02c      	b.n	8006328 <UART_SetConfig+0x348>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a72      	ldr	r2, [pc, #456]	@ (800649c <UART_SetConfig+0x4bc>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d125      	bne.n	8006324 <UART_SetConfig+0x344>
 80062d8:	4b71      	ldr	r3, [pc, #452]	@ (80064a0 <UART_SetConfig+0x4c0>)
 80062da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062de:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80062e2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80062e6:	d017      	beq.n	8006318 <UART_SetConfig+0x338>
 80062e8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80062ec:	d817      	bhi.n	800631e <UART_SetConfig+0x33e>
 80062ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062f2:	d00b      	beq.n	800630c <UART_SetConfig+0x32c>
 80062f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062f8:	d811      	bhi.n	800631e <UART_SetConfig+0x33e>
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <UART_SetConfig+0x326>
 80062fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006302:	d006      	beq.n	8006312 <UART_SetConfig+0x332>
 8006304:	e00b      	b.n	800631e <UART_SetConfig+0x33e>
 8006306:	2300      	movs	r3, #0
 8006308:	77fb      	strb	r3, [r7, #31]
 800630a:	e00d      	b.n	8006328 <UART_SetConfig+0x348>
 800630c:	2302      	movs	r3, #2
 800630e:	77fb      	strb	r3, [r7, #31]
 8006310:	e00a      	b.n	8006328 <UART_SetConfig+0x348>
 8006312:	2304      	movs	r3, #4
 8006314:	77fb      	strb	r3, [r7, #31]
 8006316:	e007      	b.n	8006328 <UART_SetConfig+0x348>
 8006318:	2308      	movs	r3, #8
 800631a:	77fb      	strb	r3, [r7, #31]
 800631c:	e004      	b.n	8006328 <UART_SetConfig+0x348>
 800631e:	2310      	movs	r3, #16
 8006320:	77fb      	strb	r3, [r7, #31]
 8006322:	e001      	b.n	8006328 <UART_SetConfig+0x348>
 8006324:	2310      	movs	r3, #16
 8006326:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006330:	d15b      	bne.n	80063ea <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006332:	7ffb      	ldrb	r3, [r7, #31]
 8006334:	2b08      	cmp	r3, #8
 8006336:	d828      	bhi.n	800638a <UART_SetConfig+0x3aa>
 8006338:	a201      	add	r2, pc, #4	@ (adr r2, 8006340 <UART_SetConfig+0x360>)
 800633a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633e:	bf00      	nop
 8006340:	08006365 	.word	0x08006365
 8006344:	0800636d 	.word	0x0800636d
 8006348:	08006375 	.word	0x08006375
 800634c:	0800638b 	.word	0x0800638b
 8006350:	0800637b 	.word	0x0800637b
 8006354:	0800638b 	.word	0x0800638b
 8006358:	0800638b 	.word	0x0800638b
 800635c:	0800638b 	.word	0x0800638b
 8006360:	08006383 	.word	0x08006383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006364:	f7fe f872 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 8006368:	61b8      	str	r0, [r7, #24]
        break;
 800636a:	e013      	b.n	8006394 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800636c:	f7fe f882 	bl	8004474 <HAL_RCC_GetPCLK2Freq>
 8006370:	61b8      	str	r0, [r7, #24]
        break;
 8006372:	e00f      	b.n	8006394 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006374:	4b4b      	ldr	r3, [pc, #300]	@ (80064a4 <UART_SetConfig+0x4c4>)
 8006376:	61bb      	str	r3, [r7, #24]
        break;
 8006378:	e00c      	b.n	8006394 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800637a:	f7fd ff55 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 800637e:	61b8      	str	r0, [r7, #24]
        break;
 8006380:	e008      	b.n	8006394 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006386:	61bb      	str	r3, [r7, #24]
        break;
 8006388:	e004      	b.n	8006394 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	77bb      	strb	r3, [r7, #30]
        break;
 8006392:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d074      	beq.n	8006484 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	005a      	lsls	r2, r3, #1
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	085b      	lsrs	r3, r3, #1
 80063a4:	441a      	add	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	2b0f      	cmp	r3, #15
 80063b4:	d916      	bls.n	80063e4 <UART_SetConfig+0x404>
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063bc:	d212      	bcs.n	80063e4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	f023 030f 	bic.w	r3, r3, #15
 80063c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	085b      	lsrs	r3, r3, #1
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	f003 0307 	and.w	r3, r3, #7
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	89fb      	ldrh	r3, [r7, #14]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	89fa      	ldrh	r2, [r7, #14]
 80063e0:	60da      	str	r2, [r3, #12]
 80063e2:	e04f      	b.n	8006484 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	77bb      	strb	r3, [r7, #30]
 80063e8:	e04c      	b.n	8006484 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063ea:	7ffb      	ldrb	r3, [r7, #31]
 80063ec:	2b08      	cmp	r3, #8
 80063ee:	d828      	bhi.n	8006442 <UART_SetConfig+0x462>
 80063f0:	a201      	add	r2, pc, #4	@ (adr r2, 80063f8 <UART_SetConfig+0x418>)
 80063f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f6:	bf00      	nop
 80063f8:	0800641d 	.word	0x0800641d
 80063fc:	08006425 	.word	0x08006425
 8006400:	0800642d 	.word	0x0800642d
 8006404:	08006443 	.word	0x08006443
 8006408:	08006433 	.word	0x08006433
 800640c:	08006443 	.word	0x08006443
 8006410:	08006443 	.word	0x08006443
 8006414:	08006443 	.word	0x08006443
 8006418:	0800643b 	.word	0x0800643b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800641c:	f7fe f816 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 8006420:	61b8      	str	r0, [r7, #24]
        break;
 8006422:	e013      	b.n	800644c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006424:	f7fe f826 	bl	8004474 <HAL_RCC_GetPCLK2Freq>
 8006428:	61b8      	str	r0, [r7, #24]
        break;
 800642a:	e00f      	b.n	800644c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800642c:	4b1d      	ldr	r3, [pc, #116]	@ (80064a4 <UART_SetConfig+0x4c4>)
 800642e:	61bb      	str	r3, [r7, #24]
        break;
 8006430:	e00c      	b.n	800644c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006432:	f7fd fef9 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 8006436:	61b8      	str	r0, [r7, #24]
        break;
 8006438:	e008      	b.n	800644c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800643a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800643e:	61bb      	str	r3, [r7, #24]
        break;
 8006440:	e004      	b.n	800644c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	77bb      	strb	r3, [r7, #30]
        break;
 800644a:	bf00      	nop
    }

    if (pclk != 0U)
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d018      	beq.n	8006484 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	085a      	lsrs	r2, r3, #1
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	441a      	add	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	fbb2 f3f3 	udiv	r3, r2, r3
 8006464:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	2b0f      	cmp	r3, #15
 800646a:	d909      	bls.n	8006480 <UART_SetConfig+0x4a0>
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006472:	d205      	bcs.n	8006480 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	b29a      	uxth	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	60da      	str	r2, [r3, #12]
 800647e:	e001      	b.n	8006484 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006490:	7fbb      	ldrb	r3, [r7, #30]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3720      	adds	r7, #32
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	40007c00 	.word	0x40007c00
 80064a0:	40023800 	.word	0x40023800
 80064a4:	00f42400 	.word	0x00f42400

080064a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b4:	f003 0308 	and.w	r3, r3, #8
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00a      	beq.n	80064d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00a      	beq.n	80064f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00a      	beq.n	8006516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651a:	f003 0304 	and.w	r3, r3, #4
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00a      	beq.n	8006538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800653c:	f003 0310 	and.w	r3, r3, #16
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00a      	beq.n	800655a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655e:	f003 0320 	and.w	r3, r3, #32
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00a      	beq.n	800657c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01a      	beq.n	80065be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065a6:	d10a      	bne.n	80065be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	605a      	str	r2, [r3, #4]
  }
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08c      	sub	sp, #48	@ 0x30
 80065f0:	af02      	add	r7, sp, #8
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065fc:	f7fb fd12 	bl	8002024 <HAL_GetTick>
 8006600:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0308 	and.w	r3, r3, #8
 800660c:	2b08      	cmp	r3, #8
 800660e:	d12e      	bne.n	800666e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006610:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006618:	2200      	movs	r2, #0
 800661a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f83b 	bl	800669a <UART_WaitOnFlagUntilTimeout>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d021      	beq.n	800666e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	e853 3f00 	ldrex	r3, [r3]
 8006636:	60fb      	str	r3, [r7, #12]
   return(result);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800663e:	623b      	str	r3, [r7, #32]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	461a      	mov	r2, r3
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	61fb      	str	r3, [r7, #28]
 800664a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664c:	69b9      	ldr	r1, [r7, #24]
 800664e:	69fa      	ldr	r2, [r7, #28]
 8006650:	e841 2300 	strex	r3, r2, [r1]
 8006654:	617b      	str	r3, [r7, #20]
   return(result);
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1e6      	bne.n	800662a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2220      	movs	r2, #32
 8006660:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e011      	b.n	8006692 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2220      	movs	r2, #32
 8006672:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2220      	movs	r2, #32
 8006678:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3728      	adds	r7, #40	@ 0x28
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	60f8      	str	r0, [r7, #12]
 80066a2:	60b9      	str	r1, [r7, #8]
 80066a4:	603b      	str	r3, [r7, #0]
 80066a6:	4613      	mov	r3, r2
 80066a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066aa:	e04f      	b.n	800674c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b2:	d04b      	beq.n	800674c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b4:	f7fb fcb6 	bl	8002024 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d302      	bcc.n	80066ca <UART_WaitOnFlagUntilTimeout+0x30>
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e04e      	b.n	800676c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0304 	and.w	r3, r3, #4
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d037      	beq.n	800674c <UART_WaitOnFlagUntilTimeout+0xb2>
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2b80      	cmp	r3, #128	@ 0x80
 80066e0:	d034      	beq.n	800674c <UART_WaitOnFlagUntilTimeout+0xb2>
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2b40      	cmp	r3, #64	@ 0x40
 80066e6:	d031      	beq.n	800674c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	2b08      	cmp	r3, #8
 80066f4:	d110      	bne.n	8006718 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2208      	movs	r2, #8
 80066fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f000 f838 	bl	8006774 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2208      	movs	r2, #8
 8006708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e029      	b.n	800676c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006722:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006726:	d111      	bne.n	800674c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006730:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 f81e 	bl	8006774 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2220      	movs	r2, #32
 800673c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e00f      	b.n	800676c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	69da      	ldr	r2, [r3, #28]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	4013      	ands	r3, r2
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	429a      	cmp	r2, r3
 800675a:	bf0c      	ite	eq
 800675c:	2301      	moveq	r3, #1
 800675e:	2300      	movne	r3, #0
 8006760:	b2db      	uxtb	r3, r3
 8006762:	461a      	mov	r2, r3
 8006764:	79fb      	ldrb	r3, [r7, #7]
 8006766:	429a      	cmp	r2, r3
 8006768:	d0a0      	beq.n	80066ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006774:	b480      	push	{r7}
 8006776:	b095      	sub	sp, #84	@ 0x54
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006784:	e853 3f00 	ldrex	r3, [r3]
 8006788:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800678a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006790:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800679a:	643b      	str	r3, [r7, #64]	@ 0x40
 800679c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067a2:	e841 2300 	strex	r3, r2, [r1]
 80067a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1e6      	bne.n	800677c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3308      	adds	r3, #8
 80067b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	e853 3f00 	ldrex	r3, [r3]
 80067bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	f023 0301 	bic.w	r3, r3, #1
 80067c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3308      	adds	r3, #8
 80067cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067d6:	e841 2300 	strex	r3, r2, [r1]
 80067da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1e5      	bne.n	80067ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d118      	bne.n	800681c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	e853 3f00 	ldrex	r3, [r3]
 80067f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f023 0310 	bic.w	r3, r3, #16
 80067fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	461a      	mov	r2, r3
 8006806:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006808:	61bb      	str	r3, [r7, #24]
 800680a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680c:	6979      	ldr	r1, [r7, #20]
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	e841 2300 	strex	r3, r2, [r1]
 8006814:	613b      	str	r3, [r7, #16]
   return(result);
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e6      	bne.n	80067ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2220      	movs	r2, #32
 8006820:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006830:	bf00      	nop
 8006832:	3754      	adds	r7, #84	@ 0x54
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800683c:	b084      	sub	sp, #16
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	f107 001c 	add.w	r0, r7, #28
 800684a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800684e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006852:	2b01      	cmp	r3, #1
 8006854:	d121      	bne.n	800689a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68da      	ldr	r2, [r3, #12]
 8006866:	4b21      	ldr	r3, [pc, #132]	@ (80068ec <USB_CoreInit+0xb0>)
 8006868:	4013      	ands	r3, r2
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800687a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800687e:	2b01      	cmp	r3, #1
 8006880:	d105      	bne.n	800688e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fa92 	bl	8006db8 <USB_CoreReset>
 8006894:	4603      	mov	r3, r0
 8006896:	73fb      	strb	r3, [r7, #15]
 8006898:	e010      	b.n	80068bc <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fa86 	bl	8006db8 <USB_CoreReset>
 80068ac:	4603      	mov	r3, r0
 80068ae:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80068bc:	7fbb      	ldrb	r3, [r7, #30]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d10b      	bne.n	80068da <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f043 0206 	orr.w	r2, r3, #6
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f043 0220 	orr.w	r2, r3, #32
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80068da:	7bfb      	ldrb	r3, [r7, #15]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068e6:	b004      	add	sp, #16
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	ffbdffbf 	.word	0xffbdffbf

080068f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f023 0201 	bic.w	r2, r3, #1
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b084      	sub	sp, #16
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	460b      	mov	r3, r1
 800691c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800692e:	78fb      	ldrb	r3, [r7, #3]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d115      	bne.n	8006960 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006940:	200a      	movs	r0, #10
 8006942:	f7fb fb7b 	bl	800203c <HAL_Delay>
      ms += 10U;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	330a      	adds	r3, #10
 800694a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fa25 	bl	8006d9c <USB_GetMode>
 8006952:	4603      	mov	r3, r0
 8006954:	2b01      	cmp	r3, #1
 8006956:	d01e      	beq.n	8006996 <USB_SetCurrentMode+0x84>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2bc7      	cmp	r3, #199	@ 0xc7
 800695c:	d9f0      	bls.n	8006940 <USB_SetCurrentMode+0x2e>
 800695e:	e01a      	b.n	8006996 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d115      	bne.n	8006992 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006972:	200a      	movs	r0, #10
 8006974:	f7fb fb62 	bl	800203c <HAL_Delay>
      ms += 10U;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	330a      	adds	r3, #10
 800697c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fa0c 	bl	8006d9c <USB_GetMode>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d005      	beq.n	8006996 <USB_SetCurrentMode+0x84>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2bc7      	cmp	r3, #199	@ 0xc7
 800698e:	d9f0      	bls.n	8006972 <USB_SetCurrentMode+0x60>
 8006990:	e001      	b.n	8006996 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e005      	b.n	80069a2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2bc8      	cmp	r3, #200	@ 0xc8
 800699a:	d101      	bne.n	80069a0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e000      	b.n	80069a2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
	...

080069ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069ac:	b084      	sub	sp, #16
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b086      	sub	sp, #24
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80069ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80069c6:	2300      	movs	r3, #0
 80069c8:	613b      	str	r3, [r7, #16]
 80069ca:	e009      	b.n	80069e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	3340      	adds	r3, #64	@ 0x40
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	2200      	movs	r2, #0
 80069d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	3301      	adds	r3, #1
 80069de:	613b      	str	r3, [r7, #16]
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	2b0e      	cmp	r3, #14
 80069e4:	d9f2      	bls.n	80069cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80069e6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d11c      	bne.n	8006a28 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069fc:	f043 0302 	orr.w	r3, r3, #2
 8006a00:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a06:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	e005      	b.n	8006a34 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a40:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d10d      	bne.n	8006a64 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006a48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d104      	bne.n	8006a5a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006a50:	2100      	movs	r1, #0
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f968 	bl	8006d28 <USB_SetDevSpeed>
 8006a58:	e008      	b.n	8006a6c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f963 	bl	8006d28 <USB_SetDevSpeed>
 8006a62:	e003      	b.n	8006a6c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006a64:	2103      	movs	r1, #3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f95e 	bl	8006d28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a6c:	2110      	movs	r1, #16
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f8fa 	bl	8006c68 <USB_FlushTxFifo>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f924 	bl	8006ccc <USB_FlushRxFifo>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a94:	461a      	mov	r2, r3
 8006a96:	2300      	movs	r3, #0
 8006a98:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aac:	461a      	mov	r2, r3
 8006aae:	2300      	movs	r3, #0
 8006ab0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	613b      	str	r3, [r7, #16]
 8006ab6:	e043      	b.n	8006b40 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006aca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ace:	d118      	bne.n	8006b02 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10a      	bne.n	8006aec <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	e013      	b.n	8006b14 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006af8:	461a      	mov	r2, r3
 8006afa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006afe:	6013      	str	r3, [r2, #0]
 8006b00:	e008      	b.n	8006b14 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b0e:	461a      	mov	r2, r3
 8006b10:	2300      	movs	r3, #0
 8006b12:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	015a      	lsls	r2, r3, #5
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b20:	461a      	mov	r2, r3
 8006b22:	2300      	movs	r3, #0
 8006b24:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b32:	461a      	mov	r2, r3
 8006b34:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006b38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	613b      	str	r3, [r7, #16]
 8006b40:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006b44:	461a      	mov	r2, r3
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d3b5      	bcc.n	8006ab8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	613b      	str	r3, [r7, #16]
 8006b50:	e043      	b.n	8006bda <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b68:	d118      	bne.n	8006b9c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10a      	bne.n	8006b86 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006b82:	6013      	str	r3, [r2, #0]
 8006b84:	e013      	b.n	8006bae <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	015a      	lsls	r2, r3, #5
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b92:	461a      	mov	r2, r3
 8006b94:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006b98:	6013      	str	r3, [r2, #0]
 8006b9a:	e008      	b.n	8006bae <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ba8:	461a      	mov	r2, r3
 8006baa:	2300      	movs	r3, #0
 8006bac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	015a      	lsls	r2, r3, #5
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bba:	461a      	mov	r2, r3
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bcc:	461a      	mov	r2, r3
 8006bce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006bd2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	613b      	str	r3, [r7, #16]
 8006bda:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006bde:	461a      	mov	r2, r3
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d3b5      	bcc.n	8006b52 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bf8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006c06:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d105      	bne.n	8006c1c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	f043 0210 	orr.w	r2, r3, #16
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	699a      	ldr	r2, [r3, #24]
 8006c20:	4b0f      	ldr	r3, [pc, #60]	@ (8006c60 <USB_DevInit+0x2b4>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006c28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d005      	beq.n	8006c3c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	f043 0208 	orr.w	r2, r3, #8
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006c3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d105      	bne.n	8006c50 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	699a      	ldr	r2, [r3, #24]
 8006c48:	4b06      	ldr	r3, [pc, #24]	@ (8006c64 <USB_DevInit+0x2b8>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c5c:	b004      	add	sp, #16
 8006c5e:	4770      	bx	lr
 8006c60:	803c3800 	.word	0x803c3800
 8006c64:	40000004 	.word	0x40000004

08006c68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c82:	d901      	bls.n	8006c88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e01b      	b.n	8006cc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	daf2      	bge.n	8006c76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006c90:	2300      	movs	r3, #0
 8006c92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	019b      	lsls	r3, r3, #6
 8006c98:	f043 0220 	orr.w	r2, r3, #32
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cac:	d901      	bls.n	8006cb2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e006      	b.n	8006cc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	f003 0320 	and.w	r3, r3, #32
 8006cba:	2b20      	cmp	r3, #32
 8006cbc:	d0f0      	beq.n	8006ca0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3714      	adds	r7, #20
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ce4:	d901      	bls.n	8006cea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e018      	b.n	8006d1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	daf2      	bge.n	8006cd8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2210      	movs	r2, #16
 8006cfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d08:	d901      	bls.n	8006d0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e006      	b.n	8006d1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	f003 0310 	and.w	r3, r3, #16
 8006d16:	2b10      	cmp	r3, #16
 8006d18:	d0f0      	beq.n	8006cfc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	460b      	mov	r3, r1
 8006d32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	68f9      	ldr	r1, [r7, #12]
 8006d44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b085      	sub	sp, #20
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006d74:	f023 0303 	bic.w	r3, r3, #3
 8006d78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d88:	f043 0302 	orr.w	r3, r3, #2
 8006d8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	f003 0301 	and.w	r3, r3, #1
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006dd0:	d901      	bls.n	8006dd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e01b      	b.n	8006e0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	daf2      	bge.n	8006dc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	f043 0201 	orr.w	r2, r3, #1
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	3301      	adds	r3, #1
 8006df2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006dfa:	d901      	bls.n	8006e00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e006      	b.n	8006e0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	f003 0301 	and.w	r3, r3, #1
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d0f0      	beq.n	8006dee <USB_CoreReset+0x36>

  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
	...

08006e1c <malloc>:
 8006e1c:	4b02      	ldr	r3, [pc, #8]	@ (8006e28 <malloc+0xc>)
 8006e1e:	4601      	mov	r1, r0
 8006e20:	6818      	ldr	r0, [r3, #0]
 8006e22:	f000 b82d 	b.w	8006e80 <_malloc_r>
 8006e26:	bf00      	nop
 8006e28:	2000000c 	.word	0x2000000c

08006e2c <free>:
 8006e2c:	4b02      	ldr	r3, [pc, #8]	@ (8006e38 <free+0xc>)
 8006e2e:	4601      	mov	r1, r0
 8006e30:	6818      	ldr	r0, [r3, #0]
 8006e32:	f000 b953 	b.w	80070dc <_free_r>
 8006e36:	bf00      	nop
 8006e38:	2000000c 	.word	0x2000000c

08006e3c <sbrk_aligned>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	4e0f      	ldr	r6, [pc, #60]	@ (8006e7c <sbrk_aligned+0x40>)
 8006e40:	460c      	mov	r4, r1
 8006e42:	6831      	ldr	r1, [r6, #0]
 8006e44:	4605      	mov	r5, r0
 8006e46:	b911      	cbnz	r1, 8006e4e <sbrk_aligned+0x12>
 8006e48:	f000 f8fe 	bl	8007048 <_sbrk_r>
 8006e4c:	6030      	str	r0, [r6, #0]
 8006e4e:	4621      	mov	r1, r4
 8006e50:	4628      	mov	r0, r5
 8006e52:	f000 f8f9 	bl	8007048 <_sbrk_r>
 8006e56:	1c43      	adds	r3, r0, #1
 8006e58:	d103      	bne.n	8006e62 <sbrk_aligned+0x26>
 8006e5a:	f04f 34ff 	mov.w	r4, #4294967295
 8006e5e:	4620      	mov	r0, r4
 8006e60:	bd70      	pop	{r4, r5, r6, pc}
 8006e62:	1cc4      	adds	r4, r0, #3
 8006e64:	f024 0403 	bic.w	r4, r4, #3
 8006e68:	42a0      	cmp	r0, r4
 8006e6a:	d0f8      	beq.n	8006e5e <sbrk_aligned+0x22>
 8006e6c:	1a21      	subs	r1, r4, r0
 8006e6e:	4628      	mov	r0, r5
 8006e70:	f000 f8ea 	bl	8007048 <_sbrk_r>
 8006e74:	3001      	adds	r0, #1
 8006e76:	d1f2      	bne.n	8006e5e <sbrk_aligned+0x22>
 8006e78:	e7ef      	b.n	8006e5a <sbrk_aligned+0x1e>
 8006e7a:	bf00      	nop
 8006e7c:	20000dc0 	.word	0x20000dc0

08006e80 <_malloc_r>:
 8006e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e84:	1ccd      	adds	r5, r1, #3
 8006e86:	f025 0503 	bic.w	r5, r5, #3
 8006e8a:	3508      	adds	r5, #8
 8006e8c:	2d0c      	cmp	r5, #12
 8006e8e:	bf38      	it	cc
 8006e90:	250c      	movcc	r5, #12
 8006e92:	2d00      	cmp	r5, #0
 8006e94:	4606      	mov	r6, r0
 8006e96:	db01      	blt.n	8006e9c <_malloc_r+0x1c>
 8006e98:	42a9      	cmp	r1, r5
 8006e9a:	d904      	bls.n	8006ea6 <_malloc_r+0x26>
 8006e9c:	230c      	movs	r3, #12
 8006e9e:	6033      	str	r3, [r6, #0]
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ea6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f7c <_malloc_r+0xfc>
 8006eaa:	f000 f869 	bl	8006f80 <__malloc_lock>
 8006eae:	f8d8 3000 	ldr.w	r3, [r8]
 8006eb2:	461c      	mov	r4, r3
 8006eb4:	bb44      	cbnz	r4, 8006f08 <_malloc_r+0x88>
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	4630      	mov	r0, r6
 8006eba:	f7ff ffbf 	bl	8006e3c <sbrk_aligned>
 8006ebe:	1c43      	adds	r3, r0, #1
 8006ec0:	4604      	mov	r4, r0
 8006ec2:	d158      	bne.n	8006f76 <_malloc_r+0xf6>
 8006ec4:	f8d8 4000 	ldr.w	r4, [r8]
 8006ec8:	4627      	mov	r7, r4
 8006eca:	2f00      	cmp	r7, #0
 8006ecc:	d143      	bne.n	8006f56 <_malloc_r+0xd6>
 8006ece:	2c00      	cmp	r4, #0
 8006ed0:	d04b      	beq.n	8006f6a <_malloc_r+0xea>
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	4639      	mov	r1, r7
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	eb04 0903 	add.w	r9, r4, r3
 8006edc:	f000 f8b4 	bl	8007048 <_sbrk_r>
 8006ee0:	4581      	cmp	r9, r0
 8006ee2:	d142      	bne.n	8006f6a <_malloc_r+0xea>
 8006ee4:	6821      	ldr	r1, [r4, #0]
 8006ee6:	1a6d      	subs	r5, r5, r1
 8006ee8:	4629      	mov	r1, r5
 8006eea:	4630      	mov	r0, r6
 8006eec:	f7ff ffa6 	bl	8006e3c <sbrk_aligned>
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d03a      	beq.n	8006f6a <_malloc_r+0xea>
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	442b      	add	r3, r5
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	f8d8 3000 	ldr.w	r3, [r8]
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	bb62      	cbnz	r2, 8006f5c <_malloc_r+0xdc>
 8006f02:	f8c8 7000 	str.w	r7, [r8]
 8006f06:	e00f      	b.n	8006f28 <_malloc_r+0xa8>
 8006f08:	6822      	ldr	r2, [r4, #0]
 8006f0a:	1b52      	subs	r2, r2, r5
 8006f0c:	d420      	bmi.n	8006f50 <_malloc_r+0xd0>
 8006f0e:	2a0b      	cmp	r2, #11
 8006f10:	d917      	bls.n	8006f42 <_malloc_r+0xc2>
 8006f12:	1961      	adds	r1, r4, r5
 8006f14:	42a3      	cmp	r3, r4
 8006f16:	6025      	str	r5, [r4, #0]
 8006f18:	bf18      	it	ne
 8006f1a:	6059      	strne	r1, [r3, #4]
 8006f1c:	6863      	ldr	r3, [r4, #4]
 8006f1e:	bf08      	it	eq
 8006f20:	f8c8 1000 	streq.w	r1, [r8]
 8006f24:	5162      	str	r2, [r4, r5]
 8006f26:	604b      	str	r3, [r1, #4]
 8006f28:	4630      	mov	r0, r6
 8006f2a:	f000 f82f 	bl	8006f8c <__malloc_unlock>
 8006f2e:	f104 000b 	add.w	r0, r4, #11
 8006f32:	1d23      	adds	r3, r4, #4
 8006f34:	f020 0007 	bic.w	r0, r0, #7
 8006f38:	1ac2      	subs	r2, r0, r3
 8006f3a:	bf1c      	itt	ne
 8006f3c:	1a1b      	subne	r3, r3, r0
 8006f3e:	50a3      	strne	r3, [r4, r2]
 8006f40:	e7af      	b.n	8006ea2 <_malloc_r+0x22>
 8006f42:	6862      	ldr	r2, [r4, #4]
 8006f44:	42a3      	cmp	r3, r4
 8006f46:	bf0c      	ite	eq
 8006f48:	f8c8 2000 	streq.w	r2, [r8]
 8006f4c:	605a      	strne	r2, [r3, #4]
 8006f4e:	e7eb      	b.n	8006f28 <_malloc_r+0xa8>
 8006f50:	4623      	mov	r3, r4
 8006f52:	6864      	ldr	r4, [r4, #4]
 8006f54:	e7ae      	b.n	8006eb4 <_malloc_r+0x34>
 8006f56:	463c      	mov	r4, r7
 8006f58:	687f      	ldr	r7, [r7, #4]
 8006f5a:	e7b6      	b.n	8006eca <_malloc_r+0x4a>
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	42a3      	cmp	r3, r4
 8006f62:	d1fb      	bne.n	8006f5c <_malloc_r+0xdc>
 8006f64:	2300      	movs	r3, #0
 8006f66:	6053      	str	r3, [r2, #4]
 8006f68:	e7de      	b.n	8006f28 <_malloc_r+0xa8>
 8006f6a:	230c      	movs	r3, #12
 8006f6c:	6033      	str	r3, [r6, #0]
 8006f6e:	4630      	mov	r0, r6
 8006f70:	f000 f80c 	bl	8006f8c <__malloc_unlock>
 8006f74:	e794      	b.n	8006ea0 <_malloc_r+0x20>
 8006f76:	6005      	str	r5, [r0, #0]
 8006f78:	e7d6      	b.n	8006f28 <_malloc_r+0xa8>
 8006f7a:	bf00      	nop
 8006f7c:	20000dc4 	.word	0x20000dc4

08006f80 <__malloc_lock>:
 8006f80:	4801      	ldr	r0, [pc, #4]	@ (8006f88 <__malloc_lock+0x8>)
 8006f82:	f000 b89b 	b.w	80070bc <__retarget_lock_acquire_recursive>
 8006f86:	bf00      	nop
 8006f88:	20000f04 	.word	0x20000f04

08006f8c <__malloc_unlock>:
 8006f8c:	4801      	ldr	r0, [pc, #4]	@ (8006f94 <__malloc_unlock+0x8>)
 8006f8e:	f000 b896 	b.w	80070be <__retarget_lock_release_recursive>
 8006f92:	bf00      	nop
 8006f94:	20000f04 	.word	0x20000f04

08006f98 <sniprintf>:
 8006f98:	b40c      	push	{r2, r3}
 8006f9a:	b530      	push	{r4, r5, lr}
 8006f9c:	4b18      	ldr	r3, [pc, #96]	@ (8007000 <sniprintf+0x68>)
 8006f9e:	1e0c      	subs	r4, r1, #0
 8006fa0:	681d      	ldr	r5, [r3, #0]
 8006fa2:	b09d      	sub	sp, #116	@ 0x74
 8006fa4:	da08      	bge.n	8006fb8 <sniprintf+0x20>
 8006fa6:	238b      	movs	r3, #139	@ 0x8b
 8006fa8:	602b      	str	r3, [r5, #0]
 8006faa:	f04f 30ff 	mov.w	r0, #4294967295
 8006fae:	b01d      	add	sp, #116	@ 0x74
 8006fb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fb4:	b002      	add	sp, #8
 8006fb6:	4770      	bx	lr
 8006fb8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006fbc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006fc0:	f04f 0300 	mov.w	r3, #0
 8006fc4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006fc6:	bf14      	ite	ne
 8006fc8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006fcc:	4623      	moveq	r3, r4
 8006fce:	9304      	str	r3, [sp, #16]
 8006fd0:	9307      	str	r3, [sp, #28]
 8006fd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006fd6:	9002      	str	r0, [sp, #8]
 8006fd8:	9006      	str	r0, [sp, #24]
 8006fda:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006fde:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006fe0:	ab21      	add	r3, sp, #132	@ 0x84
 8006fe2:	a902      	add	r1, sp, #8
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	f000 f91e 	bl	8007228 <_svfiprintf_r>
 8006fec:	1c43      	adds	r3, r0, #1
 8006fee:	bfbc      	itt	lt
 8006ff0:	238b      	movlt	r3, #139	@ 0x8b
 8006ff2:	602b      	strlt	r3, [r5, #0]
 8006ff4:	2c00      	cmp	r4, #0
 8006ff6:	d0da      	beq.n	8006fae <sniprintf+0x16>
 8006ff8:	9b02      	ldr	r3, [sp, #8]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	701a      	strb	r2, [r3, #0]
 8006ffe:	e7d6      	b.n	8006fae <sniprintf+0x16>
 8007000:	2000000c 	.word	0x2000000c

08007004 <memmove>:
 8007004:	4288      	cmp	r0, r1
 8007006:	b510      	push	{r4, lr}
 8007008:	eb01 0402 	add.w	r4, r1, r2
 800700c:	d902      	bls.n	8007014 <memmove+0x10>
 800700e:	4284      	cmp	r4, r0
 8007010:	4623      	mov	r3, r4
 8007012:	d807      	bhi.n	8007024 <memmove+0x20>
 8007014:	1e43      	subs	r3, r0, #1
 8007016:	42a1      	cmp	r1, r4
 8007018:	d008      	beq.n	800702c <memmove+0x28>
 800701a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800701e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007022:	e7f8      	b.n	8007016 <memmove+0x12>
 8007024:	4402      	add	r2, r0
 8007026:	4601      	mov	r1, r0
 8007028:	428a      	cmp	r2, r1
 800702a:	d100      	bne.n	800702e <memmove+0x2a>
 800702c:	bd10      	pop	{r4, pc}
 800702e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007036:	e7f7      	b.n	8007028 <memmove+0x24>

08007038 <memset>:
 8007038:	4402      	add	r2, r0
 800703a:	4603      	mov	r3, r0
 800703c:	4293      	cmp	r3, r2
 800703e:	d100      	bne.n	8007042 <memset+0xa>
 8007040:	4770      	bx	lr
 8007042:	f803 1b01 	strb.w	r1, [r3], #1
 8007046:	e7f9      	b.n	800703c <memset+0x4>

08007048 <_sbrk_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4d06      	ldr	r5, [pc, #24]	@ (8007064 <_sbrk_r+0x1c>)
 800704c:	2300      	movs	r3, #0
 800704e:	4604      	mov	r4, r0
 8007050:	4608      	mov	r0, r1
 8007052:	602b      	str	r3, [r5, #0]
 8007054:	f7fa fc92 	bl	800197c <_sbrk>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d102      	bne.n	8007062 <_sbrk_r+0x1a>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	b103      	cbz	r3, 8007062 <_sbrk_r+0x1a>
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	20000f00 	.word	0x20000f00

08007068 <__errno>:
 8007068:	4b01      	ldr	r3, [pc, #4]	@ (8007070 <__errno+0x8>)
 800706a:	6818      	ldr	r0, [r3, #0]
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	2000000c 	.word	0x2000000c

08007074 <__libc_init_array>:
 8007074:	b570      	push	{r4, r5, r6, lr}
 8007076:	4d0d      	ldr	r5, [pc, #52]	@ (80070ac <__libc_init_array+0x38>)
 8007078:	4c0d      	ldr	r4, [pc, #52]	@ (80070b0 <__libc_init_array+0x3c>)
 800707a:	1b64      	subs	r4, r4, r5
 800707c:	10a4      	asrs	r4, r4, #2
 800707e:	2600      	movs	r6, #0
 8007080:	42a6      	cmp	r6, r4
 8007082:	d109      	bne.n	8007098 <__libc_init_array+0x24>
 8007084:	4d0b      	ldr	r5, [pc, #44]	@ (80070b4 <__libc_init_array+0x40>)
 8007086:	4c0c      	ldr	r4, [pc, #48]	@ (80070b8 <__libc_init_array+0x44>)
 8007088:	f000 fb8c 	bl	80077a4 <_init>
 800708c:	1b64      	subs	r4, r4, r5
 800708e:	10a4      	asrs	r4, r4, #2
 8007090:	2600      	movs	r6, #0
 8007092:	42a6      	cmp	r6, r4
 8007094:	d105      	bne.n	80070a2 <__libc_init_array+0x2e>
 8007096:	bd70      	pop	{r4, r5, r6, pc}
 8007098:	f855 3b04 	ldr.w	r3, [r5], #4
 800709c:	4798      	blx	r3
 800709e:	3601      	adds	r6, #1
 80070a0:	e7ee      	b.n	8007080 <__libc_init_array+0xc>
 80070a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80070a6:	4798      	blx	r3
 80070a8:	3601      	adds	r6, #1
 80070aa:	e7f2      	b.n	8007092 <__libc_init_array+0x1e>
 80070ac:	08008994 	.word	0x08008994
 80070b0:	08008994 	.word	0x08008994
 80070b4:	08008994 	.word	0x08008994
 80070b8:	08008998 	.word	0x08008998

080070bc <__retarget_lock_acquire_recursive>:
 80070bc:	4770      	bx	lr

080070be <__retarget_lock_release_recursive>:
 80070be:	4770      	bx	lr

080070c0 <memcpy>:
 80070c0:	440a      	add	r2, r1
 80070c2:	4291      	cmp	r1, r2
 80070c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80070c8:	d100      	bne.n	80070cc <memcpy+0xc>
 80070ca:	4770      	bx	lr
 80070cc:	b510      	push	{r4, lr}
 80070ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070d6:	4291      	cmp	r1, r2
 80070d8:	d1f9      	bne.n	80070ce <memcpy+0xe>
 80070da:	bd10      	pop	{r4, pc}

080070dc <_free_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	4605      	mov	r5, r0
 80070e0:	2900      	cmp	r1, #0
 80070e2:	d041      	beq.n	8007168 <_free_r+0x8c>
 80070e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070e8:	1f0c      	subs	r4, r1, #4
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	bfb8      	it	lt
 80070ee:	18e4      	addlt	r4, r4, r3
 80070f0:	f7ff ff46 	bl	8006f80 <__malloc_lock>
 80070f4:	4a1d      	ldr	r2, [pc, #116]	@ (800716c <_free_r+0x90>)
 80070f6:	6813      	ldr	r3, [r2, #0]
 80070f8:	b933      	cbnz	r3, 8007108 <_free_r+0x2c>
 80070fa:	6063      	str	r3, [r4, #4]
 80070fc:	6014      	str	r4, [r2, #0]
 80070fe:	4628      	mov	r0, r5
 8007100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007104:	f7ff bf42 	b.w	8006f8c <__malloc_unlock>
 8007108:	42a3      	cmp	r3, r4
 800710a:	d908      	bls.n	800711e <_free_r+0x42>
 800710c:	6820      	ldr	r0, [r4, #0]
 800710e:	1821      	adds	r1, r4, r0
 8007110:	428b      	cmp	r3, r1
 8007112:	bf01      	itttt	eq
 8007114:	6819      	ldreq	r1, [r3, #0]
 8007116:	685b      	ldreq	r3, [r3, #4]
 8007118:	1809      	addeq	r1, r1, r0
 800711a:	6021      	streq	r1, [r4, #0]
 800711c:	e7ed      	b.n	80070fa <_free_r+0x1e>
 800711e:	461a      	mov	r2, r3
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	b10b      	cbz	r3, 8007128 <_free_r+0x4c>
 8007124:	42a3      	cmp	r3, r4
 8007126:	d9fa      	bls.n	800711e <_free_r+0x42>
 8007128:	6811      	ldr	r1, [r2, #0]
 800712a:	1850      	adds	r0, r2, r1
 800712c:	42a0      	cmp	r0, r4
 800712e:	d10b      	bne.n	8007148 <_free_r+0x6c>
 8007130:	6820      	ldr	r0, [r4, #0]
 8007132:	4401      	add	r1, r0
 8007134:	1850      	adds	r0, r2, r1
 8007136:	4283      	cmp	r3, r0
 8007138:	6011      	str	r1, [r2, #0]
 800713a:	d1e0      	bne.n	80070fe <_free_r+0x22>
 800713c:	6818      	ldr	r0, [r3, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	6053      	str	r3, [r2, #4]
 8007142:	4408      	add	r0, r1
 8007144:	6010      	str	r0, [r2, #0]
 8007146:	e7da      	b.n	80070fe <_free_r+0x22>
 8007148:	d902      	bls.n	8007150 <_free_r+0x74>
 800714a:	230c      	movs	r3, #12
 800714c:	602b      	str	r3, [r5, #0]
 800714e:	e7d6      	b.n	80070fe <_free_r+0x22>
 8007150:	6820      	ldr	r0, [r4, #0]
 8007152:	1821      	adds	r1, r4, r0
 8007154:	428b      	cmp	r3, r1
 8007156:	bf04      	itt	eq
 8007158:	6819      	ldreq	r1, [r3, #0]
 800715a:	685b      	ldreq	r3, [r3, #4]
 800715c:	6063      	str	r3, [r4, #4]
 800715e:	bf04      	itt	eq
 8007160:	1809      	addeq	r1, r1, r0
 8007162:	6021      	streq	r1, [r4, #0]
 8007164:	6054      	str	r4, [r2, #4]
 8007166:	e7ca      	b.n	80070fe <_free_r+0x22>
 8007168:	bd38      	pop	{r3, r4, r5, pc}
 800716a:	bf00      	nop
 800716c:	20000dc4 	.word	0x20000dc4

08007170 <__ssputs_r>:
 8007170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007174:	688e      	ldr	r6, [r1, #8]
 8007176:	461f      	mov	r7, r3
 8007178:	42be      	cmp	r6, r7
 800717a:	680b      	ldr	r3, [r1, #0]
 800717c:	4682      	mov	sl, r0
 800717e:	460c      	mov	r4, r1
 8007180:	4690      	mov	r8, r2
 8007182:	d82d      	bhi.n	80071e0 <__ssputs_r+0x70>
 8007184:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007188:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800718c:	d026      	beq.n	80071dc <__ssputs_r+0x6c>
 800718e:	6965      	ldr	r5, [r4, #20]
 8007190:	6909      	ldr	r1, [r1, #16]
 8007192:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007196:	eba3 0901 	sub.w	r9, r3, r1
 800719a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800719e:	1c7b      	adds	r3, r7, #1
 80071a0:	444b      	add	r3, r9
 80071a2:	106d      	asrs	r5, r5, #1
 80071a4:	429d      	cmp	r5, r3
 80071a6:	bf38      	it	cc
 80071a8:	461d      	movcc	r5, r3
 80071aa:	0553      	lsls	r3, r2, #21
 80071ac:	d527      	bpl.n	80071fe <__ssputs_r+0x8e>
 80071ae:	4629      	mov	r1, r5
 80071b0:	f7ff fe66 	bl	8006e80 <_malloc_r>
 80071b4:	4606      	mov	r6, r0
 80071b6:	b360      	cbz	r0, 8007212 <__ssputs_r+0xa2>
 80071b8:	6921      	ldr	r1, [r4, #16]
 80071ba:	464a      	mov	r2, r9
 80071bc:	f7ff ff80 	bl	80070c0 <memcpy>
 80071c0:	89a3      	ldrh	r3, [r4, #12]
 80071c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80071c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ca:	81a3      	strh	r3, [r4, #12]
 80071cc:	6126      	str	r6, [r4, #16]
 80071ce:	6165      	str	r5, [r4, #20]
 80071d0:	444e      	add	r6, r9
 80071d2:	eba5 0509 	sub.w	r5, r5, r9
 80071d6:	6026      	str	r6, [r4, #0]
 80071d8:	60a5      	str	r5, [r4, #8]
 80071da:	463e      	mov	r6, r7
 80071dc:	42be      	cmp	r6, r7
 80071de:	d900      	bls.n	80071e2 <__ssputs_r+0x72>
 80071e0:	463e      	mov	r6, r7
 80071e2:	6820      	ldr	r0, [r4, #0]
 80071e4:	4632      	mov	r2, r6
 80071e6:	4641      	mov	r1, r8
 80071e8:	f7ff ff0c 	bl	8007004 <memmove>
 80071ec:	68a3      	ldr	r3, [r4, #8]
 80071ee:	1b9b      	subs	r3, r3, r6
 80071f0:	60a3      	str	r3, [r4, #8]
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	4433      	add	r3, r6
 80071f6:	6023      	str	r3, [r4, #0]
 80071f8:	2000      	movs	r0, #0
 80071fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071fe:	462a      	mov	r2, r5
 8007200:	f000 fa9a 	bl	8007738 <_realloc_r>
 8007204:	4606      	mov	r6, r0
 8007206:	2800      	cmp	r0, #0
 8007208:	d1e0      	bne.n	80071cc <__ssputs_r+0x5c>
 800720a:	6921      	ldr	r1, [r4, #16]
 800720c:	4650      	mov	r0, sl
 800720e:	f7ff ff65 	bl	80070dc <_free_r>
 8007212:	230c      	movs	r3, #12
 8007214:	f8ca 3000 	str.w	r3, [sl]
 8007218:	89a3      	ldrh	r3, [r4, #12]
 800721a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800721e:	81a3      	strh	r3, [r4, #12]
 8007220:	f04f 30ff 	mov.w	r0, #4294967295
 8007224:	e7e9      	b.n	80071fa <__ssputs_r+0x8a>
	...

08007228 <_svfiprintf_r>:
 8007228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722c:	4698      	mov	r8, r3
 800722e:	898b      	ldrh	r3, [r1, #12]
 8007230:	061b      	lsls	r3, r3, #24
 8007232:	b09d      	sub	sp, #116	@ 0x74
 8007234:	4607      	mov	r7, r0
 8007236:	460d      	mov	r5, r1
 8007238:	4614      	mov	r4, r2
 800723a:	d510      	bpl.n	800725e <_svfiprintf_r+0x36>
 800723c:	690b      	ldr	r3, [r1, #16]
 800723e:	b973      	cbnz	r3, 800725e <_svfiprintf_r+0x36>
 8007240:	2140      	movs	r1, #64	@ 0x40
 8007242:	f7ff fe1d 	bl	8006e80 <_malloc_r>
 8007246:	6028      	str	r0, [r5, #0]
 8007248:	6128      	str	r0, [r5, #16]
 800724a:	b930      	cbnz	r0, 800725a <_svfiprintf_r+0x32>
 800724c:	230c      	movs	r3, #12
 800724e:	603b      	str	r3, [r7, #0]
 8007250:	f04f 30ff 	mov.w	r0, #4294967295
 8007254:	b01d      	add	sp, #116	@ 0x74
 8007256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800725a:	2340      	movs	r3, #64	@ 0x40
 800725c:	616b      	str	r3, [r5, #20]
 800725e:	2300      	movs	r3, #0
 8007260:	9309      	str	r3, [sp, #36]	@ 0x24
 8007262:	2320      	movs	r3, #32
 8007264:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007268:	f8cd 800c 	str.w	r8, [sp, #12]
 800726c:	2330      	movs	r3, #48	@ 0x30
 800726e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800740c <_svfiprintf_r+0x1e4>
 8007272:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007276:	f04f 0901 	mov.w	r9, #1
 800727a:	4623      	mov	r3, r4
 800727c:	469a      	mov	sl, r3
 800727e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007282:	b10a      	cbz	r2, 8007288 <_svfiprintf_r+0x60>
 8007284:	2a25      	cmp	r2, #37	@ 0x25
 8007286:	d1f9      	bne.n	800727c <_svfiprintf_r+0x54>
 8007288:	ebba 0b04 	subs.w	fp, sl, r4
 800728c:	d00b      	beq.n	80072a6 <_svfiprintf_r+0x7e>
 800728e:	465b      	mov	r3, fp
 8007290:	4622      	mov	r2, r4
 8007292:	4629      	mov	r1, r5
 8007294:	4638      	mov	r0, r7
 8007296:	f7ff ff6b 	bl	8007170 <__ssputs_r>
 800729a:	3001      	adds	r0, #1
 800729c:	f000 80a7 	beq.w	80073ee <_svfiprintf_r+0x1c6>
 80072a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072a2:	445a      	add	r2, fp
 80072a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80072a6:	f89a 3000 	ldrb.w	r3, [sl]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 809f 	beq.w	80073ee <_svfiprintf_r+0x1c6>
 80072b0:	2300      	movs	r3, #0
 80072b2:	f04f 32ff 	mov.w	r2, #4294967295
 80072b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072ba:	f10a 0a01 	add.w	sl, sl, #1
 80072be:	9304      	str	r3, [sp, #16]
 80072c0:	9307      	str	r3, [sp, #28]
 80072c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80072c8:	4654      	mov	r4, sl
 80072ca:	2205      	movs	r2, #5
 80072cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072d0:	484e      	ldr	r0, [pc, #312]	@ (800740c <_svfiprintf_r+0x1e4>)
 80072d2:	f7f8 ff9d 	bl	8000210 <memchr>
 80072d6:	9a04      	ldr	r2, [sp, #16]
 80072d8:	b9d8      	cbnz	r0, 8007312 <_svfiprintf_r+0xea>
 80072da:	06d0      	lsls	r0, r2, #27
 80072dc:	bf44      	itt	mi
 80072de:	2320      	movmi	r3, #32
 80072e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072e4:	0711      	lsls	r1, r2, #28
 80072e6:	bf44      	itt	mi
 80072e8:	232b      	movmi	r3, #43	@ 0x2b
 80072ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072ee:	f89a 3000 	ldrb.w	r3, [sl]
 80072f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80072f4:	d015      	beq.n	8007322 <_svfiprintf_r+0xfa>
 80072f6:	9a07      	ldr	r2, [sp, #28]
 80072f8:	4654      	mov	r4, sl
 80072fa:	2000      	movs	r0, #0
 80072fc:	f04f 0c0a 	mov.w	ip, #10
 8007300:	4621      	mov	r1, r4
 8007302:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007306:	3b30      	subs	r3, #48	@ 0x30
 8007308:	2b09      	cmp	r3, #9
 800730a:	d94b      	bls.n	80073a4 <_svfiprintf_r+0x17c>
 800730c:	b1b0      	cbz	r0, 800733c <_svfiprintf_r+0x114>
 800730e:	9207      	str	r2, [sp, #28]
 8007310:	e014      	b.n	800733c <_svfiprintf_r+0x114>
 8007312:	eba0 0308 	sub.w	r3, r0, r8
 8007316:	fa09 f303 	lsl.w	r3, r9, r3
 800731a:	4313      	orrs	r3, r2
 800731c:	9304      	str	r3, [sp, #16]
 800731e:	46a2      	mov	sl, r4
 8007320:	e7d2      	b.n	80072c8 <_svfiprintf_r+0xa0>
 8007322:	9b03      	ldr	r3, [sp, #12]
 8007324:	1d19      	adds	r1, r3, #4
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	9103      	str	r1, [sp, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	bfbb      	ittet	lt
 800732e:	425b      	neglt	r3, r3
 8007330:	f042 0202 	orrlt.w	r2, r2, #2
 8007334:	9307      	strge	r3, [sp, #28]
 8007336:	9307      	strlt	r3, [sp, #28]
 8007338:	bfb8      	it	lt
 800733a:	9204      	strlt	r2, [sp, #16]
 800733c:	7823      	ldrb	r3, [r4, #0]
 800733e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007340:	d10a      	bne.n	8007358 <_svfiprintf_r+0x130>
 8007342:	7863      	ldrb	r3, [r4, #1]
 8007344:	2b2a      	cmp	r3, #42	@ 0x2a
 8007346:	d132      	bne.n	80073ae <_svfiprintf_r+0x186>
 8007348:	9b03      	ldr	r3, [sp, #12]
 800734a:	1d1a      	adds	r2, r3, #4
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	9203      	str	r2, [sp, #12]
 8007350:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007354:	3402      	adds	r4, #2
 8007356:	9305      	str	r3, [sp, #20]
 8007358:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800741c <_svfiprintf_r+0x1f4>
 800735c:	7821      	ldrb	r1, [r4, #0]
 800735e:	2203      	movs	r2, #3
 8007360:	4650      	mov	r0, sl
 8007362:	f7f8 ff55 	bl	8000210 <memchr>
 8007366:	b138      	cbz	r0, 8007378 <_svfiprintf_r+0x150>
 8007368:	9b04      	ldr	r3, [sp, #16]
 800736a:	eba0 000a 	sub.w	r0, r0, sl
 800736e:	2240      	movs	r2, #64	@ 0x40
 8007370:	4082      	lsls	r2, r0
 8007372:	4313      	orrs	r3, r2
 8007374:	3401      	adds	r4, #1
 8007376:	9304      	str	r3, [sp, #16]
 8007378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800737c:	4824      	ldr	r0, [pc, #144]	@ (8007410 <_svfiprintf_r+0x1e8>)
 800737e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007382:	2206      	movs	r2, #6
 8007384:	f7f8 ff44 	bl	8000210 <memchr>
 8007388:	2800      	cmp	r0, #0
 800738a:	d036      	beq.n	80073fa <_svfiprintf_r+0x1d2>
 800738c:	4b21      	ldr	r3, [pc, #132]	@ (8007414 <_svfiprintf_r+0x1ec>)
 800738e:	bb1b      	cbnz	r3, 80073d8 <_svfiprintf_r+0x1b0>
 8007390:	9b03      	ldr	r3, [sp, #12]
 8007392:	3307      	adds	r3, #7
 8007394:	f023 0307 	bic.w	r3, r3, #7
 8007398:	3308      	adds	r3, #8
 800739a:	9303      	str	r3, [sp, #12]
 800739c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800739e:	4433      	add	r3, r6
 80073a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80073a2:	e76a      	b.n	800727a <_svfiprintf_r+0x52>
 80073a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80073a8:	460c      	mov	r4, r1
 80073aa:	2001      	movs	r0, #1
 80073ac:	e7a8      	b.n	8007300 <_svfiprintf_r+0xd8>
 80073ae:	2300      	movs	r3, #0
 80073b0:	3401      	adds	r4, #1
 80073b2:	9305      	str	r3, [sp, #20]
 80073b4:	4619      	mov	r1, r3
 80073b6:	f04f 0c0a 	mov.w	ip, #10
 80073ba:	4620      	mov	r0, r4
 80073bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073c0:	3a30      	subs	r2, #48	@ 0x30
 80073c2:	2a09      	cmp	r2, #9
 80073c4:	d903      	bls.n	80073ce <_svfiprintf_r+0x1a6>
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0c6      	beq.n	8007358 <_svfiprintf_r+0x130>
 80073ca:	9105      	str	r1, [sp, #20]
 80073cc:	e7c4      	b.n	8007358 <_svfiprintf_r+0x130>
 80073ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80073d2:	4604      	mov	r4, r0
 80073d4:	2301      	movs	r3, #1
 80073d6:	e7f0      	b.n	80073ba <_svfiprintf_r+0x192>
 80073d8:	ab03      	add	r3, sp, #12
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	462a      	mov	r2, r5
 80073de:	4b0e      	ldr	r3, [pc, #56]	@ (8007418 <_svfiprintf_r+0x1f0>)
 80073e0:	a904      	add	r1, sp, #16
 80073e2:	4638      	mov	r0, r7
 80073e4:	f3af 8000 	nop.w
 80073e8:	1c42      	adds	r2, r0, #1
 80073ea:	4606      	mov	r6, r0
 80073ec:	d1d6      	bne.n	800739c <_svfiprintf_r+0x174>
 80073ee:	89ab      	ldrh	r3, [r5, #12]
 80073f0:	065b      	lsls	r3, r3, #25
 80073f2:	f53f af2d 	bmi.w	8007250 <_svfiprintf_r+0x28>
 80073f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073f8:	e72c      	b.n	8007254 <_svfiprintf_r+0x2c>
 80073fa:	ab03      	add	r3, sp, #12
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	462a      	mov	r2, r5
 8007400:	4b05      	ldr	r3, [pc, #20]	@ (8007418 <_svfiprintf_r+0x1f0>)
 8007402:	a904      	add	r1, sp, #16
 8007404:	4638      	mov	r0, r7
 8007406:	f000 f879 	bl	80074fc <_printf_i>
 800740a:	e7ed      	b.n	80073e8 <_svfiprintf_r+0x1c0>
 800740c:	08008958 	.word	0x08008958
 8007410:	08008962 	.word	0x08008962
 8007414:	00000000 	.word	0x00000000
 8007418:	08007171 	.word	0x08007171
 800741c:	0800895e 	.word	0x0800895e

08007420 <_printf_common>:
 8007420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007424:	4616      	mov	r6, r2
 8007426:	4698      	mov	r8, r3
 8007428:	688a      	ldr	r2, [r1, #8]
 800742a:	690b      	ldr	r3, [r1, #16]
 800742c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007430:	4293      	cmp	r3, r2
 8007432:	bfb8      	it	lt
 8007434:	4613      	movlt	r3, r2
 8007436:	6033      	str	r3, [r6, #0]
 8007438:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800743c:	4607      	mov	r7, r0
 800743e:	460c      	mov	r4, r1
 8007440:	b10a      	cbz	r2, 8007446 <_printf_common+0x26>
 8007442:	3301      	adds	r3, #1
 8007444:	6033      	str	r3, [r6, #0]
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	0699      	lsls	r1, r3, #26
 800744a:	bf42      	ittt	mi
 800744c:	6833      	ldrmi	r3, [r6, #0]
 800744e:	3302      	addmi	r3, #2
 8007450:	6033      	strmi	r3, [r6, #0]
 8007452:	6825      	ldr	r5, [r4, #0]
 8007454:	f015 0506 	ands.w	r5, r5, #6
 8007458:	d106      	bne.n	8007468 <_printf_common+0x48>
 800745a:	f104 0a19 	add.w	sl, r4, #25
 800745e:	68e3      	ldr	r3, [r4, #12]
 8007460:	6832      	ldr	r2, [r6, #0]
 8007462:	1a9b      	subs	r3, r3, r2
 8007464:	42ab      	cmp	r3, r5
 8007466:	dc26      	bgt.n	80074b6 <_printf_common+0x96>
 8007468:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800746c:	6822      	ldr	r2, [r4, #0]
 800746e:	3b00      	subs	r3, #0
 8007470:	bf18      	it	ne
 8007472:	2301      	movne	r3, #1
 8007474:	0692      	lsls	r2, r2, #26
 8007476:	d42b      	bmi.n	80074d0 <_printf_common+0xb0>
 8007478:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800747c:	4641      	mov	r1, r8
 800747e:	4638      	mov	r0, r7
 8007480:	47c8      	blx	r9
 8007482:	3001      	adds	r0, #1
 8007484:	d01e      	beq.n	80074c4 <_printf_common+0xa4>
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	6922      	ldr	r2, [r4, #16]
 800748a:	f003 0306 	and.w	r3, r3, #6
 800748e:	2b04      	cmp	r3, #4
 8007490:	bf02      	ittt	eq
 8007492:	68e5      	ldreq	r5, [r4, #12]
 8007494:	6833      	ldreq	r3, [r6, #0]
 8007496:	1aed      	subeq	r5, r5, r3
 8007498:	68a3      	ldr	r3, [r4, #8]
 800749a:	bf0c      	ite	eq
 800749c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074a0:	2500      	movne	r5, #0
 80074a2:	4293      	cmp	r3, r2
 80074a4:	bfc4      	itt	gt
 80074a6:	1a9b      	subgt	r3, r3, r2
 80074a8:	18ed      	addgt	r5, r5, r3
 80074aa:	2600      	movs	r6, #0
 80074ac:	341a      	adds	r4, #26
 80074ae:	42b5      	cmp	r5, r6
 80074b0:	d11a      	bne.n	80074e8 <_printf_common+0xc8>
 80074b2:	2000      	movs	r0, #0
 80074b4:	e008      	b.n	80074c8 <_printf_common+0xa8>
 80074b6:	2301      	movs	r3, #1
 80074b8:	4652      	mov	r2, sl
 80074ba:	4641      	mov	r1, r8
 80074bc:	4638      	mov	r0, r7
 80074be:	47c8      	blx	r9
 80074c0:	3001      	adds	r0, #1
 80074c2:	d103      	bne.n	80074cc <_printf_common+0xac>
 80074c4:	f04f 30ff 	mov.w	r0, #4294967295
 80074c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074cc:	3501      	adds	r5, #1
 80074ce:	e7c6      	b.n	800745e <_printf_common+0x3e>
 80074d0:	18e1      	adds	r1, r4, r3
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	2030      	movs	r0, #48	@ 0x30
 80074d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80074da:	4422      	add	r2, r4
 80074dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80074e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80074e4:	3302      	adds	r3, #2
 80074e6:	e7c7      	b.n	8007478 <_printf_common+0x58>
 80074e8:	2301      	movs	r3, #1
 80074ea:	4622      	mov	r2, r4
 80074ec:	4641      	mov	r1, r8
 80074ee:	4638      	mov	r0, r7
 80074f0:	47c8      	blx	r9
 80074f2:	3001      	adds	r0, #1
 80074f4:	d0e6      	beq.n	80074c4 <_printf_common+0xa4>
 80074f6:	3601      	adds	r6, #1
 80074f8:	e7d9      	b.n	80074ae <_printf_common+0x8e>
	...

080074fc <_printf_i>:
 80074fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007500:	7e0f      	ldrb	r7, [r1, #24]
 8007502:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007504:	2f78      	cmp	r7, #120	@ 0x78
 8007506:	4691      	mov	r9, r2
 8007508:	4680      	mov	r8, r0
 800750a:	460c      	mov	r4, r1
 800750c:	469a      	mov	sl, r3
 800750e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007512:	d807      	bhi.n	8007524 <_printf_i+0x28>
 8007514:	2f62      	cmp	r7, #98	@ 0x62
 8007516:	d80a      	bhi.n	800752e <_printf_i+0x32>
 8007518:	2f00      	cmp	r7, #0
 800751a:	f000 80d1 	beq.w	80076c0 <_printf_i+0x1c4>
 800751e:	2f58      	cmp	r7, #88	@ 0x58
 8007520:	f000 80b8 	beq.w	8007694 <_printf_i+0x198>
 8007524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007528:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800752c:	e03a      	b.n	80075a4 <_printf_i+0xa8>
 800752e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007532:	2b15      	cmp	r3, #21
 8007534:	d8f6      	bhi.n	8007524 <_printf_i+0x28>
 8007536:	a101      	add	r1, pc, #4	@ (adr r1, 800753c <_printf_i+0x40>)
 8007538:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800753c:	08007595 	.word	0x08007595
 8007540:	080075a9 	.word	0x080075a9
 8007544:	08007525 	.word	0x08007525
 8007548:	08007525 	.word	0x08007525
 800754c:	08007525 	.word	0x08007525
 8007550:	08007525 	.word	0x08007525
 8007554:	080075a9 	.word	0x080075a9
 8007558:	08007525 	.word	0x08007525
 800755c:	08007525 	.word	0x08007525
 8007560:	08007525 	.word	0x08007525
 8007564:	08007525 	.word	0x08007525
 8007568:	080076a7 	.word	0x080076a7
 800756c:	080075d3 	.word	0x080075d3
 8007570:	08007661 	.word	0x08007661
 8007574:	08007525 	.word	0x08007525
 8007578:	08007525 	.word	0x08007525
 800757c:	080076c9 	.word	0x080076c9
 8007580:	08007525 	.word	0x08007525
 8007584:	080075d3 	.word	0x080075d3
 8007588:	08007525 	.word	0x08007525
 800758c:	08007525 	.word	0x08007525
 8007590:	08007669 	.word	0x08007669
 8007594:	6833      	ldr	r3, [r6, #0]
 8007596:	1d1a      	adds	r2, r3, #4
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	6032      	str	r2, [r6, #0]
 800759c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075a4:	2301      	movs	r3, #1
 80075a6:	e09c      	b.n	80076e2 <_printf_i+0x1e6>
 80075a8:	6833      	ldr	r3, [r6, #0]
 80075aa:	6820      	ldr	r0, [r4, #0]
 80075ac:	1d19      	adds	r1, r3, #4
 80075ae:	6031      	str	r1, [r6, #0]
 80075b0:	0606      	lsls	r6, r0, #24
 80075b2:	d501      	bpl.n	80075b8 <_printf_i+0xbc>
 80075b4:	681d      	ldr	r5, [r3, #0]
 80075b6:	e003      	b.n	80075c0 <_printf_i+0xc4>
 80075b8:	0645      	lsls	r5, r0, #25
 80075ba:	d5fb      	bpl.n	80075b4 <_printf_i+0xb8>
 80075bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075c0:	2d00      	cmp	r5, #0
 80075c2:	da03      	bge.n	80075cc <_printf_i+0xd0>
 80075c4:	232d      	movs	r3, #45	@ 0x2d
 80075c6:	426d      	negs	r5, r5
 80075c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075cc:	4858      	ldr	r0, [pc, #352]	@ (8007730 <_printf_i+0x234>)
 80075ce:	230a      	movs	r3, #10
 80075d0:	e011      	b.n	80075f6 <_printf_i+0xfa>
 80075d2:	6821      	ldr	r1, [r4, #0]
 80075d4:	6833      	ldr	r3, [r6, #0]
 80075d6:	0608      	lsls	r0, r1, #24
 80075d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80075dc:	d402      	bmi.n	80075e4 <_printf_i+0xe8>
 80075de:	0649      	lsls	r1, r1, #25
 80075e0:	bf48      	it	mi
 80075e2:	b2ad      	uxthmi	r5, r5
 80075e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80075e6:	4852      	ldr	r0, [pc, #328]	@ (8007730 <_printf_i+0x234>)
 80075e8:	6033      	str	r3, [r6, #0]
 80075ea:	bf14      	ite	ne
 80075ec:	230a      	movne	r3, #10
 80075ee:	2308      	moveq	r3, #8
 80075f0:	2100      	movs	r1, #0
 80075f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80075f6:	6866      	ldr	r6, [r4, #4]
 80075f8:	60a6      	str	r6, [r4, #8]
 80075fa:	2e00      	cmp	r6, #0
 80075fc:	db05      	blt.n	800760a <_printf_i+0x10e>
 80075fe:	6821      	ldr	r1, [r4, #0]
 8007600:	432e      	orrs	r6, r5
 8007602:	f021 0104 	bic.w	r1, r1, #4
 8007606:	6021      	str	r1, [r4, #0]
 8007608:	d04b      	beq.n	80076a2 <_printf_i+0x1a6>
 800760a:	4616      	mov	r6, r2
 800760c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007610:	fb03 5711 	mls	r7, r3, r1, r5
 8007614:	5dc7      	ldrb	r7, [r0, r7]
 8007616:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800761a:	462f      	mov	r7, r5
 800761c:	42bb      	cmp	r3, r7
 800761e:	460d      	mov	r5, r1
 8007620:	d9f4      	bls.n	800760c <_printf_i+0x110>
 8007622:	2b08      	cmp	r3, #8
 8007624:	d10b      	bne.n	800763e <_printf_i+0x142>
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	07df      	lsls	r7, r3, #31
 800762a:	d508      	bpl.n	800763e <_printf_i+0x142>
 800762c:	6923      	ldr	r3, [r4, #16]
 800762e:	6861      	ldr	r1, [r4, #4]
 8007630:	4299      	cmp	r1, r3
 8007632:	bfde      	ittt	le
 8007634:	2330      	movle	r3, #48	@ 0x30
 8007636:	f806 3c01 	strble.w	r3, [r6, #-1]
 800763a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800763e:	1b92      	subs	r2, r2, r6
 8007640:	6122      	str	r2, [r4, #16]
 8007642:	f8cd a000 	str.w	sl, [sp]
 8007646:	464b      	mov	r3, r9
 8007648:	aa03      	add	r2, sp, #12
 800764a:	4621      	mov	r1, r4
 800764c:	4640      	mov	r0, r8
 800764e:	f7ff fee7 	bl	8007420 <_printf_common>
 8007652:	3001      	adds	r0, #1
 8007654:	d14a      	bne.n	80076ec <_printf_i+0x1f0>
 8007656:	f04f 30ff 	mov.w	r0, #4294967295
 800765a:	b004      	add	sp, #16
 800765c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007660:	6823      	ldr	r3, [r4, #0]
 8007662:	f043 0320 	orr.w	r3, r3, #32
 8007666:	6023      	str	r3, [r4, #0]
 8007668:	4832      	ldr	r0, [pc, #200]	@ (8007734 <_printf_i+0x238>)
 800766a:	2778      	movs	r7, #120	@ 0x78
 800766c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	6831      	ldr	r1, [r6, #0]
 8007674:	061f      	lsls	r7, r3, #24
 8007676:	f851 5b04 	ldr.w	r5, [r1], #4
 800767a:	d402      	bmi.n	8007682 <_printf_i+0x186>
 800767c:	065f      	lsls	r7, r3, #25
 800767e:	bf48      	it	mi
 8007680:	b2ad      	uxthmi	r5, r5
 8007682:	6031      	str	r1, [r6, #0]
 8007684:	07d9      	lsls	r1, r3, #31
 8007686:	bf44      	itt	mi
 8007688:	f043 0320 	orrmi.w	r3, r3, #32
 800768c:	6023      	strmi	r3, [r4, #0]
 800768e:	b11d      	cbz	r5, 8007698 <_printf_i+0x19c>
 8007690:	2310      	movs	r3, #16
 8007692:	e7ad      	b.n	80075f0 <_printf_i+0xf4>
 8007694:	4826      	ldr	r0, [pc, #152]	@ (8007730 <_printf_i+0x234>)
 8007696:	e7e9      	b.n	800766c <_printf_i+0x170>
 8007698:	6823      	ldr	r3, [r4, #0]
 800769a:	f023 0320 	bic.w	r3, r3, #32
 800769e:	6023      	str	r3, [r4, #0]
 80076a0:	e7f6      	b.n	8007690 <_printf_i+0x194>
 80076a2:	4616      	mov	r6, r2
 80076a4:	e7bd      	b.n	8007622 <_printf_i+0x126>
 80076a6:	6833      	ldr	r3, [r6, #0]
 80076a8:	6825      	ldr	r5, [r4, #0]
 80076aa:	6961      	ldr	r1, [r4, #20]
 80076ac:	1d18      	adds	r0, r3, #4
 80076ae:	6030      	str	r0, [r6, #0]
 80076b0:	062e      	lsls	r6, r5, #24
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	d501      	bpl.n	80076ba <_printf_i+0x1be>
 80076b6:	6019      	str	r1, [r3, #0]
 80076b8:	e002      	b.n	80076c0 <_printf_i+0x1c4>
 80076ba:	0668      	lsls	r0, r5, #25
 80076bc:	d5fb      	bpl.n	80076b6 <_printf_i+0x1ba>
 80076be:	8019      	strh	r1, [r3, #0]
 80076c0:	2300      	movs	r3, #0
 80076c2:	6123      	str	r3, [r4, #16]
 80076c4:	4616      	mov	r6, r2
 80076c6:	e7bc      	b.n	8007642 <_printf_i+0x146>
 80076c8:	6833      	ldr	r3, [r6, #0]
 80076ca:	1d1a      	adds	r2, r3, #4
 80076cc:	6032      	str	r2, [r6, #0]
 80076ce:	681e      	ldr	r6, [r3, #0]
 80076d0:	6862      	ldr	r2, [r4, #4]
 80076d2:	2100      	movs	r1, #0
 80076d4:	4630      	mov	r0, r6
 80076d6:	f7f8 fd9b 	bl	8000210 <memchr>
 80076da:	b108      	cbz	r0, 80076e0 <_printf_i+0x1e4>
 80076dc:	1b80      	subs	r0, r0, r6
 80076de:	6060      	str	r0, [r4, #4]
 80076e0:	6863      	ldr	r3, [r4, #4]
 80076e2:	6123      	str	r3, [r4, #16]
 80076e4:	2300      	movs	r3, #0
 80076e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076ea:	e7aa      	b.n	8007642 <_printf_i+0x146>
 80076ec:	6923      	ldr	r3, [r4, #16]
 80076ee:	4632      	mov	r2, r6
 80076f0:	4649      	mov	r1, r9
 80076f2:	4640      	mov	r0, r8
 80076f4:	47d0      	blx	sl
 80076f6:	3001      	adds	r0, #1
 80076f8:	d0ad      	beq.n	8007656 <_printf_i+0x15a>
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	079b      	lsls	r3, r3, #30
 80076fe:	d413      	bmi.n	8007728 <_printf_i+0x22c>
 8007700:	68e0      	ldr	r0, [r4, #12]
 8007702:	9b03      	ldr	r3, [sp, #12]
 8007704:	4298      	cmp	r0, r3
 8007706:	bfb8      	it	lt
 8007708:	4618      	movlt	r0, r3
 800770a:	e7a6      	b.n	800765a <_printf_i+0x15e>
 800770c:	2301      	movs	r3, #1
 800770e:	4632      	mov	r2, r6
 8007710:	4649      	mov	r1, r9
 8007712:	4640      	mov	r0, r8
 8007714:	47d0      	blx	sl
 8007716:	3001      	adds	r0, #1
 8007718:	d09d      	beq.n	8007656 <_printf_i+0x15a>
 800771a:	3501      	adds	r5, #1
 800771c:	68e3      	ldr	r3, [r4, #12]
 800771e:	9903      	ldr	r1, [sp, #12]
 8007720:	1a5b      	subs	r3, r3, r1
 8007722:	42ab      	cmp	r3, r5
 8007724:	dcf2      	bgt.n	800770c <_printf_i+0x210>
 8007726:	e7eb      	b.n	8007700 <_printf_i+0x204>
 8007728:	2500      	movs	r5, #0
 800772a:	f104 0619 	add.w	r6, r4, #25
 800772e:	e7f5      	b.n	800771c <_printf_i+0x220>
 8007730:	08008969 	.word	0x08008969
 8007734:	0800897a 	.word	0x0800897a

08007738 <_realloc_r>:
 8007738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800773c:	4607      	mov	r7, r0
 800773e:	4614      	mov	r4, r2
 8007740:	460d      	mov	r5, r1
 8007742:	b921      	cbnz	r1, 800774e <_realloc_r+0x16>
 8007744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007748:	4611      	mov	r1, r2
 800774a:	f7ff bb99 	b.w	8006e80 <_malloc_r>
 800774e:	b92a      	cbnz	r2, 800775c <_realloc_r+0x24>
 8007750:	f7ff fcc4 	bl	80070dc <_free_r>
 8007754:	4625      	mov	r5, r4
 8007756:	4628      	mov	r0, r5
 8007758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800775c:	f000 f81a 	bl	8007794 <_malloc_usable_size_r>
 8007760:	4284      	cmp	r4, r0
 8007762:	4606      	mov	r6, r0
 8007764:	d802      	bhi.n	800776c <_realloc_r+0x34>
 8007766:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800776a:	d8f4      	bhi.n	8007756 <_realloc_r+0x1e>
 800776c:	4621      	mov	r1, r4
 800776e:	4638      	mov	r0, r7
 8007770:	f7ff fb86 	bl	8006e80 <_malloc_r>
 8007774:	4680      	mov	r8, r0
 8007776:	b908      	cbnz	r0, 800777c <_realloc_r+0x44>
 8007778:	4645      	mov	r5, r8
 800777a:	e7ec      	b.n	8007756 <_realloc_r+0x1e>
 800777c:	42b4      	cmp	r4, r6
 800777e:	4622      	mov	r2, r4
 8007780:	4629      	mov	r1, r5
 8007782:	bf28      	it	cs
 8007784:	4632      	movcs	r2, r6
 8007786:	f7ff fc9b 	bl	80070c0 <memcpy>
 800778a:	4629      	mov	r1, r5
 800778c:	4638      	mov	r0, r7
 800778e:	f7ff fca5 	bl	80070dc <_free_r>
 8007792:	e7f1      	b.n	8007778 <_realloc_r+0x40>

08007794 <_malloc_usable_size_r>:
 8007794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007798:	1f18      	subs	r0, r3, #4
 800779a:	2b00      	cmp	r3, #0
 800779c:	bfbc      	itt	lt
 800779e:	580b      	ldrlt	r3, [r1, r0]
 80077a0:	18c0      	addlt	r0, r0, r3
 80077a2:	4770      	bx	lr

080077a4 <_init>:
 80077a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a6:	bf00      	nop
 80077a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077aa:	bc08      	pop	{r3}
 80077ac:	469e      	mov	lr, r3
 80077ae:	4770      	bx	lr

080077b0 <_fini>:
 80077b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b2:	bf00      	nop
 80077b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077b6:	bc08      	pop	{r3}
 80077b8:	469e      	mov	lr, r3
 80077ba:	4770      	bx	lr
